using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.Extensions.DependencyInjection;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using Xunit.Abstractions;

namespace HalApplicationBuilder.Test {
    public class DistMvcProject : IDisposable {

        private readonly ITestOutputHelper? _console;

        #region Multi Threading
        public static DistMvcProject Use(ITestOutputHelper? console)
        {
            System.Threading.Monitor.Enter(_lockObject, ref _lockWasTaken);
            return new DistMvcProject(console);
        }

        private DistMvcProject(ITestOutputHelper? console) {
            _console = console;
        }

        private static readonly object _lockObject = new();
        private static bool _lockWasTaken = false;

        private bool disposedValue;
        public void Dispose()
        {
            if (!disposedValue)
            {
                if (_runningProcess != null) {
                    if(!_runningProcess.HasExited) _runningProcess.Kill(entireProcessTree: true);
                    _runningProcess.Dispose();
                }
                if (_lockWasTaken) {
                    System.Threading.Monitor.Exit(_lockObject);
                    _lockWasTaken = false;
                }
                disposedValue = true;
            }

            GC.SuppressFinalize(this);
        }
        ~DistMvcProject()
        {
            Dispose();
        }
        #endregion

        private static HalApplicationBuilder.Core.Config GetConfig() => new() {
            ApplicationName = "myapp",

            OutProjectDir = AppSettings.Load().GetTestAppCsprojDir(),

            EntityFrameworkDirectoryRelativePath = "EntityFramework/__AutoGenerated",
            DbContextName = "MyDbContext",
            DbContextNamespace = "HalApplicationBuilder.Test.DistMvc.EntityFramework",
            EntityNamespace = "HalApplicationBuilder.Test.DistMvc.EntityFramework.Entities",

            MvcModelDirectoryRelativePath = "Models/__AutoGenerated",
            MvcModelNamespace = "HalApplicationBuilder.Test.DistMvc.Models",

            MvcControllerDirectoryRelativePath = "Controllers/__AutoGenerated",
            MvcControllerNamespace = "HalApplicationBuilder.Test.DistMvc.Controllers",

            MvcViewDirectoryRelativePath = "Views/_AutoGenerated",
        };

        public DistMvcProject GenerateCodeFromNamespace(string? @namespace) {
            HalApplicationBuilder.CodeGenerator
                .FromAssembly(Assembly.GetExecutingAssembly(), @namespace)
                .GenerateAspNetCoreMvc("temp1", GetConfig(), false, Console.Out, null);
            return this;
        }
        public DistMvcProject GenerateCodeFromXml(string xmlFileName) {
            var fullpath = Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory(), "../../../", xmlFileName));
            using var sr = new StreamReader(fullpath);
            var xml = sr.ReadToEnd();
            HalApplicationBuilder.CodeGenerator
                .FromXml(xml)
                .GenerateAspNetCoreMvc("temp2", GetConfig(), false, Console.Out, null);
            return this;
        }

        public DistMvcProject Build() {
            if (_runningProcess != null)
                throw new InvalidOperationException("Webプロセスが実行中のためビルドできません。");

            var process = new Process();
            try {
                process.StartInfo.WorkingDirectory = "../../../../HalApplicationBuilder.Test.DistMvc";
                process.StartInfo.FileName = "dotnet";
                process.StartInfo.ArgumentList.Add("build");

                process.StartInfo.UseShellExecute = false;

                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.StandardOutputEncoding = Encoding.UTF8;

                var regex = new Regex(@"^\s*([0-9]*)\s*エラー$", RegexOptions.Multiline);
                bool failureToBuild = false;
                int errorCount = 0;
                process.OutputDataReceived += (sender, e) => {
                    if (!failureToBuild) {
                        if (e.Data == null) return;
                        var match = regex.Match(e.Data);
                        if (match == null) return;
                        if (!int.TryParse(match.Groups[1].Value, out errorCount)) return;
                        failureToBuild = errorCount > 0;
                    }
                };

                process.Start();
                process.BeginOutputReadLine();

                while (!process.HasExited) {
                    Thread.Sleep(100);
                }

                if (failureToBuild) {
                    throw new InvalidOperationException($"ビルドに失敗しました。(エラー数: {errorCount})");
                }

                return this;

            } finally {
                if (!process.HasExited) process.Kill(entireProcessTree: true);
                process.Dispose();
            }
        }

        private Process? _runningProcess;
        private StringBuilder _stdOut = new();

        private Uri? _rootUrl;
        public Uri GetRootURL() {
            if (_rootUrl == null) throw new InvalidOperationException("Webプロセスが実行中でないかURLが特定できません。");
            return _rootUrl;
        }

        public IWebDriver Run() {
            if (_runningProcess == null) {
                _rootUrl = null;
                _stdOut.Clear();

                _runningProcess = new Process();
                _runningProcess.StartInfo.WorkingDirectory = "../../../../HalApplicationBuilder.Test.DistMvc";
                _runningProcess.StartInfo.FileName = "dotnet";
                _runningProcess.StartInfo.ArgumentList.Add("run");
                _runningProcess.StartInfo.ArgumentList.Add("--no-build");

                _runningProcess.StartInfo.UseShellExecute = false;

                _runningProcess.StartInfo.RedirectStandardInput = true;
                _runningProcess.StartInfo.RedirectStandardOutput = true;
                _runningProcess.StartInfo.RedirectStandardError = true;
                _runningProcess.StartInfo.StandardInputEncoding = Encoding.UTF8;
                _runningProcess.StartInfo.StandardErrorEncoding = Encoding.UTF8;
                _runningProcess.StartInfo.StandardOutputEncoding = Encoding.UTF8;

                _runningProcess.OutputDataReceived += StdOutReceived;
                _runningProcess.ErrorDataReceived += StdErrReceived;

                _runningProcess.Start();
                _runningProcess.BeginOutputReadLine();
                _runningProcess.BeginErrorReadLine();
            }

            var regex = new Regex(@"Now listening on: (http.*)");
            var timeout = DateTime.Now.AddSeconds(30);
            while (DateTime.Now <= timeout) {
                var match = regex.Match(_stdOut.ToString());
                if (match.Success) {
                    _rootUrl = new Uri(match.Groups[1].Value);

                    var driver = new ChromeDriver();
                    driver.Navigate().GoToUrl(_rootUrl);
                    return driver;
                }
                Thread.Sleep(1000);
            }

            throw new InvalidOperationException($"テストアプリケーションのURLを特定できません。起動に失敗している可能性があります。");
        }

        private void StdOutReceived(object sender, DataReceivedEventArgs e) {
            _stdOut.AppendLine("STDOUT:: " + e.Data);
        }
        private void StdErrReceived(object sender, DataReceivedEventArgs e) {
            _stdOut.AppendLine("STDERR:: " + e.Data);
        }
    }
}
