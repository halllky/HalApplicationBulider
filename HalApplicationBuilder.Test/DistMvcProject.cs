using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.Extensions.DependencyInjection;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using static HalApplicationBuilder.Core.DBModel.SelectStatement;

namespace HalApplicationBuilder.Test {
    public class DistMvcProject {
        public static DistMvcProject Instance { get; } = new DistMvcProject();

        private DistMvcProject() { }

        private readonly object _lockObject = new();

        private static HalApplicationBuilder.Core.Config GetConfig() => new() {
            OutProjectDir = AppSettings.Load().GetTestAppCsprojDir(),

            EntityFrameworkDirectoryRelativePath = "EntityFramework/__AutoGenerated",
            DbContextName = "MyDbContext",
            DbContextNamespace = "HalApplicationBuilder.Test.DistMvc.EntityFramework",
            EntityNamespace = "HalApplicationBuilder.Test.DistMvc.EntityFramework.Entities",

            MvcModelDirectoryRelativePath = "Models/__AutoGenerated",
            MvcModelNamespace = "HalApplicationBuilder.Test.DistMvc.Models",

            MvcControllerDirectoryRelativePath = "Controllers/__AutoGenerated",
            MvcControllerNamespace = "HalApplicationBuilder.Test.DistMvc.Controllers",

            MvcViewDirectoryRelativePath = "Views/_AutoGenerated",
        };

        public Assembly GetAssembly() {
            lock (_lockObject) {
                var csprojDir = AppSettings.Load().GetTestAppCsprojDir();
                var path = Path.Combine(csprojDir, "bin", "Debug", "net7.0", "HalApplicationBuilder.Test.DistMvc.dll");
                return Assembly.LoadFile(path);
            }
        }

        public DistMvcProject GenerateCode(string? @namespace) {
            lock (_lockObject) {
                var serviceCollection = new ServiceCollection();
                HalApp.Configure(
                    serviceCollection,
                    GetConfig(),
                    Assembly.GetExecutingAssembly(),
                    @namespace);
                var provider = serviceCollection.BuildServiceProvider();
                var halapp = provider.GetRequiredService<HalApp>();

                halapp.GenerateCode();
            }
            return this;
        }

        public WebProcess RunWebProcess() => WebProcess.Run();

        public class WebProcess : IDisposable
        {
            public static WebProcess Run()
            {
                var process = new Process();
                process.StartInfo.WorkingDirectory = "../../../../HalApplicationBuilder.Test.DistMvc";
                process.StartInfo.FileName = "dotnet";
                process.StartInfo.ArgumentList.Add("run");

                process.StartInfo.UseShellExecute = false;

                process.StartInfo.RedirectStandardInput = true;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.RedirectStandardError = true;
                process.StartInfo.StandardInputEncoding = Encoding.UTF8;
                process.StartInfo.StandardErrorEncoding = Encoding.UTF8;
                process.StartInfo.StandardOutputEncoding = Encoding.UTF8;

                var stdOut = new StringBuilder();
                process.OutputDataReceived += (sender, e) =>
                {
                    stdOut.AppendLine("STDOUT:: " + e.Data);
                    Console.WriteLine("STDOUT:: " + e.Data);
                };
                process.ErrorDataReceived += (sender, e) =>
                {
                    Console.WriteLine("STDERR:: " + e.Data);
                };

                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();

                Thread.Sleep(10 * 1000);

                return new WebProcess(process, stdOut);
            }

            private WebProcess(Process process, StringBuilder stdOut)
            {
                _process = process;
                _stdOut = stdOut;
            }

            private readonly StringBuilder _stdOut;
            private Uri? _rootUrl;
            public Uri GetRootURL()
            {
                if (_rootUrl != null) return _rootUrl;

                var regex = new Regex(@"Now listening on: (http.*)");
                var str = _stdOut.ToString().Split(Environment.NewLine);
                foreach (var line in str)
                {
                    var match = regex.Match(line);
                    if (match.Success)
                    {
                        _rootUrl = new Uri(match.Groups[1].Value);
                        return _rootUrl;
                    }
                }

                throw new InvalidOperationException($"テストアプリケーションのURLを特定できません。");
            }

            public IWebDriver GetChromeDriver()
            {
                var driver = new ChromeDriver();
                driver.Navigate().GoToUrl(GetRootURL());
                return driver;
            }
            public IWebDriver GetFireFoxDriver()
            {
                var driver = new FirefoxDriver();
                driver.Navigate().GoToUrl(GetRootURL());
                return driver;
            }

            private readonly Process _process;
            private bool _disposed = false;
            public void Dispose()
            {
                if (!_disposed)
                {
                    _process.Kill(entireProcessTree: true);
                    _process.Dispose();
                    _disposed = true;
                }
            }
        }
    }
}
