using System;
using System.IO;
using System.Reflection;
using Microsoft.Extensions.DependencyInjection;

namespace HalApplicationBuilder.Test {
    public class TestApplication {
        public static TestApplication Instance { get; } = new TestApplication();

        private TestApplication() { }

        private readonly object _lockObject = new();

        private HalApplicationBuilder.Core.Config GetConfig() => new() {
            DbContextName = "MyDbContext",
            DbContextNamespace = "HalApplicationBuilder.Test.TestApplication.EntityFramework",
            EntityNamespace = "HalApplicationBuilder.Test.TestApplication.EntityFramework.Entities",

            MvcModelNamespace = "HalApplicationBuilder.Test.TestApplication.Models",
            MvcControllerNamespace = "HalApplicationBuilder.Test.TestApplication.Controllers",

            MvcViewDirectoryRelativePath = "Views/_AutoGenerated",
        };

        public void GenerateCodeAndBuild() {
            lock (_lockObject) {
                var serviceCollection = new ServiceCollection();
                HalApp.Configure(serviceCollection, GetConfig(), Assembly.GetExecutingAssembly());
                var provider = serviceCollection.BuildServiceProvider();
                var halapp = provider.GetService<HalApp>();

                halapp.GenerateCode();

                var csprojDir = AppSettings.Load().GetTestAppCsprojDir();
                var cmd = new CmdProcess(csprojDir);
                try {
                    cmd.Start("dotnet", "build");
                } catch (Exception ex) {
                    throw new Exception("Failure to build test project.", ex);
                }
            }
        }
    }
}
