using System;
using System.IO;
using System.Reflection;
using Microsoft.Extensions.DependencyInjection;

namespace HalApplicationBuilder.Test {
    public class TestApplication {
        public static TestApplication Instance { get; } = new TestApplication();

        private TestApplication() { }

        private readonly object _lockObject = new();

        private static HalApplicationBuilder.Core.Config GetConfig() => new() {
            OutProjectDir = AppSettings.Load().GetTestAppCsprojDir(),

            EntityFrameworkDirectoryRelativePath = "EntityFramework/__AutoGenerated",
            DbContextName = "MyDbContext",
            DbContextNamespace = "HalApplicationBuilder.Test.TestApplication.EntityFramework",
            EntityNamespace = "HalApplicationBuilder.Test.TestApplication.EntityFramework.Entities",

            MvcModelDirectoryRelativePath = "Models/__AutoGenerated",
            MvcModelNamespace = "HalApplicationBuilder.Test.TestApplication.Models",

            MvcControllerDirectoryRelativePath = "Controllers/__AutoGenerated",
            MvcControllerNamespace = "HalApplicationBuilder.Test.TestApplication.Controllers",

            MvcViewDirectoryRelativePath = "Views/_AutoGenerated",
        };

        public Assembly GetAssembly() {
            lock (_lockObject) {
                var csprojDir = AppSettings.Load().GetTestAppCsprojDir();
                var path = Path.Combine(csprojDir, "bin", "Debug", "net5.0", "HalApplicationBuilder.Test.TestApplication.dll");
                return Assembly.LoadFile(path);
            }
        }

        public void GenerateCode() {
            lock (_lockObject) {
                var serviceCollection = new ServiceCollection();
                HalApp.Configure(
                    serviceCollection,
                    GetConfig(),
                    Assembly.GetExecutingAssembly(),
                    typeof(Tests.正常系.ルート集約1).Namespace);
                var provider = serviceCollection.BuildServiceProvider();
                var halapp = provider.GetService<HalApp>();

                halapp.GenerateCode();
            }
        }
        public void BuildProject() {
            lock (_lockObject) {
                var csprojDir = AppSettings.Load().GetTestAppCsprojDir();
                var cmd = new CmdProcess(csprojDir);
                try {
                    cmd.Start("dotnet", "build");
                } catch (Exception ex) {
                    throw new Exception("Failure to build test project.", ex);
                }
            }
        }
    }
}
