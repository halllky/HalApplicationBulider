var builder = WebApplication.CreateBuilder(args);

HalApplicationBuilder.HalApp.Configure(
    builder.Services,
    new HalApplicationBuilder.Core.Config() {
        OutProjectDir = "TODO: 実行時プロジェクトはRuntimeContextにしか関心がないのにこの設定も求められる件",

        EntityFrameworkDirectoryRelativePath = "EntityFramework/__AutoGenerated",
        DbContextName = "MyDbContext",
        DbContextNamespace = "HalApplicationBuilder.Test.DistMvc.EntityFramework",
        EntityNamespace = "HalApplicationBuilder.Test.DistMvc.EntityFramework.Entities",

        MvcModelDirectoryRelativePath = "Models/__AutoGenerated",
        MvcModelNamespace = "HalApplicationBuilder.Test.DistMvc.Models",

        MvcControllerDirectoryRelativePath = "Controllers/__AutoGenerated",
        MvcControllerNamespace = "HalApplicationBuilder.Test.DistMvc.Controllers",

        MvcViewDirectoryRelativePath = "Views/_AutoGenerated",
    },
    // これは仕方ない
    typeof(HalApplicationBuilder.Test.Tests.正常系._20221210試用版.商品).Assembly,
    typeof(HalApplicationBuilder.Test.Tests.正常系._20221210試用版.商品).Namespace);

// TODO: これの登録を実行時プロジェクト内でやらなければならない
builder.Services.AddScoped(provider => {
    var assembly = System.Reflection.Assembly.GetExecutingAssembly();
    return provider.GetRequiredService<HalApplicationBuilder.HalApp>().GetRuntimeContext(assembly);
});
// SaveやDetailでDbContextをダイレクトに参照しているため
builder.Services.AddScoped<Microsoft.EntityFrameworkCore.DbContext>(provider => {
    return provider.GetRequiredService<HalApplicationBuilder.Test.DistMvc.EntityFramework.MyDbContext>();
});
builder.Services.AddDbContext<HalApplicationBuilder.Test.DistMvc.EntityFramework.MyDbContext>(option => {
    var connStr = $"Data Source=\"{System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "bin", "Debug", "debug.sqlite3")}\"";
    Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(option);
    Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(option, connStr);
});
builder.Services.AddScoped<HalApplicationBuilder.Core.DBModel.SelectStatement.IParamGenerator>(_ => {
    return new SqliteParamGenerator();
});

// Add services to the container.
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment()) {
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
