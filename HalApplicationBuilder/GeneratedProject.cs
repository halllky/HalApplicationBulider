using HalApplicationBuilder.Core;
using HalApplicationBuilder.DotnetEx;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace HalApplicationBuilder {
    internal class GeneratedProject {

        private const string HALAPP_XML_NAME = "halapp.xml";

        /// <summary>
        /// 新しいhalappプロジェクトを作成します。
        /// </summary>
        /// <param name="applicationName">アプリケーション名</param>
        /// <param name="verbose">ログの詳細出力を行うかどうか</param>
        /// <returns>作成されたプロジェクトを表すオブジェクト</returns>
        internal static GeneratedProject Create(string? applicationName, bool verbose, CancellationToken cancellationToken, TextWriter? log = null) {

            if (string.IsNullOrWhiteSpace(applicationName))
                throw new InvalidOperationException($"Please specify name of new application. example 'halapp create my-new-app'");

            if (Path.GetInvalidFileNameChars().Any(applicationName.Contains))
                throw new InvalidOperationException($"'{applicationName}' contains invalid characters for a file name.");

            var rootNamespace = applicationName.ToCSharpSafe();
            var config = new Config {
                ApplicationName = applicationName,
                DbContextName = "MyDbContext",
                DbContextNamespace = $"{rootNamespace}.EntityFramework",
                EntityFrameworkDirectoryRelativePath = "EntityFramework/__AutoGenerated",
                EntityNamespace = $"{rootNamespace}.EntityFramework.Entities",
                MvcControllerDirectoryRelativePath = "Controllers/__AutoGenerated",
                MvcControllerNamespace = $"{rootNamespace}.Controllers",
                MvcModelDirectoryRelativePath = "Models/__AutoGenerated",
                MvcModelNamespace = $"{rootNamespace}.Models",
                MvcViewDirectoryRelativePath = "Views/_AutoGenerated",
                OutProjectDir = ".",
            };
            var generator = CodeGenerator.FromReflection(Enumerable.Empty<Type>());
            var projectRoot = Path.Combine(Directory.GetCurrentDirectory(), applicationName);

            generator.GenerateReactAndWebApi(projectRoot, config, verbose, log, cancellationToken);

            // halapp.xmlの作成
            var xmlPath = Path.Combine(projectRoot, HALAPP_XML_NAME);
            var xmlContent = config.ToXml();
            using var sw = new StreamWriter(xmlPath, append: false, encoding: new UTF8Encoding(false));
            sw.WriteLine(xmlContent);

            return new GeneratedProject(projectRoot);
        }
        /// <summary>
        /// 既存のhalappプロジェクトを開きます。
        /// </summary>
        /// <param name="path">プロジェクトルートディレクトリの絶対パス</param>
        /// <returns>作成されたプロジェクトを表すオブジェクト</returns>
        internal static GeneratedProject Open(string? path) {
            if (string.IsNullOrWhiteSpace(path))
                return new GeneratedProject(Directory.GetCurrentDirectory());
            else if (Directory.Exists(path))
                return new GeneratedProject(path);
            else
                return new GeneratedProject(Path.Combine(Directory.GetCurrentDirectory(), path));
        }


        private GeneratedProject(string projetctRoot) {
            if (string.IsNullOrWhiteSpace(projetctRoot))
                throw new ArgumentException($"'{nameof(projetctRoot)}' is required.");

            ProjectRoot = projetctRoot;
        }

        internal string ProjectRoot { get; }


        internal AppSchema ReadSchema() {
            var xmlFullPath = Path.Combine(ProjectRoot, HALAPP_XML_NAME);
            using var stream = DotnetEx.IO.OpenFileWithRetry(xmlFullPath);
            using var reader = new StreamReader(stream);
            var xmlContent = reader.ReadToEnd();
            var appSchema = AppSchema.FromXml(xmlContent);
            return appSchema;
        }
        internal Config ReadConfig() {
            var xmlFullPath = Path.Combine(ProjectRoot, HALAPP_XML_NAME);
            using var stream = DotnetEx.IO.OpenFileWithRetry(xmlFullPath);
            using var reader = new StreamReader(stream);
            var xmlContent = reader.ReadToEnd();
            var config = Core.Config.FromXml(xmlContent);
            return config;
        }


        /// <summary>
        /// このディレクトリがhalappのものとして妥当なものかどうかを検査します。
        /// </summary>
        /// <param name="log">エラー内容出力</param>
        /// <returns></returns>
        internal bool IsValidDirectory(TextWriter? log = null) {
            var errors = new List<string>();

            if (Path.GetInvalidPathChars().Any(ProjectRoot.Contains))
                errors.Add($"Invalid path format: '{ProjectRoot}'");

            if (!Directory.Exists(ProjectRoot))
                errors.Add($"Directory '{ProjectRoot}' is not exist.");

            var halappXml = Path.Combine(ProjectRoot, HALAPP_XML_NAME);
            if (!File.Exists(halappXml))
                errors.Add($"'{halappXml}' is not found.");

            if (log != null) {
                foreach (var error in errors) log.WriteLine(error);
            }
            return errors.Count == 0;
        }

        /// <summary>
        /// コードの自動生成を試みます。
        /// </summary>
        /// <param name="verbose">詳細なログを出力するか否か</param>
        /// <param name="cancellationToken">キャンセル機構</param>
        /// <param name="log">ログ出力先</param>
        internal void GenerateCode(bool verbose, CancellationToken cancellationToken, TextWriter? log = null) {
            var config = ReadConfig();
            var appSchema = ReadSchema();

            CodeGenerator
                .FromAppSchema(appSchema)
                .GenerateReactAndWebApi(ProjectRoot, config, verbose, log, cancellationToken);
        }

        /// <summary>
        /// デバッグを開始します。
        /// </summary>
        internal void StartDebugging(bool verbose, CancellationToken cancellationToken, TextWriter? log = null) {

            if (!IsValidDirectory(log)) return;

            var config = ReadConfig();

            // migration用設定
            var migrationList = new DotnetEx.Cmd {
                WorkingDirectory = ProjectRoot,
                CancellationToken = cancellationToken,
                Verbose = verbose,
            };
            var previousMigrationId = migrationList
                .ReadOutputs("dotnet", "ef", "migrations", "list")
                .LastOrDefault();
            var nextMigrationId = Guid
                .NewGuid()
                .ToString()
                .Replace("-", "");
            var migratedInThisProcess = false;

            // 以下の2種類のキャンセルがあるので統合する
            // - ユーザーの操作による halapp debug 全体のキャンセル
            // - 集約定義ファイル更新によるビルドのキャンセル
            CancellationTokenSource? rebuildCancellation = null;
            CancellationTokenSource? linkedTokenSource = null;

            // バックグラウンド処理の宣言
            DotnetEx.Cmd.Background? dotnetRun = null;
            DotnetEx.Cmd.Background? npmStart = null;

            // ファイル変更監視用オブジェクト
            FileSystemWatcher? watcher = null;

            try {
                var changed = false;

                // halapp debug 中ずっと同じインスタンスが使われるものを初期化する
                watcher = new FileSystemWatcher(ProjectRoot);
                watcher.Filter = HALAPP_XML_NAME;
                watcher.NotifyFilter = NotifyFilters.LastWrite;
                watcher.Changed += (_, _) => {
                    changed = true;
                    rebuildCancellation?.Cancel();
                };

                npmStart = new DotnetEx.Cmd.Background {
                    WorkingDirectory = Path.Combine(ProjectRoot, CodeGenerator.ReactAndWebApiGenerator.REACT_DIR),
                    Filename = "npm",
                    Args = new[] { "start" },
                    CancellationToken = cancellationToken,
                    Verbose = verbose,
                };

                // 監視開始
                watcher.EnableRaisingEvents = true;
                npmStart.Restart();

                // リビルドの度に実行される処理
                while (true) {
                    dotnetRun?.Dispose();
                    rebuildCancellation?.Dispose();
                    linkedTokenSource?.Dispose();

                    rebuildCancellation = new CancellationTokenSource();
                    linkedTokenSource = CancellationTokenSource.CreateLinkedTokenSource(
                        cancellationToken,
                        rebuildCancellation.Token);

                    try {
                        // ソースファイル再生成 & npm watch による自動更新
                        GenerateCode(verbose, linkedTokenSource.Token, log);

                        linkedTokenSource.Token.ThrowIfCancellationRequested();

                        // DB定義の更新
                        var migration = new DotnetEx.Cmd {
                            WorkingDirectory = ProjectRoot,
                            CancellationToken = linkedTokenSource.Token,
                            Verbose = verbose,
                        };
                        migration.Exec("dotnet", "build");

                        // 集約定義を書き換えるたびにマイグレーションが積み重なっていってしまうため、
                        // 1回のhalapp debugで作成されるマイグレーションは1つまでとする
                        if (migratedInThisProcess && !string.IsNullOrWhiteSpace(previousMigrationId)) {
                            Console.WriteLine($"DB定義を右記地点に巻き戻します: {previousMigrationId}");
                            migration.Exec("dotnet", "ef", "database", "update", previousMigrationId, "--no-build");
                            migration.Exec("dotnet", "ef", "migrations", "remove", "--no-build");
                            migration.Exec("dotnet", "build");

                            linkedTokenSource.Token.ThrowIfCancellationRequested();
                        }

                        migration.Exec("dotnet", "ef", "migrations", "add", nextMigrationId, "--no-build");
                        migration.Exec("dotnet", "build");
                        migration.Exec("dotnet", "ef", "database", "update", nextMigrationId, "--no-build");

                        linkedTokenSource.Token.ThrowIfCancellationRequested();

                    } catch (OperationCanceledException ex) when (ex.CancellationToken == rebuildCancellation?.Token) {
                        // 実行中のビルドを中断してもう一度最初から
                        break;
                    } catch (Exception ex) {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Error.WriteLine(ex.ToString());
                        Console.ResetColor();
                    }

                    changed = false;
                    migratedInThisProcess = true;

                    // ビルドが完了したので dotnet run を再開
                    dotnetRun = new DotnetEx.Cmd.Background {
                        WorkingDirectory = ProjectRoot,
                        Filename = "dotnet",
                        Args = new[] { "run", "--no-build" },
                        CancellationToken = linkedTokenSource.Token,
                        Verbose = verbose,
                    };
                    dotnetRun.Restart();

                    // 次の更新まで待機
                    while (changed == false) {
                        Thread.Sleep(100);
                        cancellationToken.ThrowIfCancellationRequested();
                    }
                }

            } catch (OperationCanceledException) {
                // 何もしない

            } finally {
                rebuildCancellation?.Dispose();
                linkedTokenSource?.Dispose();
                dotnetRun?.Dispose();
                npmStart?.Dispose();
                watcher?.Dispose();
            }
        }
    }
}
