using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace HalApplicationBuilder {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("コード自動生成開始");

            var config = new Core.Config {
                DbContextName = "SampleDbContext",
                DbContextNamespace = "HalApplicationBuilderSampleMvc.EntityFramework",
                EntityNamespace = "HalApplicationBuilderSampleMvc.EntityFramework.Entities",
                MvcModelNamespace = "HalApplicationBuilderSampleMvc.Models",
                MvcControllerNamespace = "HalApplicationBuilderSampleMvc.Controllers",
            };
            var dll = Assembly.LoadFile("/__local__/20221211_haldoc_csharp/haldoc/HalApplicationBuilderSampleSchema/bin/Debug/net5.0/HalApplicationBuilderSampleSchema.dll");
            var builder = new Core.AggregateBuilder(dll, config);

            Console.WriteLine("コード自動生成開始: Entity定義");
            var efSourceDir = "/__local__/20221211_haldoc_csharp/haldoc/HalApplicationBuilderSampleMvc/EntityFramework";
            var efSourceFile = Path.Combine(efSourceDir, "__AutoGeneratedEntities.cs");
            if (!Directory.Exists(efSourceDir)) Directory.CreateDirectory(efSourceDir);
            using (var sw = new StreamWriter(efSourceFile, append: false, encoding: Encoding.UTF8)) {
                var source = new Runtime.EFCore.EFCoreSource { AggregateBuilder = builder, Config = config };
                sw.Write(source.TransformText());
            }

            Console.WriteLine("コード自動生成開始: MVC Model");
            var modelDir = "/__local__/20221211_haldoc_csharp/haldoc/HalApplicationBuilderSampleMvc/Models";
            var modelFile = Path.Combine(modelDir, "__AutoGeneratedModels.cs");
            if (!Directory.Exists(modelDir)) Directory.CreateDirectory(modelDir);
            using (var sw = new StreamWriter(modelFile, append: false, encoding: Encoding.UTF8)) {
                var source = new Runtime.AspNetMvc.MvcModels { AggregateBuilder = builder, Config = config };
                sw.Write(source.TransformText());
            }

            Console.WriteLine("コード自動生成開始: MultiView");
            var viewDir = "/__local__/20221211_haldoc_csharp/haldoc/HalApplicationBuilderSampleMvc/Views/__AutoGenerated";
            if (!Directory.Exists(viewDir)) Directory.CreateDirectory(viewDir);
            foreach (var file in Directory.GetFiles(viewDir)) {
                File.Delete(file);
            }
            foreach (var aggregate in builder.EnumerateRootAggregates()) {
                var multiView = new Runtime.AspNetMvc.MultiView { RootAggregate = aggregate };
                var filename = Path.Combine(viewDir, multiView.FileName);
                using var sw = new StreamWriter(filename, append: false, encoding: Encoding.UTF8);
                sw.Write(multiView.TransformText());
            }

            Console.WriteLine("コード自動生成終了");
        }
    }
}
