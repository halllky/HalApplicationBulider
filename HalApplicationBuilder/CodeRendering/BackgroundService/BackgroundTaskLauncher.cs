// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HalApplicationBuilder.CodeRendering.BackgroundService
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class BackgroundTaskLauncher : BackgroundTaskLauncherBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(RootNamespace));
            this.Write(" {\r\n    public sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASSNAME));
            this.Write(" : Microsoft.Extensions.Hosting.BackgroundService {\r\n    \r\n        protected over" +
                    "ride async Task ExecuteAsync(CancellationToken stoppingToken) {\r\n            var" +
                    " serviceCollection = new ServiceCollection();\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(new Configure(_ctx).ClassFullname));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(Configure.INIT_BATCH_PROCESS));
            this.Write(@"(serviceCollection);
            var services = serviceCollection.BuildServiceProvider();
            
            var logger = services.GetRequiredService<ILogger>();
            var settings = services.GetRequiredService<RuntimeSettings.Server>();
            var runningTasks = new Dictionary<string, Task>();

            var directory = Path.Combine(Directory.GetCurrentDirectory(), settings.JobDirectory ?? ""job"");
            if (!Directory.Exists(directory)) Directory.CreateDirectory(directory);

            stoppingToken.Register(() => {
                logger.LogInformation($""バッチ起動監視処理の中止が要請されました。"");
            });

            try {

                logger.LogInformation($""バッチ起動監視 開始"");

                while (!stoppingToken.IsCancellationRequested) {
                    // 待機
                    try {
                        await Task.Delay(settings.BackgroundTask.PollingSpanMilliSeconds, stoppingToken);
                    } catch (TaskCanceledException) {
                        continue;
                    }
                
                    // 終了しているバッチがないか調べる
                    using var pollingScope = services.CreateScope();
                    var dbContext = pollingScope.ServiceProvider.GetRequiredService<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextFullName));
            this.Write(">();\r\n                    DetectFinishing(runningTasks, dbContext, logger);\r\n\r\n  " +
                    "                  // 起動対象バッチがあるかどうか検索\r\n                    var queued = dbContex" +
                    "t\r\n                        .BackgroundTasks\r\n                        .Where(task" +
                    " => task.State == E_BackgroundTaskState.WaitToStart)\r\n                        .O" +
                    "rderBy(task => task.RequestTime)\r\n                        .Take(5)\r\n            " +
                    "            .ToArray();\r\n                    if (!queued.Any()) continue;\r\n\r\n   " +
                    "                 // バッチ起動\r\n                    var now = DateTime.Now;\r\n        " +
                    "            var contextFactory = new BackgroundTaskContextFactory(now, services," +
                    " directory);\r\n                    foreach (var entity in queued) {\r\n            " +
                    "            try {\r\n                            var backgroundTask = FindTaskByID" +
                    "(entity.BatchType);\r\n                            var executeArgument = CreateExe" +
                    "cuteArgument(backgroundTask, entity, contextFactory, stoppingToken);\r\n\r\n        " +
                    "                    var task = Task.Run(() => {\r\n                               " +
                    " logger.LogInformation(\"バッチ実行開始 {Id} ({Type} {Name})\", entity.Id, entity.BatchTy" +
                    "pe, entity.Name);\r\n                                backgroundTask.Execute(execut" +
                    "eArgument);\r\n                                logger.LogInformation(\"バッチ実行終了 {Id}" +
                    " ({Type} {Name})\", entity.Id, entity.BatchType, entity.Name);\r\n                 " +
                    "           }, CancellationToken.None);\r\n                            runningTasks" +
                    ".Add(entity.Id, task);\r\n\r\n                            entity.StartTime = now;\r\n " +
                    "                           entity.State = E_BackgroundTaskState.Running;\r\n      " +
                    "                      dbContext.SaveChanges();\r\n\r\n                        } catc" +
                    "h (Exception ex) {\r\n                            logger.LogError(ex, \"バッチの起動に失敗しま" +
                    "した({Id} {Name}): {Message}\", entity.Id, entity.Name, ex.Message);\r\n             " +
                    "           }\r\n                    }\r\n                }\r\n            } catch (Exc" +
                    "eption ex) {\r\n                logger.LogCritical(ex, \"バッチ起動監視処理でエラーが発生しました: {Mes" +
                    "sage}\", ex.Message);\r\n            }\r\n\r\n            // 起動中ジョブの終了を待機\r\n            " +
                    "try {\r\n                logger.LogInformation(\"起動中ジョブの終了を待機します。\");\r\n             " +
                    "   using var disposingScope = services.CreateScope();\r\n                Task.Wait" +
                    "All(runningTasks.Values.ToArray(), CancellationToken.None);\r\n                var" +
                    " dbContext = disposingScope.ServiceProvider.GetRequiredService<RDRA.EntityFramew" +
                    "ork.MyDbContext>();\r\n                DetectFinishing(runningTasks, dbContext, lo" +
                    "gger);\r\n            } catch (Exception ex) {\r\n                logger.LogCritical" +
                    "(ex, \"バッチ起動監視処理(起動中ジョブの終了待機)でエラーが発生しました: {Message}\", ex.Message);\r\n            }" +
                    "\r\n\r\n            logger.LogInformation($\"バッチ起動監視 終了\");\r\n        }\r\n\r\n        /// " +
                    "<summary>\r\n        /// バッチIDと対応するクラスのインスタンスを作成して返します。\r\n        /// </summary>\r\n " +
                    "       private BackgroundTask FindTaskByID(string batchType) {\r\n            var " +
                    "assembly = Assembly.GetExecutingAssembly();\r\n            var types = assembly\r\n " +
                    "               .GetTypes()\r\n                .Select(type => new { type, attr = t" +
                    "ype.GetCustomAttribute<BackgroundTaskAttribute>() })\r\n                .Where(x =" +
                    "> x.attr?.Id == batchType)\r\n                .ToArray();\r\n            if (types.L" +
                    "ength == 0)\r\n                throw new InvalidOperationException($\"バッチID \'{batch" +
                    "Type}\' と対応するバッチが見つかりません。\");\r\n            if (types.Length >= 2)\r\n               " +
                    " throw new InvalidOperationException($\"バッチID \'{batchType}\' と対応するバッチが複数見つかりました。\")" +
                    ";\r\n\r\n            var type = types[0].type;\r\n            var instance = Activator" +
                    ".CreateInstance(type) ?? throw new InvalidOperationException($\"バッチ {batchType}: " +
                    "\'{type.Name}\' クラスのインスタンス化に失敗しました。引数なしコンストラクタがあるか等確認してください。\");\r\n            if (i" +
                    "nstance is not BackgroundTask backgroundTask) throw new InvalidOperationExceptio" +
                    "n($\"バッチ {batchType}: \'{type.Name}\' クラスは{nameof(BackgroundTask)}クラスを継承している必要があります" +
                    "。\");\r\n            return backgroundTask;\r\n        }\r\n        \r\n        /// <summ" +
                    "ary>\r\n        /// ジョブの起動指示をもとに実行用のオブジェクトを作成して返します。\r\n        /// </summary>\r\n    " +
                    "    private static JobChain CreateExecuteArgument(BackgroundTask backgroundTask," +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityNamespace));
            this.Write(".BackgroundTaskEntity entity, BackgroundTaskContextFactory contextFactory, Cancel" +
                    "lationToken stoppingToken) {\r\n            var type = backgroundTask.GetType();\r\n" +
                    "\r\n            while (type != null && type != typeof(object)) {\r\n                " +
                    "// パラメータなしの場合\r\n                if (type == typeof(BackgroundTask)) {\r\n          " +
                    "          return new JobChain(entity.Id, new(), contextFactory, stoppingToken);\r" +
                    "\n                }\r\n                // パラメータありの場合\r\n                if (type.IsGe" +
                    "nericType && type.GetGenericTypeDefinition() == typeof(BackgroundTask<>)) {\r\n   " +
                    "                 var genericType = type.GetGenericArguments()[0];\r\n\r\n           " +
                    "         object parsed;\r\n                    try {\r\n                        pars" +
                    "ed = JsonSerializer.Deserialize(entity.ParameterJson, genericType)!;\r\n          " +
                    "          } catch (JsonException ex) {\r\n                        throw new Invali" +
                    "dOperationException($\"バッチID {entity.Id} のパラメータを {genericType.Name} 型のJSONとして解釈でき" +
                    "ません。\", ex);\r\n                    }\r\n\r\n                    var jobChainType = typ" +
                    "eof(JobChainWithParameter<>).MakeGenericType(genericType);\r\n                    " +
                    "return (JobChain)Activator.CreateInstance(jobChainType, new object[] {\r\n        " +
                    "                entity.Id,\r\n                        parsed,\r\n                   " +
                    "     new Stack<string>(),\r\n                        contextFactory,\r\n            " +
                    "            stoppingToken,\r\n                    })!;\r\n                }\r\n       " +
                    "         type = type.BaseType;\r\n            }\r\n\r\n            throw new InvalidOp" +
                    "erationException();\r\n        }\r\n\r\n        /// <summary>\r\n        /// 終了したタスクを検知し" +
                    "て完了情報を記録します。\r\n        /// </summary>\r\n        private void DetectFinishing(Dicti" +
                    "onary<string, Task> runningTasks, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextFullName));
            this.Write(@" dbContext, ILogger logger) {
            // 終了したバッチを列挙
            var completedTasks = runningTasks
                .Where(kv => kv.Value.IsCompleted)
                .ToDictionary(kv => kv.Key, kv => kv.Value);
            if (!completedTasks.Any()) return;

            // バッチと対応するデータをDBから検索
            var ids = completedTasks.Keys.ToArray();
            var entities = dbContext
                .BackgroundTasks
                .Where(e => ids.Contains(e.Id))
                .ToDictionary(e => e.Id);
            var list = completedTasks.ToDictionary(
                kv => kv.Key,
                kv => entities.GetValueOrDefault(kv.Key));

            // そのバッチが完了した旨をDBに登録
            var now = DateTime.Now;
            foreach (var item in list) {
                if (item.Value == null) {
                    logger.LogError(""タスク {Id} の完了情報の記録に失敗しました"", item.Key);
                    continue;
                }
                item.Value.FinishTime = now;
                item.Value.State = completedTasks[item.Key].IsCompletedSuccessfully
                    ? E_BackgroundTaskState.Success
                    : E_BackgroundTaskState.Fault;
                dbContext.SaveChanges();

                runningTasks.Remove(item.Key);
            }
        }
    }
}

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(RootNamespace));
            this.Write(" {\r\n    public enum E_BackgroundTaskState {\r\n        WaitToStart = 0,\r\n        Ru" +
                    "nning = 1,\r\n        Success = 2,\r\n        Fault = 3,\r\n    }\r\n\r\n    public sealed" +
                    " class BackgroundTaskContextFactory {\r\n        public BackgroundTaskContextFacto" +
                    "ry(DateTime startTime, IServiceProvider serviceProvider, string directory) {\r\n  " +
                    "          _startTime = startTime;\r\n            _serviceProvider = serviceProvide" +
                    "r;\r\n            _directory = directory;\r\n        }\r\n        private readonly Dat" +
                    "eTime _startTime;\r\n        private readonly IServiceProvider _serviceProvider;\r\n" +
                    "        private readonly string _directory;\r\n\r\n        public BackgroundTaskCont" +
                    "ext CraeteScopedContext(string jobId) {\r\n            var scope = _serviceProvide" +
                    "r.CreateScope();\r\n            var dirName = $\"{_startTime:yyyyMMddHHmmss}_{jobId" +
                    "}\";\r\n            var workingDirectory = Path.Combine(_directory, dirName);\r\n    " +
                    "        return new BackgroundTaskContext(scope, _startTime, workingDirectory);\r\n" +
                    "        }\r\n        public BackgroundTaskContext<TParameter> CraeteScopedContext<" +
                    "TParameter>(string jobId, TParameter parameter) {\r\n            var scope = _serv" +
                    "iceProvider.CreateScope();\r\n            var dirName = $\"{_startTime:yyyyMMddHHmm" +
                    "ss}_{jobId}\";\r\n            var workingDirectory = Path.Combine(_directory, dirNa" +
                    "me);\r\n            return new BackgroundTaskContext<TParameter>(parameter, scope," +
                    " _startTime, workingDirectory);\r\n        }\r\n    }\r\n\r\n    public class Background" +
                    "TaskContext : IDisposable {\r\n        public BackgroundTaskContext(IServiceScope " +
                    "serviceScope, DateTime startTime, string workingDirectory) {\r\n            StartT" +
                    "ime = startTime;\r\n            WorkingDirectory = workingDirectory;\r\n            " +
                    "_serviceScope = serviceScope;\r\n        }\r\n\r\n        private readonly IServiceSco" +
                    "pe _serviceScope;\r\n\r\n        public DateTime StartTime { get; }\r\n        public " +
                    "string WorkingDirectory { get; }\r\n\r\n        public IServiceProvider ServiceProvi" +
                    "der => _serviceScope.ServiceProvider;\r\n        public ILogger Logger => ServiceP" +
                    "rovider.GetRequiredService<ILogger>();\r\n        public RDRA.EntityFramework.MyDb" +
                    "Context DbContext => ServiceProvider.GetRequiredService<RDRA.EntityFramework.MyD" +
                    "bContext>();\r\n\r\n        void IDisposable.Dispose() {\r\n            _serviceScope." +
                    "Dispose();\r\n        }\r\n    }\r\n    public class BackgroundTaskContext<TParameter>" +
                    " : BackgroundTaskContext {\r\n        public BackgroundTaskContext(TParameter para" +
                    "meter, IServiceScope serviceScope, DateTime startTime, string workingDirectory)\r" +
                    "\n            : base(serviceScope, startTime, workingDirectory) {\r\n            Pa" +
                    "rameter = parameter;\r\n        }\r\n        public TParameter Parameter { get; }\r\n " +
                    "   }\r\n\r\n    [System.AttributeUsage(AttributeTargets.Class, Inherited = false, Al" +
                    "lowMultiple = false)]\r\n    sealed class BackgroundTaskAttribute : Attribute {\r\n " +
                    "       public BackgroundTaskAttribute(string id) {\r\n            Id = id;\r\n      " +
                    "  }\r\n        public string Id { get; }\r\n        public string? DisplayName { get" +
                    "; set; }\r\n    }\r\n}\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityNamespace));
            this.Write(@" {
    public class BackgroundTaskEntity {
        [JsonPropertyName(""id"")]
        public string Id { get; set; } = string.Empty;
        [JsonPropertyName(""name"")]
        public string Name { get; set; } = string.Empty;
        [JsonPropertyName(""batchType"")]
        public string BatchType { get; set; } = string.Empty;
        [JsonPropertyName(""parameter"")]
        public string ParameterJson { get; set; } = string.Empty;
        [JsonPropertyName(""state"")]
        public E_BackgroundTaskState State { get; set; }
        [JsonPropertyName(""requestTime"")]
        public DateTime RequestTime { get; set; }
        [JsonPropertyName(""startTime"")]
        public DateTime? StartTime { get; set; }
        [JsonPropertyName(""finishTime"")]
        public DateTime? FinishTime { get; set; }

        public static void OnModelCreating(ModelBuilder modelBuilder) {
            modelBuilder.Entity<BackgroundTaskEntity>(e => {
                e.HasKey(e => e.Id);
            });
        }
    }
}

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextNamespace));
            this.Write(" {\r\n    partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextName));
            this.Write(" {\r\n        public virtual DbSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityNamespace));
            this.Write(".BackgroundTaskEntity> BackgroundTasks { get; set; }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class BackgroundTaskLauncherBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
