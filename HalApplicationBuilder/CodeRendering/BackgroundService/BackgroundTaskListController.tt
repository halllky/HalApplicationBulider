<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;
    using System.Text.Json.Serialization;
    
    [ApiController]
    [Route("<#=AggFile.Controller.SUBDOMAIN#>/[controller]")]
    public partial class BackgroundTaskController : ControllerBase {
        public BackgroundTaskController(<#=DbContextFullName#> dbContext) {
            _dbContext = dbContext;
        }
        protected readonly <#=DbContextFullName#> _dbContext;

        [HttpGet("list")]
        public virtual IActionResult Search([FromQuery] string param) {
            var json = System.Web.HttpUtility.UrlDecode(param);
            var condition = string.IsNullOrWhiteSpace(json)
                ? new BackgroundTaskListSearchCondition()
                : System.Text.Json.JsonSerializer.Deserialize<BackgroundTaskListSearchCondition>(json)!;
            var query = (IQueryable<BackgroundTaskEntity>)_dbContext.BackgroundTasks;

            // TODO

            var searchResult = query.AsEnumerable();

            return this.JsonContent(searchResult);
        }
    }

    public class BackgroundTaskListSearchCondition {
        [JsonPropertyName("id")]
        public string? Id { get; set; }
        [JsonPropertyName("name")]
        public string? Name { get; set; }
        [JsonPropertyName("batchType")]
        public string? BatchType { get; set; }

        [JsonPropertyName("stateIsWaitForStart")]
        public bool StateIsWaitForStart { get; set; }
        [JsonPropertyName("stateIsRunning")]
        public bool StateIsRunning { get; set; }
        [JsonPropertyName("stateIsSuccess")]
        public bool StateIsSuccess { get; set; }
        [JsonPropertyName("stateIsFault")]
        public bool StateIsFault { get; set; }
        
        [JsonPropertyName("requestTime")]
        public DateTime? RequestTime { get; set; }
        [JsonPropertyName("startTime")]
        public DateTime? StartTime { get; set; }
        [JsonPropertyName("finishTime")]
        public DateTime? FinishTime { get; set; }
    }
}
