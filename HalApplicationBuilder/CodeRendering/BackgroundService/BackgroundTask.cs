// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HalApplicationBuilder.CodeRendering.BackgroundService
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class BackgroundTask : BackgroundTaskBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System.Reflection;\r\nusing System.Text.Json;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(RootNamespace));
            this.Write(" {\r\n    public abstract class BackgroundTask {\r\n\r\n        public abstract void Ex" +
                    "ecute(JobChain job);\r\n        \r\n        public static void Schedule<TBatch, TPar" +
                    "ameter>(TParameter parameter, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextFullName));
            this.Write(" dbContext, DateTime now) where TBatch : BackgroundTask<TParameter> {\r\n          " +
                    "  Schedule(typeof(TBatch), parameter, dbContext, now);\r\n        }\r\n        publi" +
                    "c static void Schedule<TBatch>(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextFullName));
            this.Write(" dbContext, DateTime now) where TBatch : BackgroundTask {\r\n            Schedule(t" +
                    "ypeof(TBatch), null, dbContext, now);\r\n        }\r\n        public static void Sch" +
                    "edule(Type batchType, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextFullName));
            this.Write(" dbContext, DateTime now) {\r\n            Schedule(batchType, null, dbContext, now" +
                    ");\r\n        }\r\n        public static void Schedule(Type batchType, object? param" +
                    "eter, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextFullName));
            this.Write(@" dbContext, DateTime now) {
            var attribute = batchType.GetCustomAttribute<BackgroundTaskAttribute>()
                ?? throw new InvalidOperationException($""{batchType.Name} クラスに [BackgroundTask] 属性がついていません。"");
            var json = parameter == null
                ? string.Empty
                : JsonSerializer.Serialize(parameter);
            var entity = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityNamespace));
            this.Write(".BackgroundTaskEntity {\r\n                Id = Guid.NewGuid().ToString(),\r\n       " +
                    "         Name = attribute.DisplayName ?? batchType.Name,\r\n                BatchT" +
                    "ype = attribute.Id,\r\n                ParameterJson = json,\r\n                Requ" +
                    "estTime = now,\r\n                State = E_BackgroundTaskState.WaitToStart,\r\n    " +
                    "        };\r\n            dbContext.Add(entity);\r\n            dbContext.SaveChange" +
                    "s();\r\n        }\r\n    }\r\n    public abstract class BackgroundTask<TParameter> : B" +
                    "ackgroundTask {\r\n        public abstract void Execute(JobChainWithParameter<TPar" +
                    "ameter> job);\r\n        public sealed override void Execute(JobChain job) => Exec" +
                    "ute((JobChainWithParameter<TParameter>)job);\r\n    }\r\n\r\n\r\n    public class JobCha" +
                    "in {\r\n        public JobChain(string jobId, Stack<string> currentSections, Backg" +
                    "roundTaskContextFactory contextFactory, CancellationToken cancellationToken) {\r\n" +
                    "            _jobId = jobId;\r\n            _currentSections = currentSections;\r\n  " +
                    "          _contextFactory = contextFactory;\r\n            _cancellationToken = ca" +
                    "ncellationToken;\r\n        }\r\n\r\n        protected readonly string _jobId;\r\n      " +
                    "  protected readonly Stack<string> _currentSections;\r\n        protected readonly" +
                    " BackgroundTaskContextFactory _contextFactory;\r\n        protected readonly Cance" +
                    "llationToken _cancellationToken;\r\n\r\n        private bool _initialized = false;\r\n" +
                    "\r\n        protected T SectionBase<T>(string sectionName, Func<BackgroundTaskCont" +
                    "ext> createContext, Func<BackgroundTaskContext, T> execute) {\r\n            using" +
                    " var context = createContext();\r\n            try {\r\n                _cancellatio" +
                    "nToken.ThrowIfCancellationRequested();\r\n\r\n                if (!_initialized) {\r\n" +
                    "                    _initialized = true;\r\n                    Directory.CreateDi" +
                    "rectory(context.WorkingDirectory);\r\n                }\r\n\r\n                _curren" +
                    "tSections.Push(sectionName);\r\n                context.Logger.LogInformation(\"処理開" +
                    "始: {Section}\", string.Join(\" > \", _currentSections.Reverse()));\r\n               " +
                    " var returnValue = execute(context);\r\n                context.Logger.LogInformat" +
                    "ion(\"処理終了: {Section}\", string.Join(\" > \", _currentSections.Reverse()));\r\n       " +
                    "         _currentSections.Pop();\r\n\r\n                return returnValue;\r\n\r\n     " +
                    "       } catch (OperationCanceledException) {\r\n                context.Logger.Lo" +
                    "gInformation(\"処理がキャンセルされました。\");\r\n                throw;\r\n\r\n            } catch (" +
                    "Exception ex) {\r\n                context.Logger.LogInformation(ex, \"処理「{Section}" +
                    "」中にエラーが発生しました: {Message}\", sectionName, ex.Message);\r\n                throw;\r\n  " +
                    "          }\r\n        }\r\n\r\n        public JobChain Section(string sectionName, Ac" +
                    "tion<BackgroundTaskContext> callback) {\r\n            return SectionBase(sectionN" +
                    "ame, () => {\r\n                return _contextFactory.CraeteScopedContext(_jobId)" +
                    ";\r\n            }, context => {\r\n                callback(context);\r\n            " +
                    "    return this;\r\n            });\r\n        }\r\n        public JobChain<TReturnTyp" +
                    "e> Section<TReturnType>(string sectionName, Func<BackgroundTaskContext, TReturnT" +
                    "ype> callback) {\r\n            return SectionBase(sectionName, () => {\r\n         " +
                    "       return _contextFactory.CraeteScopedContext(_jobId);\r\n            }, conte" +
                    "xt => {\r\n                var result = callback(context);\r\n                return" +
                    " new JobChain<TReturnType>(result, _jobId, _currentSections, _contextFactory, _c" +
                    "ancellationToken);\r\n            });\r\n        }\r\n        public JobChain Section(" +
                    "string sectionName, Func<BackgroundTaskContext, Task> callback) {\r\n            r" +
                    "eturn SectionBase(sectionName, () => {\r\n                return _contextFactory.C" +
                    "raeteScopedContext(_jobId);\r\n            }, context => {\r\n                var ta" +
                    "sk = callback(context);\r\n                task.Wait();\r\n                return th" +
                    "is;\r\n            });\r\n        }\r\n        public JobChain<TReturnType> Section<TR" +
                    "eturnType>(string sectionName, Func<BackgroundTaskContext, Task<TReturnType>> ca" +
                    "llback) {\r\n            return SectionBase(sectionName, () => {\r\n                " +
                    "return _contextFactory.CraeteScopedContext(_jobId);\r\n            }, context => {" +
                    "\r\n                var task = callback(context);\r\n                task.Wait();\r\n " +
                    "               return new JobChain<TReturnType>(task.Result, _jobId, _currentSec" +
                    "tions, _contextFactory, _cancellationToken);\r\n            });\r\n        }\r\n    }\r" +
                    "\n    public sealed class JobChain<TSectionInput> : JobChain {\r\n        public Jo" +
                    "bChain(TSectionInput sectionInput, string jobId, Stack<string> currentSections, " +
                    "BackgroundTaskContextFactory contextFactory, CancellationToken cancellationToken" +
                    ")\r\n            : base(jobId, currentSections, contextFactory, cancellationToken)" +
                    " {\r\n            _sectionInput = sectionInput;\r\n        }\r\n\r\n        private read" +
                    "only TSectionInput _sectionInput;\r\n\r\n        public JobChain Section(string sect" +
                    "ionName, Action<BackgroundTaskContext, TSectionInput> callback) {\r\n            r" +
                    "eturn SectionBase(sectionName, () => {\r\n                return _contextFactory.C" +
                    "raeteScopedContext(_jobId);\r\n            }, context => {\r\n                callba" +
                    "ck(context, _sectionInput);\r\n                return this;\r\n            });\r\n    " +
                    "    }\r\n        public JobChain Section(string sectionName, Func<BackgroundTaskCo" +
                    "ntext, TSectionInput, Task> callback) {\r\n            return SectionBase(sectionN" +
                    "ame, () => {\r\n                return _contextFactory.CraeteScopedContext(_jobId)" +
                    ";\r\n            }, context => {\r\n                var task = callback(context, _se" +
                    "ctionInput);\r\n                task.Wait();\r\n                return this;\r\n      " +
                    "      });\r\n        }\r\n        public JobChain<TSectionOutput> Section<TSectionOu" +
                    "tput>(string sectionName, Func<BackgroundTaskContext, TSectionInput, TSectionOut" +
                    "put> callback) {\r\n            return SectionBase(sectionName, () => {\r\n         " +
                    "       return _contextFactory.CraeteScopedContext(_jobId);\r\n            }, conte" +
                    "xt => {\r\n                var result = callback(context, _sectionInput);\r\n       " +
                    "         return new JobChain<TSectionOutput>(result, _jobId, _currentSections, _" +
                    "contextFactory, _cancellationToken);\r\n            });\r\n        }\r\n        public" +
                    " JobChain<TSectionOutput> Section<TSectionOutput>(string sectionName, Func<Backg" +
                    "roundTaskContext, TSectionInput, Task<TSectionOutput>> callback) {\r\n            " +
                    "return SectionBase(sectionName, () => {\r\n                return _contextFactory." +
                    "CraeteScopedContext(_jobId);\r\n            }, context => {\r\n                var t" +
                    "ask = callback(context, _sectionInput);\r\n                task.Wait();\r\n         " +
                    "       return new JobChain<TSectionOutput>(task.Result, _jobId, _currentSections" +
                    ", _contextFactory, _cancellationToken);\r\n            });\r\n        }\r\n    }\r\n    " +
                    "public class JobChainWithParameter<TParameter> : JobChain {\r\n        public JobC" +
                    "hainWithParameter(string jobId, TParameter parameter, Stack<string> currentSecti" +
                    "ons, BackgroundTaskContextFactory contextFactory, CancellationToken cancellation" +
                    "Token)\r\n            : base(jobId, currentSections, contextFactory, cancellationT" +
                    "oken) {\r\n            _parameter = parameter;\r\n        }\r\n\r\n        private reado" +
                    "nly TParameter _parameter;\r\n\r\n        public JobChainWithParameter<TParameter> S" +
                    "ection(string sectionName, Action<BackgroundTaskContext<TParameter>> callback) {" +
                    "\r\n            return SectionBase(sectionName, () => {\r\n                return _c" +
                    "ontextFactory.CraeteScopedContext(_jobId, _parameter);\r\n            }, context =" +
                    "> {\r\n                callback((BackgroundTaskContext<TParameter>)context);\r\n    " +
                    "            return this;\r\n            });\r\n        }\r\n        public JobChainWit" +
                    "hParameter<TParameter> Section(string sectionName, Func<BackgroundTaskContext<TP" +
                    "arameter>, Task> callback) {\r\n            return SectionBase(sectionName, () => " +
                    "{\r\n                return _contextFactory.CraeteScopedContext(_jobId, _parameter" +
                    ");\r\n            }, context => {\r\n                var task = callback((Background" +
                    "TaskContext<TParameter>)context);\r\n                task.Wait();\r\n               " +
                    " return this;\r\n            });\r\n        }\r\n        public JobChainWithParameter<" +
                    "TParameter, TSectionOutput> Section<TSectionOutput>(string sectionName, Func<Bac" +
                    "kgroundTaskContext<TParameter>, TSectionOutput> callback) {\r\n            return " +
                    "SectionBase(sectionName, () => {\r\n                return _contextFactory.CraeteS" +
                    "copedContext(_jobId, _parameter);\r\n            }, context => {\r\n                " +
                    "var result = callback((BackgroundTaskContext<TParameter>)context);\r\n            " +
                    "    return new JobChainWithParameter<TParameter, TSectionOutput>(result, _jobId," +
                    " _parameter, _currentSections, _contextFactory, _cancellationToken);\r\n          " +
                    "  });\r\n        }\r\n        public JobChainWithParameter<TParameter, TSectionOutpu" +
                    "t> Section<TSectionOutput>(string sectionName, Func<BackgroundTaskContext<TParam" +
                    "eter>, Task<TSectionOutput>> callback) {\r\n            return SectionBase(section" +
                    "Name, () => {\r\n                return _contextFactory.CraeteScopedContext(_jobId" +
                    ", _parameter);\r\n            }, context => {\r\n                var task = callback" +
                    "((BackgroundTaskContext<TParameter>)context);\r\n                task.Wait();\r\n   " +
                    "             return new JobChainWithParameter<TParameter, TSectionOutput>(task.R" +
                    "esult, _jobId, _parameter, _currentSections, _contextFactory, _cancellationToken" +
                    ");\r\n            });\r\n        }\r\n    }\r\n    public class JobChainWithParameter<TP" +
                    "arameter, TSectionInput> : JobChain {\r\n        public JobChainWithParameter(TSec" +
                    "tionInput sectionInput, string jobId, TParameter parameter, Stack<string> curren" +
                    "tSections, BackgroundTaskContextFactory contextFactory, CancellationToken cancel" +
                    "lationToken)\r\n            : base(jobId, currentSections, contextFactory, cancell" +
                    "ationToken) {\r\n            _parameter = parameter;\r\n            _sectionInput = " +
                    "sectionInput;\r\n        }\r\n\r\n        private readonly TParameter _parameter;\r\n   " +
                    "     private readonly TSectionInput _sectionInput;\r\n\r\n        public JobChainWit" +
                    "hParameter<TParameter, TSectionInput> Section(string sectionName, Action<Backgro" +
                    "undTaskContext<TParameter>, TSectionInput> callback) {\r\n            return Secti" +
                    "onBase(sectionName, () => {\r\n                return _contextFactory.CraeteScoped" +
                    "Context(_jobId, _parameter);\r\n            }, context => {\r\n                callb" +
                    "ack((BackgroundTaskContext<TParameter>)context, _sectionInput);\r\n               " +
                    " return this;\r\n            });\r\n        }\r\n        public JobChainWithParameter<" +
                    "TParameter, TSectionInput> Section(string sectionName, Func<BackgroundTaskContex" +
                    "t<TParameter>, TSectionInput, Task> callback) {\r\n            return SectionBase(" +
                    "sectionName, () => {\r\n                return _contextFactory.CraeteScopedContext" +
                    "(_jobId, _parameter);\r\n            }, context => {\r\n                var task = c" +
                    "allback((BackgroundTaskContext<TParameter>)context, _sectionInput);\r\n           " +
                    "     task.Wait();\r\n                return this;\r\n            });\r\n        }\r\n   " +
                    "     public JobChainWithParameter<TParameter, TSectionOutput> Section<TSectionOu" +
                    "tput>(string sectionName, Func<BackgroundTaskContext<TParameter>, TSectionInput," +
                    " TSectionOutput> callback) {\r\n            return SectionBase(sectionName, () => " +
                    "{\r\n                return _contextFactory.CraeteScopedContext(_jobId, _parameter" +
                    ");\r\n            }, context => {\r\n                var result = callback((Backgrou" +
                    "ndTaskContext<TParameter>)context, _sectionInput);\r\n                return new J" +
                    "obChainWithParameter<TParameter, TSectionOutput>(result, _jobId, _parameter, _cu" +
                    "rrentSections, _contextFactory, _cancellationToken);\r\n            });\r\n        }" +
                    "\r\n        public JobChainWithParameter<TParameter, TSectionOutput> Section<TSect" +
                    "ionOutput>(string sectionName, Func<BackgroundTaskContext<TParameter>, TSectionI" +
                    "nput, Task<TSectionOutput>> callback) {\r\n            return SectionBase(sectionN" +
                    "ame, () => {\r\n                return _contextFactory.CraeteScopedContext(_jobId," +
                    " _parameter);\r\n            }, context => {\r\n                var task = callback(" +
                    "(BackgroundTaskContext<TParameter>)context, _sectionInput);\r\n                tas" +
                    "k.Wait();\r\n                return new JobChainWithParameter<TParameter, TSection" +
                    "Output>(task.Result, _jobId, _parameter, _currentSections, _contextFactory, _can" +
                    "cellationToken);\r\n            });\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class BackgroundTaskBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
