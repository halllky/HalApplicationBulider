//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HalApplicationBuilder.CodeRendering.ReactAndWebApi {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using HalApplicationBuilder;
    using System;
    
    
    public partial class WebApiControllerTemplate : WebApiControllerTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
 var dbContextTypeName = $"{_config.DbContextNamespace}.{_config.DbContextName}"; 
            this.Write("using Microsoft.AspNetCore.Mvc;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(_config.MvcControllerNamespace));
            this.Write(";\r\n\r\n#if DEBUG\r\n[ApiController]\r\n[Route(\"[controller]\")]\r\npublic class HalappDebu" +
                    "gController {\r\n    public HalappDebugController(\r\n        ILogger<HalappDebugCon" +
                    "troller> logger,\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dbContextTypeName));
            this.Write(" dbContext,\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(typeof(RuntimeService).FullName));
            this.Write(" runtimeService) {\r\n        _logger = logger;\r\n        _dbContext = dbContext;\r\n " +
                    "       _runtimeService = runtimeService;\r\n    }\r\n    private readonly ILogger<Ha" +
                    "lappDebugController> _logger;\r\n    private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dbContextTypeName));
            this.Write(" _dbContext;\r\n    private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(typeof(RuntimeService).FullName));
            this.Write(@" _runtimeService;

    [HttpPut(""recreate-database"")]
    public HttpResponseMessage RecreateDatabase() {
        _dbContext.Database.EnsureDeleted();
        _dbContext.Database.EnsureCreated();
        return new HttpResponseMessage {
            StatusCode = System.Net.HttpStatusCode.OK,
            Content = new StringContent(""DBを再作成しました。""),
        };
    }
}
#endif

");
 foreach (var rootAggregate in _rootAggregates) { 
 var controllerName = GetControllerName(rootAggregate); 
 var uiInstance = rootAggregate.ToUiInstanceClass().CSharpTypeName; 
 var search = rootAggregate.BuildSearchMethod("param", "query", "e"); 
            this.Write("\r\n[ApiController]\r\n[Route(\"[controller]\")]\r\npublic class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(controllerName));
            this.Write(" : ControllerBase {\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(controllerName));
            this.Write("(\r\n        ILogger<");
            this.Write(this.ToStringHelper.ToStringWithCulture(controllerName));
            this.Write("> logger,\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dbContextTypeName));
            this.Write(" dbContext,\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(typeof(RuntimeService).FullName));
            this.Write(" runtimeService) {\r\n        _logger = logger;\r\n        _dbContext = dbContext;\r\n " +
                    "       _runtimeService = runtimeService;\r\n    }\r\n    private readonly ILogger<");
            this.Write(this.ToStringHelper.ToStringWithCulture(controllerName));
            this.Write("> _logger;\r\n    private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(dbContextTypeName));
            this.Write(" _dbContext;\r\n    private readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(typeof(RuntimeService).FullName));
            this.Write(" _runtimeService;\r\n\r\n    [HttpGet(\"list\")]\r\n    public IEnumerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(search.SearchResultClassName));
            this.Write("> Search([FromQuery] ");
            this.Write(this.ToStringHelper.ToStringWithCulture(search.SearchConditionClassName));
            this.Write(" param) {\r\n        return _dbContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture(search.MethodName));
            this.Write("(param);\r\n    }\r\n    [HttpPost(\"create\")]\r\n    public HttpResponseMessage Create(" +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(uiInstance));
            this.Write(" param) {\r\n        var success = _runtimeService.");
            this.Write(this.ToStringHelper.ToStringWithCulture(nameof(RuntimeService.TrySaveNewInstance)));
            this.Write(@"(param, out var instanceKey, out var errors);
        if (success) {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.Created,
                Content = new StringContent(instanceKey),
            };
        } else {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.BadRequest,
                Content = JsonContent.Create(errors),
            };
        }
    }
    [HttpGet(""detail/{instanceKey}"")]
    public HttpResponseMessage Find(string instanceKey) {
        var instance = _runtimeService.");
            this.Write(this.ToStringHelper.ToStringWithCulture(nameof(RuntimeService.FindInstance)));
            this.Write("<");
            this.Write(this.ToStringHelper.ToStringWithCulture(uiInstance));
            this.Write(@">(instanceKey, out var _);
        if (instance != null) {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.Found,
                Content = JsonContent.Create(instance),
            };
        } else {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.NotFound,
            };
        }
    }
    [HttpPost(""update"")]
    public HttpResponseMessage Update(");
            this.Write(this.ToStringHelper.ToStringWithCulture(uiInstance));
            this.Write(" param) {\r\n        var success = _runtimeService.");
            this.Write(this.ToStringHelper.ToStringWithCulture(nameof(RuntimeService.TryUpdate)));
            this.Write(@"(param, out var instanceKey, out var errors);
        if (success) {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.OK,
                Content = new StringContent(instanceKey),
            };
        } else {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.BadRequest,
                Content = JsonContent.Create(errors),
            };
        }
    }
}

");
 } 
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class WebApiControllerTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
