<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder" #>
<# var dbContextTypeName = $"{_ctx.Config.DbContextNamespace}.{_ctx.Config.DbContextName}"; #>
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;

namespace <#=_ctx.Config.RootNamespace#>;

#if DEBUG
[ApiController]
[Route("[controller]")]
public class HalappDebugController : ControllerBase {
    public HalappDebugController(ILogger<HalappDebugController> logger, IServiceProvider provider) {
        _logger = logger;
        _provider = provider;
    }
    private readonly ILogger<HalappDebugController> _logger;
    private readonly IServiceProvider _provider;

    [HttpPost("recreate-database")]
    public HttpResponseMessage RecreateDatabase() {
        var dbContext = _provider.GetRequiredService<<#=_ctx.Config.DbContextNamespace#>.<#=_ctx.Config.DbContextName#>>();
        dbContext.Database.EnsureDeleted();
        dbContext.Database.Migrate();
        return new HttpResponseMessage {
            StatusCode = System.Net.HttpStatusCode.OK,
            Content = new StringContent("DBを再作成しました。"),
        };
    }
    
    [HttpGet("secret-settings")]
    public IActionResult GetSecretSettings() {
        var runtimeSetting = _provider.GetRequiredService<<#=RuntimeServerSettings#>>();
        return this.JsonContent(runtimeSetting);
    }
    [HttpPost("secret-settings")]
    public IActionResult SetSecretSettings([FromBody] <#=RuntimeServerSettings#> settings) {
        var json = settings.<#=Util.RuntimeSettings.TO_JSON#>();
        using var sw = new System.IO.StreamWriter("<#=Util.RuntimeSettings.JSON_FILE_NAME#>", false, new System.Text.UTF8Encoding(false));
        sw.WriteLine(json);
        return Ok();
    }
}
#endif
