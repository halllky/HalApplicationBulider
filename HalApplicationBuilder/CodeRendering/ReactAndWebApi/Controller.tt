<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder" #>
<# var dbContextTypeName = $"{_ctx.Config.DbContextNamespace}.{_ctx.Config.DbContextName}"; #>
using Microsoft.AspNetCore.Mvc;

namespace <#=_ctx.Config.RootNamespace#> {

    [ApiController]
    [Route("<#=SUBDOMAIN#>/[controller]")]
    public class <#=ClassName#> : ControllerBase {
        public <#=ClassName#>(ILogger<<#=ClassName#>> logger, <#=dbContextTypeName#> dbContext) {
            _logger = logger;
            _dbContext = dbContext;
        }
        private readonly ILogger<<#=ClassName#>> _logger;
        private readonly <#=dbContextTypeName#> _dbContext;

        [HttpGet("<#=SEARCH_ACTION_NAME#>")]
        public IActionResult Search([FromQuery] string param) {
            var json = System.Web.HttpUtility.UrlDecode(param);
            var condition = string.IsNullOrWhiteSpace(json)
                ? new <#=SearchArgType#>()
                : System.Text.Json.JsonSerializer.Deserialize<<#=SearchArgType#>>(json)!;
            var searchResult = _dbContext
                .<#=Search#>(condition)
                .AsEnumerable();
            return this.JsonContent(searchResult);
        }
        [HttpGet("<#=KEYWORDSEARCH_ACTION_NAME#>")]
        public IActionResult SearchByKeyword([FromQuery] string keyword) {
            // TODO
            throw new NotImplementedException();
        }
        [HttpPost("<#=CREATE_ACTION_NAME#>")]
        public IActionResult Create([FromBody] <#=AggregateInstance#> param) {
            // TODO
            throw new NotImplementedException();
        }
        [HttpGet("<#=FIND_ACTION_NAME#>/{instanceKey}")]
        public IActionResult Find(string instanceKey) {
            var instance = _dbContext.<#=Find#>(instanceKey);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
        [HttpPost("<#=UPDATE_ACTION_NAME#>")]
        public IActionResult Update(<#=AggregateInstance#> param) {
            // TODO
            throw new NotImplementedException();
        }
    }
}
