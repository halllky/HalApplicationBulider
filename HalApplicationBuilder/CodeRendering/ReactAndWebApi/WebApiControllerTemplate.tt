<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder" #>
using Microsoft.AspNetCore.Mvc;

namespace <#=_config.MvcControllerNamespace#>;

<# foreach (var rootAggregate in _rootAggregates) { #>
<# var controllerName = GetControllerName(rootAggregate); #>
<# var dbContextTypeName = $"{_config.DbContextNamespace}.{_config.DbContextName}"; #>
<# var uiInstance = rootAggregate.ToUiInstanceClass().CSharpTypeName; #>
<# var search = rootAggregate.BuildSearchMethod("param", "query", "e"); #>

[ApiController]
[Route("[controller]")]
public class <#=controllerName#> : ControllerBase {
    public <#=controllerName#>(
        ILogger<<#=controllerName#>> logger,
        <#=dbContextTypeName#> dbContext,
        <#=typeof(RuntimeService).FullName#> runtimeService) {
        _logger = logger;
        _dbContext = dbContext;
        _runtimeService = runtimeService;
    }
    private readonly ILogger<<#=controllerName#>> _logger;
    private readonly <#=dbContextTypeName#> _dbContext;
    private readonly <#=typeof(RuntimeService).FullName#> _runtimeService;

    [HttpGet("list")]
    public IEnumerable<<#=search.SearchResultClassName#>> Search([FromQuery] <#=search.SearchConditionClassName#> param) {
        return _dbContext.<#=search.MethodName#>(param);
    }
    [HttpPost("create")]
    public HttpResponseMessage Create(<#=uiInstance#> param) {
        var success = _runtimeService.<#=nameof(RuntimeService.TrySaveNewInstance)#>(param, out var instanceKey, out var errors);
        if (success) {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.Created,
                Content = new StringContent(instanceKey),
            };
        } else {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.BadRequest,
                Content = JsonContent.Create(errors),
            };
        }
    }
    [HttpGet("detail/{instanceKey}")]
    public HttpResponseMessage Find(string instanceKey) {
        var instance = _runtimeService.<#=nameof(RuntimeService.FindInstance)#><<#=uiInstance#>>(instanceKey, out var _);
        if (instance != null) {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.Found,
                Content = JsonContent.Create(instance),
            };
        } else {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.NotFound,
            };
        }
    }
    [HttpPost("update")]
    public HttpResponseMessage Update(<#=uiInstance#> param) {
        var success = _runtimeService.<#=nameof(RuntimeService.TryUpdate)#>(param, out var instanceKey, out var errors);
        if (success) {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.OK,
                Content = new StringContent(instanceKey),
            };
        } else {
            return new HttpResponseMessage {
                StatusCode = System.Net.HttpStatusCode.BadRequest,
                Content = JsonContent.Create(errors),
            };
        }
    }
}

<# } #>
