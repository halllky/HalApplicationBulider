<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder" #>
<# var dbContextTypeName = $"{_config.DbContextNamespace}.{_config.DbContextName}"; #>
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

namespace <#=_config.MvcControllerNamespace#>;

<# foreach (var rootAggregate in _rootAggregates) { #>
<# var controllerName = GetControllerName(rootAggregate); #>
<# var uiInstance = rootAggregate.ToUiInstanceClass().CSharpTypeName; #>
<# var search = rootAggregate.BuildSearchMethod("param", "query", "e"); #>

[ApiController]
[Route("[controller]")]
public class <#=controllerName#> : ControllerBase {
    public <#=controllerName#>(
        ILogger<<#=controllerName#>> logger,
        <#=dbContextTypeName#> dbContext,
        <#=typeof(RuntimeService).FullName#> runtimeService) {
        _logger = logger;
        _dbContext = dbContext;
        _runtimeService = runtimeService;
    }
    private readonly ILogger<<#=controllerName#>> _logger;
    private readonly <#=dbContextTypeName#> _dbContext;
    private readonly <#=typeof(RuntimeService).FullName#> _runtimeService;

    [HttpGet("list")]
    public IActionResult Search([FromQuery] string param) {
        var json = System.Web.HttpUtility.UrlDecode(param);
        var condition = string.IsNullOrWhiteSpace(json)
            ? new <#=search.SearchConditionClassName#>()
            : System.Text.Json.JsonSerializer.Deserialize<<#=search.SearchConditionClassName#>>(json)!;
        var searchResult = _dbContext
            .<#=search.MethodName#>(condition)
            .AsEnumerable();
        return JsonContent(searchResult);
    }
    [HttpGet("lsit-by-keyword")]
    public IActionResult SearchByKeyword([FromQuery] string keyword) {
        var condition = new <#=search.SearchConditionClassName#>();
        // TODO keywordを充てる
        var data = _dbContext
            .<#=search.MethodName#>(condition)
            .AsEnumerable();

        var guid = new Guid("<#=rootAggregate.GetGuid()#>");
        var refDtos = data.Select(item => new <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.ReferenceDTO))#> {
            <#=nameof(Runtime.ReferenceDTO.AggreageteGuid)#> = guid,
            <#=nameof(Runtime.ReferenceDTO.InstanceKey)#> = item.<#=nameof(Runtime.SearchResultBase.__halapp__InstanceKey)#>,
            <#=nameof(Runtime.ReferenceDTO.InstanceName)#> = item.<#=nameof(Runtime.SearchResultBase.__halapp__InstanceName)#>,
        });
        return JsonContent(refDtos);
    }
    [HttpPost("create")]
    public IActionResult Create(<#=uiInstance#> param) {
        var success = _runtimeService.<#=nameof(RuntimeService.TrySaveNewInstance)#>(param, out var instanceKey, out var errors);
        if (success) {
            return Ok(new { instanceKey });
        } else {
            return BadRequest(errors);
        }
    }
    [HttpGet("detail/{instanceKey}")]
    public IActionResult Find(string instanceKey) {
        var instance = _runtimeService.<#=nameof(RuntimeService.FindInstance)#><<#=uiInstance#>>(instanceKey, out var _);
        if (instance == null) {
            return NotFound();
        } else {
            return JsonContent(instance);
        }
    }
    [HttpPost("update")]
    public IActionResult Update(<#=uiInstance#> param) {
        var success = _runtimeService.<#=nameof(RuntimeService.TryUpdate)#>(param, out var instanceKey, out var errors);
        if (success) {
            return Ok(new { instanceKey });
        } else {
            return BadRequest(errors);
        }
    }

    private ContentResult JsonContent<T>(T obj) {
        var options = new JsonSerializerOptions {
            // レスポンスに大文字が含まれるとき、大文字のまま返す。
            // react hook form や ag-grid では大文字小文字を区別しているため
            PropertyNameCaseInsensitive = true,
        };
        var json = JsonSerializer.Serialize(obj, options);

        return Content(json, "application/json");
    }
}

<# } #>
