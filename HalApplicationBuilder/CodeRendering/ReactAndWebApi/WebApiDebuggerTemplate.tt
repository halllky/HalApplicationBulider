<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder" #>
<# var dbContextTypeName = $"{_config.DbContextNamespace}.{_config.DbContextName}"; #>
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;

namespace <#=_config.MvcControllerNamespace#>;

#if DEBUG
[ApiController]
[Route("[controller]")]
public class HalappDebugController : ControllerBase {
    public HalappDebugController(ILogger<HalappDebugController> logger, IServiceProvider provider) {
        _logger = logger;
        _provider = provider;
    }
    private readonly ILogger<HalappDebugController> _logger;
    private readonly IServiceProvider _provider;

    [HttpPost("recreate-database")]
    public HttpResponseMessage RecreateDatabase() {
        var dbContext = _provider.GetRequiredService<<#=dbContextTypeName#>>();
        dbContext.Database.EnsureDeleted();
        dbContext.Database.Migrate();
        return new HttpResponseMessage {
            StatusCode = System.Net.HttpStatusCode.OK,
            Content = new StringContent("DBを再作成しました。"),
        };
    }
    
    [HttpGet("secret-settings")]
    public IActionResult GetSecretSettings() {
        var runtimeSetting = _provider.GetRequiredService<<#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>>();
        return Content(runtimeSetting.<#=nameof(Runtime.RuntimeSettings.Server.ToJson)#>(), "application/json");
    }
    [HttpPost("secret-settings")]
    public IActionResult SetSecretSettings([FromBody] <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#> settings) {
        var json = settings.<#=nameof(Runtime.RuntimeSettings.Server.ToJson)#>();
        using var sw = new System.IO.StreamWriter("<#=DefaultRuntimeConfigTemplate.HALAPP_RUNTIME_SERVER_SETTING_JSON#>", false, new System.Text.UTF8Encoding(false));
        sw.WriteLine(json);
        return Ok();
    }
}
#endif
