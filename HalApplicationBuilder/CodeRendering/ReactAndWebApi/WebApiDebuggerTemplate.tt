<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder" #>
<# var dbContextTypeName = $"{_config.DbContextNamespace}.{_config.DbContextName}"; #>
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

namespace <#=_config.MvcControllerNamespace#>;

#if DEBUG
[ApiController]
[Route("[controller]")]
public class HalappDebugController : ControllerBase {
    public HalappDebugController(
        ILogger<HalappDebugController> logger,
        <#=dbContextTypeName#> dbContext,
        <#=typeof(RuntimeService).FullName#> runtimeService,
        <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>? secretSettings) {
        _logger = logger;
        _dbContext = dbContext;
        _runtimeService = runtimeService;
        _secretSettings = secretSettings;
    }
    private readonly ILogger<HalappDebugController> _logger;
    private readonly <#=dbContextTypeName#> _dbContext;
    private readonly <#=typeof(RuntimeService).FullName#> _runtimeService;
    private readonly <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>? _secretSettings;

    [HttpPost("recreate-database")]
    public HttpResponseMessage RecreateDatabase() {
        _dbContext.Database.EnsureDeleted();
        _dbContext.Database.EnsureCreated();
        return new HttpResponseMessage {
            StatusCode = System.Net.HttpStatusCode.OK,
            Content = new StringContent("DBを再作成しました。"),
        };
    }
    
    [HttpGet("secret-settings")]
    public IActionResult GetSecretSettings() {
        return JsonContent(_secretSettings ?? new <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>());
    }
    [HttpPost("secret-settings")]
    public IActionResult SetSecretSettings([FromBody] <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#> settings) {
        var json = System.Text.Json.JsonSerializer.Serialize<<#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>>(settings);
        using var sw = new System.IO.StreamWriter("<#=DefaultRuntimeConfigTemplate.HALAPP_RUNTIME_SERVER_SETTING_JSON#>", false, new System.Text.UTF8Encoding(false));
        sw.WriteLine(json);
        return Ok();
    }
    
    private ContentResult JsonContent<T>(T obj) {
        var options = new JsonSerializerOptions {
            // レスポンスに大文字が含まれるとき、大文字のまま返す。
            // react hook form や ag-grid では大文字小文字を区別しているため
            PropertyNameCaseInsensitive = true,
        };
        var json = JsonSerializer.Serialize(obj, options);

        return Content(json, "application/json");
    }
}
#endif
