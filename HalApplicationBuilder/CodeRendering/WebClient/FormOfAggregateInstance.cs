// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HalApplicationBuilder.CodeRendering.WebClient
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using HalApplicationBuilder.Core;
    using HalApplicationBuilder.DotnetEx;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class FormOfAggregateInstance : FormOfAggregateInstanceBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"import React, { useCallback } from 'react'
import { PlusIcon, XMarkIcon } from '@heroicons/react/24/outline'
import { useForm, useFieldArray, useFormContext } from 'react-hook-form'
import * as Components from '../../components'
import * as AggregateType from '");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypesImport));
            this.Write("\'\r\n\r\n");
 foreach (var desc in _instance.EnumerateThisAndDescendants().Select(x => new Component(x))) { 
            this.Write("export const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(desc.ComponentName));
            this.Write(" = (args: {\r\n");
 foreach (var arg in desc.GetArguments().Values) { 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg));
            this.Write(": number\r\n");
 } 
            this.Write("}) => {\r\n  const { register, watch } = useFormContext<AggregateType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(_instance.Item.TypeScriptTypeName));
            this.Write(">()\r\n\r\n  return <>\r\n");
 foreach (var prop in desc.AggregateInstance.GetProperties(_ctx.Config)) { 
 if (prop is AggregateInstance.SchalarProperty schalarProperty) { 
            this.Write("    <div className=\"flex\">\r\n      <div className=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(PropNameWidth));
            this.Write("\">\r\n        <span className=\"text-sm select-none opacity-80\">\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.PropertyName));
            this.Write("\r\n        </span>\r\n      </div>\r\n      <div className=\"flex-1\">\r\n");
 PushIndent("        "); 
 RenderSchalarProperty(desc.AggregateInstance, schalarProperty); 
 PopIndent(); 
            this.Write("      </div>\r\n    </div>\r\n\r\n");
 } else if (prop is AggregateInstance.RefProperty refProperty) { 
            this.Write("    <div className=\"flex\">\r\n      <div className=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(PropNameWidth));
            this.Write("\">\r\n        <span className=\"text-sm select-none opacity-80\">\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.PropertyName));
            this.Write("\r\n        </span>\r\n      </div>\r\n      <div className=\"flex-1\">\r\n");
 PushIndent("        "); 
 RenderRefAggregateBody(refProperty); 
 PopIndent(); 
            this.Write("      </div>\r\n    </div>\r\n\r\n");
 } else if (prop is AggregateInstance.ChildProperty childProperty) { 
            this.Write("    <div className=\"py-2\">\r\n      <span className=\"text-sm select-none opacity-80" +
                    "\">\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.PropertyName));
            this.Write("\r\n      </span>\r\n      <div className=\"flex flex-col space-y-1 p-1 border border-" +
                    "neutral-400\">\r\n");
 PushIndent("        "); 
 RenderChildAggregateBody(childProperty); 
 PopIndent(); 
            this.Write("      </div>\r\n    </div>\r\n\r\n");
 } else if (prop is AggregateInstance.VariationProperty variationProperty
              && variationProperty.Key == variationProperty.Group.VariationAggregates.First().Key) { 
            this.Write("    <div className=\"flex\">\r\n      <div className=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(PropNameWidth));
            this.Write("\">\r\n        <span className=\"text-sm select-none opacity-80\">\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(variationProperty.Group.GroupName));
            this.Write("\r\n        </span>\r\n      </div>\r\n      <div className=\"flex-1 flex gap-2 flex-wra" +
                    "p\">\r\n");
 foreach (var item in variationProperty.Group.VariationAggregates) { 
            this.Write("        <label>\r\n          <input type=\"radio\" value=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Key));
            this.Write("\" {...register(`");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRegisterName(desc.AggregateInstance, variationProperty.Group.GroupName.ToCSharpSafe())));
            this.Write("`)} />\r\n          ");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Value.RelationName));
            this.Write("\r\n        </label>\r\n");
 } 
            this.Write("      </div>\r\n    </div>\r\n");
 foreach (var item in variationProperty.Group.VariationAggregates) { 
            this.Write("    <div className={`flex flex-col space-y-1 p-1 border border-neutral-400 ${(wat" +
                    "ch(`");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRegisterName(desc.AggregateInstance, variationProperty.Group.GroupName.ToCSharpSafe())));
            this.Write("`) !== \'");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Key));
            this.Write("\' ? \'hidden\' : \'\')}`}>\r\n");
 PushIndent("      "); 
 RenderVariationAggregateBody(item.Value.Terminal); 
 PopIndent(); 
            this.Write("    </div>\r\n");
 } 
            this.Write("\r\n");
 } else if (prop is AggregateInstance.ChildrenProperty childrenProperty) { 
            this.Write("    <div className=\"py-2\">\r\n      <span className=\"text-sm select-none opacity-80" +
                    "\">\r\n        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.PropertyName));
            this.Write("\r\n      </span>\r\n      <div className=\"flex flex-col space-y-1 p-1\">\r\n");
 PushIndent("        "); 
 RenderChildrenAggregateBody(childrenProperty); 
 PopIndent(); 
            this.Write("      </div>\r\n    </div>\r\n\r\n");
 } 
 } 
            this.Write("  </>\r\n}\r\n\r\n\r\n");
 if (desc.IsChildren) { 
            this.Write("export const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(desc.ComponentNameOfChildrenList));
            this.Write(" = (args: {\r\n");
 foreach (var arg in desc.GetArguments().Values) { 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg));
            this.Write(": number\r\n");
 } 
            this.Write("}) => {\r\n  const { control, register } = useFormContext<AggregateType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(_instance.Item.TypeScriptTypeName));
            this.Write(">()\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name" +
                    ": `");
            this.Write(this.ToStringHelper.ToStringWithCulture(desc.GetUseFieldArrayName()));
            this.Write("`,\r\n  })\r\n  const onAdd = useCallback((e: React.MouseEvent) => {\r\n    append(Aggr" +
                    "egateType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(new types.AggregateInstanceInitializerFunction(desc.AggregateInstance).FunctionName));
            this.Write("())\r\n    e.preventDefault()\r\n  }, [append])\r\n\r\n  return (\r\n    <>\r\n      {fields." +
                    "map((item, index) => (\r\n        <div key={index} className=\"flex flex-col space-" +
                    "y-1 p-1 border border-neutral-400\">\r\n          <");
            this.Write(this.ToStringHelper.ToStringWithCulture(desc.ComponentName));
            this.Write(@" {...args} />
          <Components.IconButton underline icon={XMarkIcon} onClick={e => { remove(index); e.preventDefault() }} className=""self-start"">削除</Components.IconButton>
        </div>
      ))}
      <Components.IconButton underline icon={PlusIcon} onClick={onAdd} className=""self-start"">追加</Components.IconButton>
    </>
  )
}
");
 } 
 } 
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class FormOfAggregateInstanceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
