<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder.CodeRendering.Util" #>
import { forwardRef, ForwardedRef, useState } from "react"
import { useQuery } from "react-query"
import { useFormContext } from 'react-hook-form';
import { Combobox } from "@headlessui/react"
import { useAppContext } from "../hooks/AppContext"
import { useHttpRequest } from "../hooks/useHttpRequest"

export const <#=ComponentName#> = forwardRef(({ raectHookFormId }: {
  raectHookFormId: string
}, ref: ForwardedRef<HTMLElement>) => {

  const [, dispatch] = useAppContext()
  const { get } = useHttpRequest()
  const [keyword, setKeyword] = useState('')
  const { register } = useFormContext()
  const { data } = useQuery({
    queryKey: ['<#=UseQueryKey#>'],
    queryFn: async () => {
      const response = await get<<#=AggregateInstanceKeyNamePairTS.DEF#>[]>(`<#=Api#>`, { keyword })
      return response.ok ? response.data : []
    },
    onError: error => {
      dispatch({ type: 'pushMsg', msg: `ERROR!: ${JSON.stringify(error)}` })
    },
  })

  return (
    <Combobox ref={ref}>
      <Combobox.Input
        {...register(raectHookFormId)}
        onChange={(event) => setKeyword(event.target.value)}
      />
      <Combobox.Options>
        {data?.map(referenceDto => (
          <Combobox.Option key={referenceDto.<#=AggregateInstanceKeyNamePairTS.KEY#>} value={referenceDto.<#=AggregateInstanceKeyNamePairTS.KEY#>}>
            {referenceDto.<#=AggregateInstanceKeyNamePairTS.NAME#>}
          </Combobox.Option>
        ))}
      </Combobox.Options>
    </Combobox>
  )
})
