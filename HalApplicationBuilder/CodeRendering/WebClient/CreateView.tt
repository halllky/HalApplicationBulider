<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder.Core" #>
<#@ import namespace="HalApplicationBuilder.CodeRendering.Presentation" #>
import { useState, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FieldValues, SubmitHandler, useForm } from 'react-hook-form';
import { BookmarkSquareIcon } from '@heroicons/react/24/outline';
import { IconButton } from '../../components/IconButton';
import { InlineMessageBar, BarMessage } from '../../components/InlineMessageBar';
import { useHttpRequest } from '../../hooks/useHttpRequest';
import { useAppContext } from "../../hooks/AppContext"
import { <#=_instance.Item.TypeScriptTypeName#> as DataDetail } from '../../<#=types.ImportName#>'

export default function () {

    const { register, handleSubmit } = useForm()
    const navigate = useNavigate()
    const { post } = useHttpRequest()
    const [, dispatch] = useAppContext()
    const [errorMessages, setErrorMessages] = useState<BarMessage[]>([])
    const onSave: SubmitHandler<FieldValues> = useCallback(async data => {
        const response = await post<DataDetail>(`<#=GetCreateCommandApi()#>`, data)
        if (response.ok) {
            dispatch({ type: 'pushMsg', msg: `${response.data.<#=AggregateInstanceBase.INSTANCE_NAME#>}を作成しました。` })
            setErrorMessages([])
            const encoded = window.encodeURI(response.data.<#=AggregateInstanceBase.INSTANCE_KEY#>!)
            navigate(`<#=GetSingleViewUrl()#>/${encoded}`)
        } else {
            setErrorMessages([...errorMessages, ...response.errors])
        }
    }, [post, navigate, errorMessages, setErrorMessages, dispatch])

    return (
        <form className="page-content-root" onSubmit={handleSubmit(onSave)}>
            <h1 className="text-base font-semibold select-none py-1">
                <Link to="<#=GetMultiViewUrl()#>"><#=_aggregate.Item.DisplayName#></Link>&nbsp;新規作成
            </h1>
            <InlineMessageBar value={errorMessages} onChange={setErrorMessages} />
            <div className="flex flex-col space-y-1 p-1 bg-neutral-200">
<# foreach (var prop in _instance.GetSchalarProperties(_ctx.Config)) { #>
                <div className="flex">
                    <div className="<#=PropNameWidth#>">
                        <span className="text-sm select-none">
                            <#=prop.PropertyName#>
                        </span>
                    </div>
                    <div className="flex-1">
<# foreach (var line in RenderForm(prop)) { #>
                        <#=line#>
<# } #>
                    </div>
                </div>
<# } #>
            </div>
            <IconButton fill icon={BookmarkSquareIcon} className="self-start">保存</IconButton>
        </form>
    )
}
