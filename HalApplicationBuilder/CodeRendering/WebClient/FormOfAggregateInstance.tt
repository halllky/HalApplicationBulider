<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder.Core" #>
<#@ import namespace="HalApplicationBuilder.DotnetEx" #>
import React, { useCallback } from 'react'
import { PlusIcon, XMarkIcon } from '@heroicons/react/24/outline'
import { useForm, useFieldArray, useFormContext } from 'react-hook-form'
import { usePageContext } from '../../hooks/PageContext'
import * as Components from '../../components'
import * as AggregateType from '<#=TypesImport#>'

<# var components = _instance
    .EnumerateThisAndDescendants()
    .Select(x => x.IsChildrenMember() ? new ComponentOfChildrenListItem(x) : new Component(x)); #>
<# foreach (var desc in components) { #>
export const <#=desc.ComponentName#> = ({ <#=GetArguments(desc.AggregateInstance).Values.Join(", ")#> }: {
<# foreach (var arg in GetArguments(desc.AggregateInstance).Values) { #>
  <#=arg#>: number
<# } #>
}) => {
  const [{ pageIsReadOnly },] = usePageContext()
  const { register, watch } = useFormContext<AggregateType.<#=_instance.Item.TypeScriptTypeName#>>()

  return <>
<# foreach (var prop in desc.AggregateInstance.GetProperties(_ctx.Config)) { #>
<# if (prop is AggregateInstance.SchalarProperty schalarProperty) { #>
    <div className="flex">
      <div className="<#=PropNameWidth#>">
        <span className="text-sm select-none opacity-80">
          <#=prop.PropertyName#>
        </span>
      </div>
      <div className="flex-1">
        <#=RenderSchalarProperty(desc.AggregateInstance, schalarProperty, "        ")#>
      </div>
    </div>

<# } else if (prop is AggregateInstance.RefProperty refProperty) { #>
    <div className="flex">
      <div className="<#=PropNameWidth#>">
        <span className="text-sm select-none opacity-80">
          <#=prop.PropertyName#>
        </span>
      </div>
      <div className="flex-1">
<# PushIndent("        "); #>
<# RenderRefAggregateBody(refProperty); #>
<# PopIndent(); #>
      </div>
    </div>

<# } else if (prop is AggregateInstance.ChildProperty childProperty) { #>
    <div className="py-2">
      <span className="text-sm select-none opacity-80">
        <#=prop.PropertyName#>
      </span>
      <div className="flex flex-col space-y-1 p-1 border border-neutral-400">
<# PushIndent("        "); #>
<# RenderChildAggregateBody(childProperty); #>
<# PopIndent(); #>
      </div>
    </div>

<# } else if (prop is AggregateInstance.VariationProperty variationProperty
              && variationProperty.Key == variationProperty.Group.VariationAggregates.First().Key) { #>
    <div className="flex">
      <div className="<#=PropNameWidth#>">
        <span className="text-sm select-none opacity-80">
          <#=variationProperty.Group.GroupName#>
        </span>
      </div>
      <div className="flex-1 flex gap-2 flex-wrap">
<# foreach (var item in variationProperty.Group.VariationAggregates) { #>
        <label>
          <input type="radio" value="<#=item.Key#>" disabled={pageIsReadOnly} {...register(`<#=GetRegisterName(desc.AggregateInstance, variationProperty).Value#>`)} />
          <#=item.Value.RelationName#>
        </label>
<# } #>
      </div>
    </div>
<# foreach (var item in variationProperty.Group.VariationAggregates) { #>
    <div className={`flex flex-col space-y-1 p-1 border border-neutral-400 ${(watch(`<#=GetRegisterName(desc.AggregateInstance, variationProperty).Value#>`) !== '<#=item.Key#>' ? 'hidden' : '')}`}>
<# PushIndent("      "); #>
<# RenderVariationAggregateBody(item.Value.Terminal); #>
<# PopIndent(); #>
    </div>
<# } #>

<# } else if (prop is AggregateInstance.ChildrenProperty childrenProperty) { #>
    <div className="py-2">
      <span className="text-sm select-none opacity-80">
        <#=prop.PropertyName#>
      </span>
      <div className="flex flex-col space-y-1">
<# PushIndent("        "); #>
<# RenderChildrenAggregateBody(childrenProperty); #>
<# PopIndent(); #>
      </div>
    </div>

<# } #>
<# } #>
  </>
}


<# if (desc.IsChildren) { #>
<# var arrayComponent = new Component(desc.AggregateInstance); #>
export const <#=arrayComponent.ComponentName#> = (args: {
<# foreach (var arg in GetArguments(arrayComponent.AggregateInstance).Values.SkipLast(1)) { #>
  <#=arg#>: number
<# } #>
}) => {
  const [{ pageIsReadOnly },] = usePageContext()
  const { control, register } = useFormContext<AggregateType.<#=_instance.Item.TypeScriptTypeName#>>()
  const { fields, append, remove } = useFieldArray({
    control,
    name: `<#=arrayComponent.GetUseFieldArrayName()#>`,
  })
  const onAdd = useCallback((e: React.MouseEvent) => {
    append(AggregateType.<#=new types.AggregateInstanceInitializerFunction(arrayComponent.AggregateInstance).FunctionName#>())
    e.preventDefault()
  }, [append])

  return (
    <>
      {fields.map((_, index) => (
        <div key={index} className="flex flex-col space-y-1 p-1 border border-neutral-400">
          <<#=desc.ComponentName#> {...args} <#=GetArguments(desc.AggregateInstance).Values.Last()#>={index} />
          {!pageIsReadOnly && <Components.IconButton underline icon={XMarkIcon} onClick={e => { remove(index); e.preventDefault() }} className="self-start">削除</Components.IconButton>}
        </div>
      ))}
      {!pageIsReadOnly && <Components.IconButton underline icon={PlusIcon} onClick={onAdd} className="self-start">追加</Components.IconButton>}
    </>
  )
}
<# } #>
<# } #>
