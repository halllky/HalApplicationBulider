<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
import { useState, useCallback } from 'react';
import { useAppContext } from '../../hooks/AppContext';
import { Link, useParams } from 'react-router-dom';
import { FieldValues, SubmitHandler, useForm } from 'react-hook-form';
import { UUID } from 'uuidjs'
import { BookmarkSquareIcon } from '@heroicons/react/24/outline';
import { IconButton } from '../../components/IconButton';
import { InlineMessageBar, BarMessage } from '../../components/InlineMessageBar';

export default function () {

    const [{ apiDomain }, dispatch] = useAppContext()

    const { instanceKey } = useParams()
    const [fetched, setFetched] = useState(false)
    const defaultValues = useCallback(async () => {
        if (!instanceKey) return undefined
        const encoded = window.encodeURI(instanceKey)
        const response = await fetch(`${apiDomain}<#=Url#>/${encoded}`)
        setFetched(true)
        if (response.ok) {
            const data = await response.text()
            return JSON.parse(data)
        } else {
            return undefined
        }
    }, [instanceKey, apiDomain])

    const { register, handleSubmit } = useForm({ defaultValues })
    const [errorMessages, setErrorMessages] = useState<BarMessage[]>([])
    const onSave: SubmitHandler<FieldValues> = useCallback(async data => {
        const response = await fetch(`${apiDomain}<#=GetUpdateCommandApi()#>`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        })
        if (response.ok) {
            setErrorMessages([])
            dispatch({ type: 'pushMsg', msg: '更新しました。' })
        } else {
            const errors: string[] = JSON.parse(await response.text())
            setErrorMessages([...errorMessages, ...errors.map(text => ({ uuid: UUID.generate(), text }))])
        }
    }, [apiDomain, errorMessages, dispatch])

    if (!fetched) return <></>

    return (
        <form className="page-content-root" onSubmit={handleSubmit(onSave)}>
            <h1 className="text-base font-semibold select-none py-1">
                <Link to="<#=GetMultiViewUrl()#>"><#=_aggregate.Item.DisplayName#></Link>
                &nbsp;&#047;&nbsp;
                <span className="select-all">TODO:INSTANCENAME</span>
            </h1>
            <InlineMessageBar value={errorMessages} onChange={setErrorMessages} />
<# PushIndent("                "); #>
<# RenderForm(); #>
<# PopIndent(); #>
            <IconButton fill icon={BookmarkSquareIcon} className="self-start">更新</IconButton>
        </form>
    )
}
