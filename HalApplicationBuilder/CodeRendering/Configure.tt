<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace HalApplicationBuilder.Runtime {

    internal static class HalAppDefaultConfigurer {
        internal static void Configure(IServiceCollection services, string runtimeRootDir) {

<#          /* SaveやDetailでDbContextをダイレクトに参照しているため */ #>
            services.AddScoped<Microsoft.EntityFrameworkCore.DbContext>(provider => {
                return provider.GetRequiredService<<#=_ctx.Config.DbContextNamespace#>.<#=_ctx.Config.DbContextName#>>();
            });

            services.AddDbContext<<#=_ctx.Config.DbContextNamespace#>.<#=_ctx.Config.DbContextName#>>((provider, option) => {
                var setting = provider.GetRequiredService<<#=RuntimeServerSettings#>>();
                var connStr = setting.<#=Util.RuntimeSettings.GET_ACTIVE_CONNSTR#>();
                Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(option);
                Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(option, connStr);
            });

            services.AddScoped(_ => {
                var filename = "<#=Util.RuntimeSettings.JSON_FILE_NAME#>";
                if (System.IO.File.Exists(filename)) {
                    using var stream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                    var parsed = System.Text.Json.JsonSerializer.Deserialize<<#=RuntimeServerSettings#>>(stream);
                    return parsed ?? <#=RuntimeServerSettings#>.<#=Util.RuntimeSettings.GET_DEFAULT#>();
                } else {
                    var setting = <#=RuntimeServerSettings#>.<#=Util.RuntimeSettings.GET_DEFAULT#>();
                    File.WriteAllText(filename, System.Text.Json.JsonSerializer.Serialize(setting, new System.Text.Json.JsonSerializerOptions {
                        WriteIndented = true,
                    }));
                    return setting;
                }
            });
        }
    }

}
