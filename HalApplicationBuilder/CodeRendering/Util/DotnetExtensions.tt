<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Microsoft.AspNetCore.Mvc;

namespace <#=_namespace#> {
    public static class DotnetExtensions {
        public static IActionResult JsonContent<T>(this ControllerBase controller, T obj) {
            var options = new JsonSerializerOptions {
                // レスポンスに大文字が含まれるとき、大文字のまま返す。
                // react hook form や ag-grid では大文字小文字を区別しているため
                PropertyNameCaseInsensitive = true,
            };
            var json = JsonSerializer.Serialize(obj, options);

            return controller.Content(json, "application/json");
        }
        public static IEnumerable<string> GetMessagesRecursively(this Exception ex, string indent = "") {
            yield return indent + ex.Message;

            if (ex is AggregateException aggregateException) {
                var innerExceptions = aggregateException.InnerExceptions
                    .SelectMany(inner => inner.GetMessagesRecursively(indent + "  "));
                foreach (var inner in innerExceptions) {
                    yield return inner;
                }
            }

            if (ex.InnerException != null) {
                foreach (var inner in ex.InnerException.GetMessagesRecursively(indent + "  ")) {
                    yield return inner;
                }
            }
        }
    }
}
