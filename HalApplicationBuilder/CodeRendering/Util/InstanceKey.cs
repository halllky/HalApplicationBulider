//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HalApplicationBuilder.CodeRendering.Util {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class InstanceKey : InstanceKeyBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            this.Write(" {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collection" +
                    "s.Generic;\r\n    using System.Linq;\r\n    using System.Text.Json;\r\n\r\n    public cl" +
                    "ass ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write(" {\r\n    \r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write(" Empty(int keyCount = 0) => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CREATE));
            this.Write("(new object?[keyCount]);\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CREATE));
            this.Write(@"(IEnumerable<object?> values) {
            var objArray = values.ToArray();
            var json = JsonSerializer.Serialize(objArray, new JsonSerializerOptions {
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.Create(System.Text.Unicode.UnicodeRanges.All),
            });
            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write("(json, objArray);\r\n        }\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(PARSE));
            this.Write(@"(string str) {
            object? ToObject(JsonElement jsonElement) {
                switch (jsonElement.ValueKind) {
                    case JsonValueKind.Array:
                        return jsonElement
                            .EnumerateArray()
                            .Select(x => ToObject(x))
                            .ToArray();

                    case JsonValueKind.True:
                    case JsonValueKind.False:
                        return jsonElement.GetBoolean();

                    case JsonValueKind.Number:
                        return jsonElement.GetDouble();

                    case JsonValueKind.String:
                        return jsonElement.GetString();

                    case JsonValueKind.Null:
                    case JsonValueKind.Undefined:
                        return null;

                    case JsonValueKind.Object:
                    default:
                        throw new InvalidOperationException();
                }
            }
                        
            if (string.IsNullOrWhiteSpace(str)) {
                return Empty();
            }
            var deserialized = JsonSerializer.Deserialize<JsonElement[]>(str)!;
            var objArray = deserialized.Select(jsonElement => ToObject(jsonElement)).ToArray();
            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write("(str, objArray);\r\n        }\r\n\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CLASS_NAME));
            this.Write("(string json, object?[] values) {\r\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OBJECT_ARRAY));
            this.Write(" = values;\r\n            _json = json;\r\n        }\r\n        internal object?[] ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OBJECT_ARRAY));
            this.Write(" { get; }\r\n        private readonly string _json;\r\n\r\n        public override stri" +
                    "ng ToString() {\r\n            return _json;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class InstanceKeyBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
