//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HalApplicationBuilder.CodeRendering.AspNetMvc {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class JsTemplate : JsTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\n<script>\n    const setHalappFunctions = targetElementJQueryObject => {\n        t" +
                    "argetElementJQueryObject.find(\'.");
            this.Write(this.ToStringHelper.ToStringWithCulture(ADD_CHILD_BTN));
            this.Write("\').on(\'click\', event => {\n            const controllerName = \'@(Context.Request.R" +
                    "outeValues[\"controller\"].ToString())\';\n            const button = $(event.target" +
                    ");\n            const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_TREE_PATH_ARG));
            this.Write(" = button.attr(\'");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_TREE_PATH_ATTR));
            this.Write("\');\n            const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_MODEL_PATH_ARG));
            this.Write(" = button.attr(\'");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_MODEL_PATH_ATTR));
            this.Write("\');\n            const ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ADD_CHILD_ARG_2));
            this.Write(" = button.siblings().length;\n            $.ajax({\n                type: \'GET\',\n  " +
                    "              url: `/${controllerName}/");
            this.Write(this.ToStringHelper.ToStringWithCulture(ADD_CHILD_CTL));
            this.Write("`,\n                data: {\n                    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_TREE_PATH_ARG));
            this.Write(",\n                    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_MODEL_PATH_ARG));
            this.Write(",\n                    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ADD_CHILD_ARG_2));
            this.Write(@",
                },
            }).then((data, textStatus, jqXHR) => {
                const partialView = $($.parseHTML(data));
                partialView.insertBefore(button);
                setHalappFunctions(partialView);
            }).catch(err => {
                console.trace('ERROR!!', err);
            });
        });
        
        targetElementJQueryObject.find('.");
            this.Write(this.ToStringHelper.ToStringWithCulture(REMOVE_BTN));
            this.Write("\').on(\'click\', event => {\n            const button = $(event.target);\n           " +
                    " const hiddenField = button.siblings(\'.");
            this.Write(this.ToStringHelper.ToStringWithCulture(REMOVE_HIDDEN_FIELD));
            this.Write("\');\n            hiddenField.val(\'true\');\n            button.parent().css(\'display" +
                    "\', \'none\');\n        });\n        \n        targetElementJQueryObject.find(\'.");
            this.Write(this.ToStringHelper.ToStringWithCulture(AUTOCOMPLETE_INPUT));
            this.Write(@"').each((_, el) => {
            const element = $(el);
            element.autocomplete({
                minLength: 0, @* 0文字入力以上でサジェスチョン有効 *@
                source: ({ term }, response) => {
                    const controllerName = '@(Context.Request.RouteValues[""controller""].ToString())';
                    const aggregateGuid = element.siblings('.");
            this.Write(this.ToStringHelper.ToStringWithCulture(AGGREGATE_GUID));
            this.Write("\').val();\n                    $.ajax({\n                        type: \'GET\',\n     " +
                    "                   url: `/${controllerName}/");
            this.Write(this.ToStringHelper.ToStringWithCulture(NAMEOF_AUTOCOMPLETE_ACTION));
            this.Write(@"`,
                        data: { aggregateGuid, term },
                    }).done(data => {
                        response(data);
                    }).fail(res => {
                        console.error(res.responseJSON); // TODO エラーハンドリング
                        response([]);
                    });
                },
                @* 矢印キー上下で選択肢を移動したときに発火 *@
                focus: (event, ui) => {
                    const hiddenField = element.siblings('.");
            this.Write(this.ToStringHelper.ToStringWithCulture(AUTOCOMPLETE_VALUE));
            this.Write(@"');
                    $(event.target).val(ui.item.label);
                    hiddenField.val(ui.item.value);
                    return false; @* input(text)にvalueでなくlabelを表示するため既定の処理を殺す *@
                },
                @* 選択確定時に発火 *@
                select: (event, ui) => {
                    const hiddenField = element.siblings('.");
            this.Write(this.ToStringHelper.ToStringWithCulture(AUTOCOMPLETE_VALUE));
            this.Write(@"');
                    $(event.target).val(ui.item.label);
                    hiddenField.val(ui.item.value);
                    return false; @* input(text)にvalueでなくlabelを表示するため既定の処理を殺す *@
                },
            });
        });
    }
        
    setHalappFunctions($(document));
    
    // const formFooter = $('#");
            this.Write(this.ToStringHelper.ToStringWithCulture(FORM_FOOTER_ID));
            this.Write("\');\n    // const form = $(\'#");
            this.Write(this.ToStringHelper.ToStringWithCulture(FORM_ID));
            this.Write("\');\n</script>");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class JsTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
