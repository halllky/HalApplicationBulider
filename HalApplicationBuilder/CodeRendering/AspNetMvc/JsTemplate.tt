<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<script>
    const setHalappFunctions = targetElementJQueryObject => {
        targetElementJQueryObject.find('.<#=ADD_CHILD_BTN#>').on('click', event => {
            const controllerName = '@(Context.Request.RouteValues["controller"]?.ToString())';
            const button = $(event.target);
            const <#=AGGREGATE_TREE_PATH_ARG#> = button.attr('<#=AGGREGATE_TREE_PATH_ATTR#>');
            const <#=AGGREGATE_MODEL_PATH_ARG#> = button.attr('<#=AGGREGATE_MODEL_PATH_ATTR#>');
            const <#=ADD_CHILD_ARG_2#> = button.siblings().length;
            $.ajax({
                type: 'GET',
                url: `/${controllerName}/<#=ADD_CHILD_CTL#>`,
                data: {
                    <#=AGGREGATE_TREE_PATH_ARG#>,
                    <#=AGGREGATE_MODEL_PATH_ARG#>,
                    <#=ADD_CHILD_ARG_2#>,
                },
            }).then((data, textStatus, jqXHR) => {
                const partialView = $($.parseHTML(data));
                partialView.insertBefore(button);
                setHalappFunctions(partialView);
            }).catch(err => {
                console.trace('ERROR!!', err);
            });
        });
        
        targetElementJQueryObject.find('.<#=REMOVE_BTN#>').on('click', event => {
            const button = $(event.target);
            const hiddenField = button.siblings('.<#=REMOVE_HIDDEN_FIELD#>');
            hiddenField.val('true');
            button.parent().css('display', 'none');
        });
        
        targetElementJQueryObject.find('.<#=AUTOCOMPLETE_INPUT#>').each((_, el) => {
            const element = $(el);
            element.autocomplete({
                minLength: 0, @* 0文字入力以上でサジェスチョン有効 *@
                source: ({ term }, response) => {
                    const controllerName = '@(Context.Request.RouteValues["controller"].ToString())';
                    const aggregateGuid = element.siblings('.<#=AGGREGATE_GUID#>').val();
                    $.ajax({
                        type: 'GET',
                        url: `/${controllerName}/<#=NAMEOF_AUTOCOMPLETE_ACTION#>`,
                        data: { aggregateGuid, term },
                    }).done(data => {
                        response(data);
                    }).fail(res => {
                        console.error(res.responseJSON); // TODO エラーハンドリング
                        response([]);
                    });
                },
                @* 矢印キー上下で選択肢を移動したときに発火 *@
                focus: (event, ui) => {
                    const hiddenField = element.siblings('.<#=AUTOCOMPLETE_VALUE#>');
                    $(event.target).val(ui.item.label);
                    hiddenField.val(ui.item.value);
                    return false; @* input(text)にvalueでなくlabelを表示するため既定の処理を殺す *@
                },
                @* 選択確定時に発火 *@
                select: (event, ui) => {
                    const hiddenField = element.siblings('.<#=AUTOCOMPLETE_VALUE#>');
                    $(event.target).val(ui.item.label);
                    hiddenField.val(ui.item.value);
                    return false; @* input(text)にvalueでなくlabelを表示するため既定の処理を殺す *@
                },
            });
        });
    }
        
    setHalappFunctions($(document));
    
    // const formFooter = $('#<#=FORM_FOOTER_ID#>');
    // const form = $('#<#=FORM_ID#>');
</script>
