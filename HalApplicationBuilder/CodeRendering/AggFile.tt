<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder.Core" #>
<#@ import namespace="HalApplicationBuilder.CodeRendering.Util" #>
#pragma warning disable CS8600 // Null リテラルまたは Null の可能性がある値を Null 非許容型に変換しています。
#pragma warning disable CS8618 // null 非許容の変数には、コンストラクターの終了時に null 以外の値が入っていなければなりません
#pragma warning disable IDE1006 // 命名スタイル

#region データ新規作成
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    [ApiController]
    [Route("<#=Controller.SUBDOMAIN#>/[controller]")]
    public partial class <#=_controller.ClassName#> : ControllerBase {
        public <#=_controller.ClassName#>(ILogger<<#=_controller.ClassName#>> logger, <#=_ctx.Config.DbContextName#> dbContext) {
            _logger = logger;
            _dbContext = dbContext;
        }
        private readonly ILogger<<#=_controller.ClassName#>> _logger;
        private readonly <#=_ctx.Config.DbContextName#> _dbContext;

        [HttpPost("<#=Controller.CREATE_ACTION_NAME#>")]
        public virtual IActionResult Create([FromBody] <#=_aggregateInstance.Item.ClassName#> param) {
            if (_dbContext.<#=_create.MethodName#>(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(string.Join(Environment.NewLine, errors));
            }
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        public bool <#=_create.MethodName#>(<#=_aggregateInstance.Item.ClassName#> instance, out <#=_aggregateInstance.Item.ClassName#> created, out ICollection<string> errors) {
            var dbEntity = instance.<#=AggregateInstance.TO_DB_ENTITY_METHOD_NAME#>();
            this.Add(dbEntity);

            try {
                this.SaveChanges();
            } catch (Exception ex) {
                created = new <#=_aggregateInstance.Item.ClassName#>();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }

            created = <#=_aggregateInstance.Item.ClassName#>.<#=AggregateInstance.FROM_DB_ENTITY_METHOD_NAME#>(dbEntity);
            errors = new List<string>();
            return true;
        }
    }
}
#endregion データ新規作成


#region 一覧検索
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpGet("<#=Controller.SEARCH_ACTION_NAME#>")]
        public virtual IActionResult Search([FromQuery] string param) {
            var json = System.Web.HttpUtility.UrlDecode(param);
            var condition = string.IsNullOrWhiteSpace(json)
                ? new <#=_search.ArgType#>()
                : System.Text.Json.JsonSerializer.Deserialize<<#=_search.ArgType#>>(json)!;
            var searchResult = _dbContext
                .<#=_search.MethodName#>(condition)
                .AsEnumerable();
            return this.JsonContent(searchResult);
        }
        [HttpGet("<#=Controller.KEYWORDSEARCH_ACTION_NAME#>")]
        public virtual IActionResult SearchByKeyword([FromQuery] string keyword) {
            // TODO
            throw new NotImplementedException();
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>の一覧検索を行います。
        /// </summary>
        public <#=_search.ReturnType#> <#=_search.MethodName#>(<#=_search.ArgType#> <#=SearchMethod.PARAM#>) {
            var <#=SearchMethod.QUERY#> = this.<#=_search.DbSetName#>.Select(<#=E#> => new <#=_search.ReturnItemType#> {
<# foreach (var line in _search.SelectClause()) { #>
                <#=line#>
<# } #>
            });

<# foreach (var line in _search.WhereClause()) { #>
            <#=line#>
<# } #>

            if (<#=SearchMethod.PARAM#>.<#=SearchMethod.PAGE#> != null) {
                const int PAGE_SIZE = 20;
                var skip = <#=SearchMethod.PARAM#>.<#=SearchMethod.PAGE#>.Value * PAGE_SIZE;
                <#=SearchMethod.QUERY#> = <#=SearchMethod.QUERY#>.Skip(skip).Take(PAGE_SIZE);
            }

            foreach (var item in <#=SearchMethod.QUERY#>) {
                item.<#=SearchResult.INSTANCE_KEY_PROP_NAME#> = <#=InstanceKey.CLASS_NAME#>.<#=InstanceKey.CREATE#>(new object?[] {
<# foreach (var key in _search.EnumerateKeys()) { #>
                    item.<#=key#>,
<# } #>
                }).ToString();

<# if (_search.GetInstanceNamePropName() == null) { #>
                // 表示名に使用するプロパティが定義されていないため、キーを表示名に使用します。
                item.<#=SearchResult.INSTANCE_NAME_PROP_NAME#> = item.<#=SearchResult.INSTANCE_KEY_PROP_NAME#>;
<# } else { #>
                item.<#=SearchResult.INSTANCE_NAME_PROP_NAME#> = item.<#=_search.GetInstanceNamePropName()#>;
<# } #>

                yield return item;
            }
        }
    }
}
#endregion 一覧検索


#region 詳細検索
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpGet("<#=Controller.FIND_ACTION_NAME#>/{instanceKey}")]
        public virtual IActionResult Find(string instanceKey) {
            var instance = _dbContext.<#=_find.MethodName#>(instanceKey);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public <#=_find.ReturnType#>? <#=_find.MethodName#>(string serializedInstanceKey) {
            if (!<#=InstanceKey.CLASS_NAME#>.<#=InstanceKey.TRY_PARSE#>(serializedInstanceKey, out var instanceKey)) {
                return null;
            }
            var entity = this.<#=_dbEntity.Item.DbSetName#>
<# foreach (var line in _find.Include()) { #>
                <#=line#>
<# } #>
<# foreach (var line in _find.SingleOrDefault($"instanceKey.{InstanceKey.OBJECT_ARRAY}")) { #>
                <#=line#>
<# } #>

            if (entity == null) return null;

            var aggregateInstance = <#=_find.AggregateInstanceTypeFullName#>.<#=AggregateInstance.FROM_DB_ENTITY_METHOD_NAME#>(entity);
            return aggregateInstance;
        }
    }
}
#endregion 詳細検索


#region 更新
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpPost("<#=Controller.UPDATE_ACTION_NAME#>")]
        public virtual IActionResult Update(<#=_aggregateInstance.Item.ClassName#> param) {
            // TODO
            throw new NotImplementedException();
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
    }
}
#endregion 更新


#region 削除
#endregion 削除


#region データ構造
namespace <#=_ctx.Config.RootNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    partial class <#=_aggregateInstance.Item.ClassName#> {
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static <#=_aggregateInstance.Item.ClassName#> <#=AggregateInstance.FROM_DB_ENTITY_METHOD_NAME#>(<#=_ctx.Config.EntityNamespace#>.<#=_dbEntity.Item.ClassName#> <#=E#>) {
<# PushIndent("            "); #>
<# FromDbEntity(); #>
<# PopIndent(); #>
        }
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のデータ1件の内容をデータベースに保存する形に変換します。
        /// </summary>
        public <#=_ctx.Config.EntityNamespace#>.<#=_dbEntity.Item.ClassName#> <#=AggregateInstance.TO_DB_ENTITY_METHOD_NAME#>() {
<# PushIndent("            "); #>
<# ToDbEntity(); #>
<# PopIndent(); #>
        }
    }

<# foreach (var ins in _aggregateInstance.EnumerateThisAndDescendants()) { #>
    /// <summary>
    /// <#=ins.GetCorrespondingAggregate().Item.DisplayName#>のデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class <#=ins.Item.ClassName#> : <#=AggregateInstance.BASE_CLASS_NAME#> {
<# foreach (var prop in ins.GetProperties(_ctx.Config)) { #>
        public <#=prop.CSharpTypeName#> <#=prop.PropertyName#> { get; set; }
<# } #>
    }
<# } #>

    /// <summary>
    /// <#=_aggregate.Item.DisplayName#>の一覧検索処理の検索条件を表すクラスです。
    /// </summary>
    public partial class <#=_searchCondition.ClassName#> : <#=SearchCondition.BASE_CLASS_NAME#> {
<# foreach (var prop in _searchCondition.GetMembers()) { #>
        public <#=prop.Type.GetCSharpTypeName()#> <#=prop.Name#> { get; set; }
<# } #>
    }

    /// <summary>
    /// <#=_aggregate.Item.DisplayName#>の一覧検索処理の検索結果1件を表すクラスです。
    /// </summary>
    public partial class <#=_searchResult.ClassName#> : <#=SearchResult.BASE_CLASS_NAME#> {
<# foreach (var prop in _searchResult.GetMembers()) { #>
        public <#=prop.Type.GetCSharpTypeName()#> <#=prop.Name#> { get; set; }
<# } #>
    }
}

namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    
<# foreach (var ett in _dbEntity.EnumerateThisAndDescendants()) { #>
    /// <summary>
    /// <#=ett.GetCorrespondingAggregate().Item.DisplayName#>のデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class <#=ett.Item.ClassName#> {
<# foreach (var col in ett.GetColumns()) { #>
        public <#=col.CSharpTypeName#> <#=col.PropertyName#> { get; set; }<#=col.Initializer == null ? "" : $" = {col.Initializer};"#>
<# } #>

<# foreach (var nav in EnumerateNavigationProperties(ett)) { #>
        public virtual <#=nav.CSharpTypeName#> <#=nav.PropertyName#> { get; set; }<#=nav.Initializer == null ? "" : $" = {nav.Initializer};"#>
<# } #>
    }
<# } #>

    partial class <#=_ctx.Config.DbContextName#> {
<# foreach (var ett in _dbEntity.EnumerateThisAndDescendants()) { #>
        public DbSet<<#=_ctx.Config.EntityNamespace#>.<#=ett.Item.ClassName#>> <#=ett.Item.DbSetName#> { get; set; }
<# } #>
    }
}
#endregion データ構造
