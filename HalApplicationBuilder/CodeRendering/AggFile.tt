<#@ template language="C#" linePragmas="false" #>
<#@ output encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HalApplicationBuilder.Core" #>
<#@ import namespace="HalApplicationBuilder.CodeRendering.Util" #>
<#@ import namespace="HalApplicationBuilder.DotnetEx" #>
#pragma warning disable CS8600 // Null リテラルまたは Null の可能性がある値を Null 非許容型に変換しています。
#pragma warning disable CS8618 // null 非許容の変数には、コンストラクターの終了時に null 以外の値が入っていなければなりません
#pragma warning disable IDE1006 // 命名スタイル

#region データ新規作成
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    [ApiController]
    [Route("<#=Controller.SUBDOMAIN#>/[controller]")]
    public partial class <#=_controller.ClassName#> : ControllerBase {
        public <#=_controller.ClassName#>(ILogger<<#=_controller.ClassName#>> logger, <#=_ctx.Config.DbContextName#> dbContext) {
            _logger = logger;
            _dbContext = dbContext;
        }
        private readonly ILogger<<#=_controller.ClassName#>> _logger;
        private readonly <#=_ctx.Config.DbContextName#> _dbContext;

        [HttpPost("<#=Controller.CREATE_ACTION_NAME#>")]
        public virtual IActionResult Create([FromBody] <#=CreateCommandClassName#> param) {
            if (_dbContext.<#=_create.MethodName#>(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        public bool <#=_create.MethodName#>(<#=CreateCommandClassName#> command, out <#=_aggregateInstance.Item.ClassName#> created, out ICollection<string> errors) {
            var dbEntity = command.<#=CreateCommandToDbEntityMethodName#>();
            this.Add(dbEntity);

            try {
                this.SaveChanges();
            } catch (DbUpdateException ex) {
                created = new <#=_aggregateInstance.Item.ClassName#>();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }

            var instanceKey = command.<#=CreateCommandGetInstanceKeyMethodName#>().ToString();
            var afterUpdate = this.<#=FindMethodName#>(instanceKey);
            if (afterUpdate == null) {
                created = new <#=_aggregateInstance.Item.ClassName#>();
                errors = new[] { "更新後のデータの再読み込みに失敗しました。" };
                return false;
            }

            created = afterUpdate;
            errors = new List<string>();
            return true;
        }
    }
}
#endregion データ新規作成


#region 一覧検索
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpGet("<#=Controller.SEARCH_ACTION_NAME#>")]
        public virtual IActionResult Search([FromQuery] string param) {
            var json = System.Web.HttpUtility.UrlDecode(param);
            var condition = string.IsNullOrWhiteSpace(json)
                ? new <#=_search.ArgType#>()
                : System.Text.Json.JsonSerializer.Deserialize<<#=_search.ArgType#>>(json)!;
            var searchResult = _dbContext
                .<#=_search.MethodName#>(condition)
                .AsEnumerable();
            return this.JsonContent(searchResult);
        }
        [HttpGet("<#=Controller.KEYWORDSEARCH_ACTION_NAME#>")]
        public virtual IActionResult SearchByKeyword([FromQuery] string? keyword) {
            var items = _dbContext.<#=ListByKeywordMethodName#>(keyword);
            return this.JsonContent(items);
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>の一覧検索を行います。
        /// </summary>
        public <#=_search.ReturnType#> <#=_search.MethodName#>(<#=_search.ArgType#> <#=SearchMethod.PARAM#>) {
            var <#=SearchMethod.QUERY#> = this.<#=_search.DbSetName#>.Select(<#=SearchMethod.E#> => new <#=_search.ReturnItemType#> {
<# foreach (var line in _search.SelectClause()) { #>
                <#=line#>
<# } #>
            });

<# foreach (var line in _search.WhereClause()) { #>
            <#=line#>
<# } #>

            if (<#=SearchMethod.PARAM#>.<#=SearchMethod.PAGE#> != null) {
                const int PAGE_SIZE = 20;
                var skip = <#=SearchMethod.PARAM#>.<#=SearchMethod.PAGE#>.Value * PAGE_SIZE;
                <#=SearchMethod.QUERY#> = <#=SearchMethod.QUERY#>.Skip(skip).Take(PAGE_SIZE);
            }

            foreach (var item in <#=SearchMethod.QUERY#>) {
                item.<#=SearchResult.INSTANCE_KEY_PROP_NAME#> = <#=InstanceKey.CLASS_NAME#>.<#=InstanceKey.CREATE#>(new object?[] {
<# foreach (var key in _search.EnumerateKeys()) { #>
                    item.<#=key#>,
<# } #>
                }).ToString();

<# if (_search.GetInstanceNamePropName() == null) { #>
                // 表示名に使用するプロパティが定義されていないため、キーを表示名に使用します。
                item.<#=SearchResult.INSTANCE_NAME_PROP_NAME#> = item.<#=SearchResult.INSTANCE_KEY_PROP_NAME#>;
<# } else { #>
                item.<#=SearchResult.INSTANCE_NAME_PROP_NAME#> = item.<#=_search.GetInstanceNamePropName()#>;
<# } #>

                yield return item;
            }
        }

        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>をキーワードで検索します。
        /// </summary>
        public IEnumerable<<#=AggregateInstanceKeyNamePair.CLASSNAME#>> <#=ListByKeywordMethodName#>(string? keyword) {
            var query = this.<#=_dbEntity.Item.DbSetName#>.Select(e => new {
<# foreach (var col in EnumerateListByKeywordTargetColumns()) { #>
                e.<#=col.Path#>,
<# } #>
            });

            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => <#=EnumerateListByKeywordTargetColumns().Select(col => $"EF.Functions.Like(item.{col.NameAsString}, like)").Join($"{Environment.NewLine}                            || ") #>);
            }

            query = query
                .OrderBy(item => item.<#=EnumerateListByKeywordTargetColumns().Where(col => col.IsInstanceKey).First().Name#>)
                .Take(<#=LIST_BY_KEYWORD_MAX + 1#>);

<# var keyColumns = EnumerateListByKeywordTargetColumns().Where(col => col.IsInstanceKey).ToArray(); #>
<# var nameColumns = EnumerateListByKeywordTargetColumns().Where(col => col.IsInstanceName).ToArray(); #>
            return query
                .AsEnumerable()
                .Select(item => new <#=AggregateInstanceKeyNamePair.CLASSNAME#> {
                    <#=AggregateInstanceKeyNamePair.KEY#> = <#=InstanceKey.CLASS_NAME#>.<#=InstanceKey.CREATE#>(new object?[] {
<# foreach (var col in keyColumns) { #>
                        item.<#=col.Name#>,
<# } #>
                    }).ToString(),
                    <#=AggregateInstanceKeyNamePair.NAME#> = <#=nameColumns.Any()
                        ? nameColumns.Select(col => $"item.{col.Name}?.ToString()").Join(" + ")
                        : keyColumns.Select(col => $"item.{col.Name}?.ToString()").Join(" + ")#>,
                });
        }
    }
}
#endregion 一覧検索


#region 詳細検索
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpGet("<#=Controller.FIND_ACTION_NAME#>/{instanceKey}")]
        public virtual IActionResult Find(string instanceKey) {
            var instance = _dbContext.<#=FindMethodName#>(instanceKey);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public <#=FindMethodReturnType#>? <#=FindMethodName#>(string serializedInstanceKey) {

<# PushIndent("            "); #>
<# RenderDbEntityLoading("entity", "serializedInstanceKey", tracks: false); #>
<# PopIndent(); #>

            if (entity == null) return null;

            var aggregateInstance = <#=_aggregateInstance.Item.ClassName#>.<#=AggregateInstance.FROM_DB_ENTITY_METHOD_NAME#>(entity);
            return aggregateInstance;
        }
    }
}
#endregion 詳細検索


#region 更新
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpPost("<#=Controller.UPDATE_ACTION_NAME#>")]
        public virtual IActionResult Update(<#=_aggregateInstance.Item.ClassName#> param) {
            if (_dbContext.<#=_update.MethodName#>(param, out var updated, out var errors)) {
                return this.JsonContent(updated);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        public bool <#=_update.MethodName#>(<#=_aggregateInstance.Item.ClassName#> after, out <#=_aggregateInstance.Item.ClassName#> updated, out ICollection<string> errors) {
            errors = new List<string>();
            var key = after.<#=GETINSTANCEKEY_METHOD_NAME#>().ToString();

<# PushIndent("            "); #>
<# RenderDbEntityLoading("beforeDbEntity", "key", tracks: false); #>
<# PopIndent(); #>

            if (beforeDbEntity == null) {
                updated = new <#=_aggregateInstance.Item.ClassName#>();
                errors.Add("更新対象のデータが見つかりません。");
                return false;
            }

            var afterDbEntity = after.<#=AggregateInstance.TO_DB_ENTITY_METHOD_NAME#>();

            // Attach
            this.Entry(afterDbEntity).State = EntityState.Modified;

<# PushIndent("            "); #>
<# _update.RenderDescendantsAttaching(this, "this", "beforeDbEntity", "afterDbEntity"); #>
<# PopIndent(); #>

            try {
                this.SaveChanges();
            } catch (DbUpdateException ex) {
                updated = new <#=_aggregateInstance.Item.ClassName#>();
                foreach (var msg in ex.GetMessagesRecursively()) errors.Add(msg);
                return false;
            }

            var afterUpdate = this.<#=FindMethodName#>(key);
            if (afterUpdate == null) {
                updated = new <#=_aggregateInstance.Item.ClassName#>();
                errors.Add("更新後のデータの再読み込みに失敗しました。");
                return false;
            }
            updated = afterUpdate;
            return true;
        }
    }
}
#endregion 更新


#region 削除
namespace <#=_ctx.Config.RootNamespace#> {
    using Microsoft.AspNetCore.Mvc;
    using <#=_ctx.Config.EntityNamespace#>;

    partial class <#=_controller.ClassName#> {
        [HttpDelete("<#=Controller.DELETE_ACTION_NAME#>/{key}")]
        public virtual IActionResult Delete(string key) {
            if (_dbContext.<#=_delete.MethodName#>(key, out var errors)) {
                return Ok();
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
    }
}
namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;

    partial class <#=_ctx.Config.DbContextName#> {
        public bool <#=_delete.MethodName#>(string key, out ICollection<string> errors) {

<# PushIndent("            "); #>
<# RenderDbEntityLoading("entity", "key", tracks: true); #>
<# PopIndent(); #>

            if (entity == null) {
                errors = new[] { "削除対象のデータが見つかりません。" };
                return false;
            }

            this.Remove(entity);
            try {
                this.SaveChanges();
            } catch (DbUpdateException ex) {
                errors = ex.GetMessagesRecursively().ToArray();
                return false;
            }

            errors = Array.Empty<string>();
            return true;
        }
    }
}
#endregion 削除


#region データ構造
namespace <#=_ctx.Config.RootNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// <#=_aggregateInstance.GetCorrespondingAggregate().Item.DisplayName#>のデータ作成コマンドです。
    /// </summary>
    public partial class <#=CreateCommandClassName#> {
<# foreach (var prop in _aggregateInstance.GetProperties(_ctx.Config)) { #>
        public <#=prop.CSharpTypeName#> <#=prop.PropertyName#> { get; set; }
<# } #>

        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のデータ作成コマンドをデータベースに保存する形に変換します。
        /// </summary>
        public <#=_ctx.Config.EntityNamespace#>.<#=_dbEntity.Item.ClassName#> <#=CreateCommandToDbEntityMethodName#>() {
<# PushIndent("            "); #>
<# ToDbEntity(); #>
<# PopIndent(); #>
        }
        /// <summary>
        /// 主キーを返します。
        /// </summary>
        public <#=InstanceKey.CLASS_NAME#> <#=CreateCommandGetInstanceKeyMethodName#>() {
            return <#=InstanceKey.CLASS_NAME#>.<#=InstanceKey.CREATE#>(new object[] {
<# foreach (var p in _aggregateInstance.GetSchalarProperties(_ctx.Config).Where(p => p.CorrespondingDbColumn.IsPrimary)) { #>
                this.<#=p.PropertyName#>,
<# } #>
            });
        }
    }

    /// <summary>
    /// <#=_aggregateInstance.GetCorrespondingAggregate().Item.DisplayName#>のデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class <#=_aggregateInstance.Item.ClassName#> : <#=AggregateInstance.BASE_CLASS_NAME#> {
<# foreach (var prop in _aggregateInstance.GetProperties(_ctx.Config)) { #>
        public <#=prop.CSharpTypeName#> <#=prop.PropertyName#> { get; set; }
<# } #>

        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static <#=_aggregateInstance.Item.ClassName#> <#=AggregateInstance.FROM_DB_ENTITY_METHOD_NAME#>(<#=_ctx.Config.EntityNamespace#>.<#=_dbEntity.Item.ClassName#> <#=E#>) {
<# PushIndent("            "); #>
<# FromDbEntity(); #>
<# PopIndent(); #>
        }
        /// <summary>
        /// <#=_aggregate.Item.DisplayName#>のデータ1件の内容をデータベースに保存する形に変換します。
        /// </summary>
        public <#=_ctx.Config.EntityNamespace#>.<#=_dbEntity.Item.ClassName#> <#=AggregateInstance.TO_DB_ENTITY_METHOD_NAME#>() {
<# PushIndent("            "); #>
<# ToDbEntity(); #>
<# PopIndent(); #>
        }
        /// <summary>
        /// 主キーを返します。
        /// </summary>
        public <#=InstanceKey.CLASS_NAME#> <#=GETINSTANCEKEY_METHOD_NAME#>() {
            return <#=InstanceKey.CLASS_NAME#>.<#=InstanceKey.CREATE#>(new object[] {
<# foreach (var p in _aggregateInstance.GetSchalarProperties(_ctx.Config).Where(p => p.CorrespondingDbColumn.IsPrimary)) { #>
                this.<#=p.PropertyName#>,
<# } #>
            });
        }
        public string <#=GETINSTANCENAME_METHOD_NAME#>() {
<# foreach (var line in GetInstanceNameProps()) { #>
            <#=line#>
<# } #>
        }
        public <#=AggregateInstanceKeyNamePair.CLASSNAME#> <#=TOKEYNAMEPAIR_METHOD_NAME#>() {
            return new <#=AggregateInstanceKeyNamePair.CLASSNAME#> {
                <#=AggregateInstanceKeyNamePair.KEY#> = this.<#=GETINSTANCEKEY_METHOD_NAME#>().ToString(),
                <#=AggregateInstanceKeyNamePair.NAME#> = this.<#=GETINSTANCENAME_METHOD_NAME#>(),
            };
        }
    }

<# foreach (var ins in _aggregateInstance.EnumerateDescendants()) { #>
    /// <summary>
    /// <#=ins.GetCorrespondingAggregate().Item.DisplayName#>のデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class <#=ins.Item.ClassName#> {
<# foreach (var prop in ins.GetProperties(_ctx.Config)) { #>
        public <#=prop.CSharpTypeName#> <#=prop.PropertyName#> { get; set; }
<# } #>
    }
<# } #>

    /// <summary>
    /// <#=_aggregate.Item.DisplayName#>の一覧検索処理の検索条件を表すクラスです。
    /// </summary>
    public partial class <#=_searchCondition.ClassName#> : <#=SearchCondition.BASE_CLASS_NAME#> {
<# foreach (var prop in _searchCondition.GetMembers()) { #>
        public <#=prop.Type.GetCSharpTypeName()#> <#=prop.Name#> { get; set; }
<# } #>
    }

    /// <summary>
    /// <#=_aggregate.Item.DisplayName#>の一覧検索処理の検索結果1件を表すクラスです。
    /// </summary>
    public partial class <#=_searchResult.ClassName#> : <#=SearchResult.BASE_CLASS_NAME#> {
<# foreach (var prop in _searchResult.GetMembers()) { #>
        public <#=prop.Type.GetCSharpTypeName()#> <#=prop.Name#> { get; set; }
<# } #>
    }
}

namespace <#=_ctx.Config.EntityNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    
<# foreach (var ett in _dbEntity.EnumerateThisAndDescendants()) { #>
    /// <summary>
    /// <#=ett.GetCorrespondingAggregate().Item.DisplayName#>のデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class <#=ett.Item.ClassName#> {
<# foreach (var col in ett.GetColumns()) { #>
        public <#=col.CSharpTypeName#> <#=col.PropertyName#> { get; set; }<#=col.Initializer == null ? "" : $" = {col.Initializer};"#>
<# } #>

<# foreach (var nav in EnumerateNavigationProperties(ett)) { #>
        public virtual <#=nav.CSharpTypeName#> <#=nav.PropertyName#> { get; set; }<#=nav.Initializer == null ? "" : $" = {nav.Initializer};"#>
<# } #>

        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool <#=EFCoreEntity.KEYEQUALS#>(<#=ett.Item.ClassName#> entity) {
<# foreach (var col in ett.GetColumns().Where(c => c.IsPrimary)) { #>
            if (entity.<#=col.PropertyName#> != this.<#=col.PropertyName#>) return false;
<# } #>
            return true;
        }
    }
<# } #>

    partial class <#=_ctx.Config.DbContextName#> {
<# foreach (var ett in _dbEntity.EnumerateThisAndDescendants()) { #>
        public DbSet<<#=_ctx.Config.EntityNamespace#>.<#=ett.Item.ClassName#>> <#=ett.Item.DbSetName#> { get; set; }
<# } #>
    }
}
#endregion データ構造
