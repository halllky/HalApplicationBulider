<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace HalApplicationBuilder.Runtime {

    internal static class HalAppDefaultConfigurer {
        internal static void Configure(IServiceCollection services, string runtimeRootDir) {
            HalApplicationBuilder.RuntimeService.Configure(
                services,
                System.Reflection.Assembly.GetExecutingAssembly(),
                System.IO.Path.Combine(runtimeRootDir, "halapp.json"));

            // SaveやDetailでDbContextをダイレクトに参照しているため
            services.AddScoped<Microsoft.EntityFrameworkCore.DbContext>(provider => {
                return provider.GetRequiredService<<#=_dbContextFullName#>>();
            });

            services.AddDbContext<<#=_dbContextFullName#>>((provider, option) => {
                var setting = provider.GetRequiredService<<#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>>();
                var connStr = setting.<#=nameof(Runtime.RuntimeSettings.Server.GetActiveConnectionString)#>();
                Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(option);
                Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(option, connStr);
            });

            services.AddScoped(_ => {
                var filename = "<#=HALAPP_RUNTIME_SERVER_SETTING_JSON#>";
                if (System.IO.File.Exists(filename)) {
                    using var stream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                    var parsed = System.Text.Json.JsonSerializer.Deserialize<<#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>>(stream);
                    return parsed ?? <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>.<#=nameof(Runtime.RuntimeSettings.Server.GetDefault)#>();
                } else {
                    return new <#=DotnetEx.TypeExtensions.GetFullName(typeof(Runtime.RuntimeSettings.Server))#>();
                }
            });
        }
    }

}
