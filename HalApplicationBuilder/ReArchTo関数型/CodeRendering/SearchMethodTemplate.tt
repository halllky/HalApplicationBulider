<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace <#=_config.DbContextNamespace#> {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;

    partial class <#=_config.DbContextName#> {

<# foreach (var rootAggregate in _rootAggregates) { #>
<# var method = rootAggregate.BuildSearchMethod(_config, "param", "e"); #>
        public IEnumerable<<#=method.SearchResultClassName#>> <#=method.MethodName#>(<#=method.SearchConditionClassName#> param) {
            var query = this.<#=method.DbSetName#>.Select(e => new <#=method.SearchResultClassName#> {
<# foreach (var line in method.SelectClause) { #>
                <#=line#>
<# } #>
            });

<# foreach (var line in method.WhereClause) { #>
            <#=line#>
<# } #>

            var page = param.GetPageObject();
            query = query
                .Skip(page.<#=nameof(DotnetEx.Page.SqlOffset)#>)
                .Take(page.<#=nameof(DotnetEx.Page.SqlLimit)#>);

            return query.AsEnumerable();
        }
<# } #>

    }
}