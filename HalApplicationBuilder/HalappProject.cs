using HalApplicationBuilder.CodeRendering;
using HalApplicationBuilder.CodeRendering.EFCore;
using HalApplicationBuilder.CodeRendering.WebClient;
using HalApplicationBuilder.Core;
using HalApplicationBuilder.DotnetEx;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace HalApplicationBuilder {
    public sealed partial class HalappProject {

        private const string HALAPP_XML_NAME = "halapp.xml";
        private const string REACT_DIR = "client";

        /// <summary>
        /// 新しいhalappプロジェクトを作成します。
        /// </summary>
        /// <param name="applicationName">アプリケーション名</param>
        /// <param name="verbose">ログの詳細出力を行うかどうか</param>
        /// <returns>作成されたプロジェクトを表すオブジェクト</returns>
        public static HalappProject Create(string projectRootDir, string? applicationName, bool keepTempIferror, CancellationToken? cancellationToken = null, TextWriter? log = null) {

            if (string.IsNullOrWhiteSpace(applicationName))
                throw new InvalidOperationException($"Please specify name of new application. example 'halapp create my-new-app'");

            if (Path.GetInvalidFileNameChars().Any(applicationName.Contains))
                throw new InvalidOperationException($"'{applicationName}' contains invalid characters for a file name.");

            if (Directory.Exists(projectRootDir))
                throw new InvalidOperationException($"'{projectRootDir}' is already exists.");

            var tempDir = keepTempIferror
                ? projectRootDir
                : Directory.CreateTempSubdirectory("halapp.temp.").FullName;

            var error = false;
            try {
                var tempProject = new HalappProject(tempDir, log);

                Directory.CreateDirectory(tempDir);

                tempProject.CodeGenerator.EnsureCreateHalappXml(applicationName);

                tempProject.CodeGenerator.DotnetNew();

                tempProject.CodeGenerator.EditProgramCs();
                tempProject.CodeGenerator.UpdateAutoGeneratedCode();

                tempProject.CodeGenerator.AddNugetPackages();

                tempProject.Migrator.EnsureCreateDatabase();

                // git initial commit
                using var cmd1 = tempProject.CreateProcess("git", "init");
                using var cmd2 = tempProject.CreateProcess("git", "add", ".");
                using var cmd3 = tempProject.CreateProcess("git", "commit", "-m", "init");
                cmd1.Start(cancellationToken);
                cmd2.Start(cancellationToken);
                cmd3.Start(cancellationToken);

                // ここまでの処理がすべて成功したら一時ディレクトリを本来のディレクトリ名に変更
                if (tempDir != projectRootDir) {
                    if (Directory.Exists(projectRootDir)) throw new InvalidOperationException($"プロジェクトディレクトリを {projectRootDir} に移動できません。");
                    Directory.Move(tempDir, projectRootDir);
                }

                log?.WriteLine("プロジェクト作成完了");

                return new HalappProject(projectRootDir, log);

            } catch {
                error = true;
                throw;

            } finally {
                if (tempDir != projectRootDir && Directory.Exists(tempDir) && (keepTempIferror == false || error == false)) {
                    try {
                        Directory.Delete(tempDir, true);
                    } catch (Exception ex) {
                        log?.WriteLine(new Exception("Failure to delete temp directory.", ex).ToString());
                    }
                }
            }
        }
        /// <summary>
        /// 既存のhalappプロジェクトを開きます。
        /// </summary>
        /// <param name="path">プロジェクトルートディレクトリの絶対パス</param>
        /// <returns>作成されたプロジェクトを表すオブジェクト</returns>
        public static HalappProject Open(string? path, TextWriter? log = null) {
            if (string.IsNullOrWhiteSpace(path))
                return new HalappProject(Directory.GetCurrentDirectory(), log);
            else if (Path.IsPathRooted(path))
                return new HalappProject(path, log);
            else
                return new HalappProject(Path.Combine(Directory.GetCurrentDirectory(), path), log);
        }

        private HalappProject(string projetctRoot, TextWriter? log) {
            if (string.IsNullOrWhiteSpace(projetctRoot))
                throw new ArgumentException($"'{nameof(projetctRoot)}' is required.");

            ProjectRoot = Path.GetFullPath(projetctRoot);
            _log = log;

            CodeGenerator = new HalappProjectCodeGenerator(this, log);
            Debugger = new HalappProjectDebugger(this, log);
            Migrator = new HalappProjectMigrator(this);
        }

        private readonly TextWriter? _log;

        public string ProjectRoot { get; }
        public string WebClientProjectRoot => Path.Combine(ProjectRoot, REACT_DIR);

        public HalappProjectCodeGenerator CodeGenerator { get; }
        public HalappProjectDebugger Debugger { get; }
        public HalappProjectMigrator Migrator { get; }

        public string GetAggregateSchemaPath() {
            return Path.Combine(ProjectRoot, HALAPP_XML_NAME);
        }
        public Config ReadConfig() {
            var xmlFullPath = GetAggregateSchemaPath();
            using var stream = IO.OpenFileWithRetry(xmlFullPath);
            using var reader = new StreamReader(stream);
            var xmlContent = reader.ReadToEnd();
            var xDocument = XDocument.Parse(xmlContent);
            var config = Config.FromXml(xDocument);
            return config;
        }
        /// <summary>
        /// アプリケーションスキーマを生成します。
        /// </summary>
        /// <exception cref="InvalidOperationException">アプリケーションスキーマが不正な場合</exception>
        internal AppSchema BuildSchema() {
            var xmlFullPath = GetAggregateSchemaPath();
            using var stream = IO.OpenFileWithRetry(xmlFullPath);
            using var reader = new StreamReader(stream);
            var xmlContent = reader.ReadToEnd();
            var xDocument = XDocument.Parse(xmlContent);

            if (!AppSchemaBuilder.FromXml(xDocument, out var builder, out var errors)) {
                throw new InvalidOperationException(errors.Join(Environment.NewLine));
            }
            if (!builder.TryBuild(out var appSchema, out var errors1)) {
                throw new InvalidOperationException(errors1.Join(Environment.NewLine));
            }

            return appSchema;
        }

        /// <summary>
        /// このディレクトリがhalappのものとして妥当なものかどうかを検査します。
        /// </summary>
        public bool IsValidDirectory() {
            var errors = new List<string>();

            if (Path.GetInvalidPathChars().Any(ProjectRoot.Contains))
                errors.Add($"Invalid path format: '{ProjectRoot}'");

            if (!Directory.Exists(ProjectRoot))
                errors.Add($"Directory '{ProjectRoot}' is not exist.");

            var halappXml = GetAggregateSchemaPath();
            if (!File.Exists(halappXml))
                errors.Add($"'{halappXml}' is not found.");

            if (_log != null) {
                foreach (var error in errors) _log.WriteLine(error);
            }
            return errors.Count == 0;
        }

        internal ProcessEx CreateProcess(string filename, params string[] args) {
            var process = new ProcessEx(ProjectRoot, filename, args);
            process.Log += Process_Log;
            return process;
        }
        internal ProcessEx CreateClientDirProcess(string filename, params string[] args) {
            var process = new ProcessEx(WebClientProjectRoot, filename, args);
            process.Log += Process_Log;
            return process;
        }

        private void Process_Log(object? sender, ProcessEx.LogEventArgs e) {
            _log?.WriteLine(e.Message);
        }
    }
}
