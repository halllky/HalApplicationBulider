using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;

namespace HalApplicationBuilder.Core {
    public class Aggregate {

        internal Aggregate() { }

        internal ApplicationSchema Schema { get; init; }
        internal Type UnderlyingType { get; init; }

        public string Name => UnderlyingType.Name;


        #region リレーション
        public AggregateMemberBase Parent { get; init; }

        private List<AggregateMemberBase> _members;
        public IReadOnlyList<AggregateMemberBase> Members {
            get {
                if (_members == null) {
                    _members = new List<AggregateMemberBase>();
                    foreach (var prop in UnderlyingType.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
                        if (prop.GetCustomAttribute<NotMappedAttribute>() != null) continue;

                        if (Core.Members.SchalarValue.IsPrimitive(prop.PropertyType)) {
                            _members.Add(new Core.Members.SchalarValue { Schema = Schema, Owner = this, UnderlyingPropertyInfo = prop });
                        } else if (prop.PropertyType.IsGenericType
                            && prop.PropertyType.GetGenericTypeDefinition() == typeof(Child<>)) {
                            _members.Add(new Core.Members.Child { Schema = Schema, Owner = this, UnderlyingPropertyInfo = prop });
                        } else if (prop.PropertyType.IsGenericType
                            && prop.PropertyType.GetGenericTypeDefinition() == typeof(Children<>)) {
                            _members.Add(new Core.Members.Children { Schema = Schema, Owner = this, UnderlyingPropertyInfo = prop });
                        } else if (prop.PropertyType.IsGenericType
                            && prop.PropertyType.GetGenericTypeDefinition() == typeof(RefTo<>)) {
                            _members.Add(new Core.Members.Reference { Schema = Schema, Owner = this, UnderlyingPropertyInfo = prop });
                        } else {
                            throw new InvalidOperationException($"{UnderlyingType.Name} の {prop.Name} の型 {prop.PropertyType.Name} は非対応");
                        }
                    }
                }
                return _members;
            }
        }

        public Aggregate GetRoot() {
            var aggregate = this;
            while (aggregate.Parent != null) {
                aggregate = aggregate.Parent.Owner;
            }
            return aggregate;
        }
        public IEnumerable<Aggregate> GetDescendants() {
            var children = Members.SelectMany(member => member.GetChildAggregates());
            foreach (var child in children) {
                yield return child;
                foreach (var descendant in child.GetDescendants()) {
                    yield return descendant;
                }
            }
        }
        #endregion リレーション


        #region CodeGenerating
        private UIClass _searchConditionClass;
        private UIClass _searchResultClass;
        private UIClass _instanceClass;

        internal AutoGenerateDbEntityClass ToDbTableModel() {
            // 集約で定義されているカラム
            var pk = Members
                .Where(member => member.IsPrimaryKey)
                .SelectMany(member => member.ToDbColumnModel())
                .ToList();
            var notPk = Members
                .Where(member => !member.IsPrimaryKey)
                .SelectMany(member => member.ToDbColumnModel())
                .ToList();
            // 連番
            if (Parent != null && Parent.IsCollection && pk.Count == 0) {
                pk.Insert(0, new AutoGenerateDbEntityProperty {
                    Virtual = false,
                    CSharpTypeName = "int",
                    PropertyName = $"{Name}_連番",
                    Initializer = null,
                });
            }
            // 親の主キー
            if (Parent != null) {
                pk.InsertRange(0, Parent.Owner.ToDbTableModel().PKColumns);
                // stack overflow
                //_navigationProperties = new() {
                //    new Dto.PropertyTemplate { CSharpTypeName = $"virtual {Parent.Owner.ToDbTableModel().ClassName}", PropertyName = "Parent" },
                //};
            }

            var className = UnderlyingType.GetCustomAttribute<TableAttribute>()?.Name
                ?? UnderlyingType.Name;
            var fullname = Schema.Config.EntityNamespace + "." + className;

            return new AutoGenerateDbEntityClass {
                ClassName = className,
                RuntimeFullName = fullname,
                PKColumns = pk,
                NotPKColumns = notPk,
            };
        }
        internal UIClass SearchConditionModel {
            get {
                if (_searchConditionClass == null) {
                    var className = $"{UnderlyingType.Name}__SearchCondition";
                    var fullname = Schema.Config.MvcModelNamespace + "." + className;
                    var props = Members
                        .SelectMany(m => m.SearchConditionModels, (m, ui) => new { m, ui })
                        .ToList();
                    _searchConditionClass = new UIClass {
                        Source = this,
                        Parent = () => Parent?.InstanceModels.FirstOrDefault(),
                        ClassName = className,
                        RuntimeFullName = fullname,
                        Properties = props.Select(x => x.ui).ToArray(),
                    };
                    foreach (var x in props) {
                        x.ui.Source = x.m;
                        x.ui.Owner = _searchConditionClass;
                    }
                }
                return _searchConditionClass;
            }
        }
        internal UIClass SearchResultModel {
            get {
                if (_searchResultClass == null) {
                    var props = Members
                        .SelectMany(m => m.SearchResultModels, (m, ui) => new { m, ui })
                        .ToList();
                    var className = $"{UnderlyingType.Name}__SearchResult";
                    var fullname = Schema.Config.MvcModelNamespace + "." + className;

                    _searchResultClass = new UIClass {
                        Source = this,
                        Parent = () => Parent?.InstanceModels.FirstOrDefault(),
                        ClassName = className,
                        RuntimeFullName = fullname,
                        Properties = props.Select(x => x.ui).ToArray(),
                    };
                    foreach (var x in props) {
                        x.ui.Source = x.m;
                        x.ui.Owner = _searchResultClass;
                    }
                }
                return _searchResultClass;
            }
        }
        internal UIClass InstanceModel {
            get {
                if (_instanceClass == null) {
                    var className = $"{UnderlyingType.Name}";
                    var fullname = Schema.Config.MvcModelNamespace + "." + className;
                    var props = Members
                        .SelectMany(m => m.InstanceModels, (m, ui) => new { m, ui })
                        .ToList();
                    _instanceClass = new UIClass {
                        Source = this,
                        Parent = () => Parent?.InstanceModels.FirstOrDefault(),
                        ClassName = className,
                        RuntimeFullName = fullname,
                        Properties = props.Select(x => x.ui).ToArray(),
                    };
                    foreach (var x in props) {
                        x.ui.Source = x.m;
                        x.ui.Owner = _instanceClass;
                    }
                }
                return _instanceClass;
            }
        }

        internal string RenderSearchCondition(ViewRenderingContext context) {
            var propViews = Members.Select(x => KeyValuePair.Create(x.Name, x.RenderSearchConditionView(context)));
            var template = new AggregateVerticalViewTemplate {
                Members = propViews,
            };
            return template.TransformText();
        }
        internal string RenderSearchResult(ViewRenderingContext context) {
            var propViews = Members
                .Select(member => member.RenderSearchResultView(context))
                .ToList();
            return string.Join(Environment.NewLine, propViews);
        }
        internal string RenderInstanceView(ViewRenderingContext context) {
            var propViews = Members.Select(x => KeyValuePair.Create(x.Name, x.RenderInstanceView(context)));
            var template = new AggregateVerticalViewTemplate {
                Members = propViews,
            };
            return template.TransformText();
        }
        #endregion CodeGenerating


        #region Runtime

        #endregion Runtime


        public override string ToString() {
            var path = new List<string>();
            var parent = Parent;
            while (parent != null) {
                path.Insert(0, parent.Name);
                parent = parent.Owner.Parent;
            }
            path.Insert(0, GetRoot().Name);
            return $"{nameof(Aggregate)}[{string.Join(".", path)}]";
        }
    }

    partial class AggregateVerticalViewTemplate {
        internal IEnumerable<KeyValuePair<string, string>> Members { get; set; }
    }
}
