using System;
using System.Collections.Generic;
using System.Linq;

namespace HalApplicationBuilder.Core.Members {
    internal class Children : AggregateMemberBase {
        public override bool IsCollection => true;

        private Aggregate _child;
        internal Aggregate ChildAggregate {
            get {
                if (_child == null) {
                    _child = new Aggregate {
                        Schema = Schema,
                        UnderlyingType = UnderlyingPropertyInfo.PropertyType.GetGenericArguments()[0],
                        Parent = this,
                    };
                }
                return _child;
            }
        }

        public override IEnumerable<Aggregate> GetChildAggregates() {
            yield return ChildAggregate;
        }

        internal override IEnumerable<AutoGenerateDbEntityProperty> ToDbColumnModel() {
            yield break;
        }

        protected override IEnumerable<UIProperty> CreateInstanceModels() {
            yield return new UIProperty {
                CSharpTypeName = $"List<{ChildAggregate.InstanceModel.RuntimeFullName}>",
                PropertyName = Name,
                Initializer = "new()",
            };
        }

        protected override IEnumerable<UIProperty> CreateSearchConditionModels() {
            yield break;
        }

        protected override IEnumerable<UIProperty> CreateSearchResultModels() {
            yield break;
        }

        internal override string RenderSearchConditionView(ViewRenderingContext context) {
            return string.Empty;
        }

        internal override string RenderSearchResultView(ViewRenderingContext context) {
            return string.Empty;
        }

        internal override string RenderInstanceView(ViewRenderingContext context) {
            var model = InstanceModels.Single();
            var nested = context.Nest(model.PropertyName, isCollection: true);
            var template = new ChildrenInstanceTemplate {
                i = context.LoopVar,
                Count = $"{nested.CollectionPath}.{nameof(ICollection<object>.Count)}",
                PartialViewName = new AspNetMvc.AggregatePartialView { Aggregate = ChildAggregate }.FileName,
                PartialViewBoundObjectName = nested.AspForPath,
                AspForAddChild = nested.AspForCollectionPath,
            };
            return template.TransformText();
        }
    }

    partial class ChildrenInstanceTemplate {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:命名スタイル", Justification = "<意図して小文字>")]
        internal string i { get; set; }
        internal string Count { get; set; }
        internal string PartialViewName { get; set; }
        internal string PartialViewBoundObjectName { get; set; }
        internal string AspForAddChild { get; set; }

        internal static string AddButtonSenderIdentifier => AspNetMvc.JsTemplate.AGGREGATE_TREE_PATH_ATTR;
        internal static string AddButtonCssClass => AspNetMvc.JsTemplate.ADD_CHILD_BTN;
    }
}
