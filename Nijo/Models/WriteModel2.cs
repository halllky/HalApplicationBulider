using Nijo.Core;
using Nijo.Models.WriteModel2Features;
using Nijo.Models.WriteModel2Features.ForRef;
using Nijo.Parts;
using Nijo.Parts.WebClient;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models {
    /// <summary>
    /// 登録・更新・削除される単位のデータ
    /// </summary>
    internal class WriteModel2 : IModel {
        void IModel.GenerateCode(CodeRenderingContext context, GraphNode<Aggregate> rootAggregate) {
            var allAggregates = rootAggregate.EnumerateThisAndDescendants();

            context.CoreLibrary.UseAggregateFile(rootAggregate, builder => {
                foreach (var agg in allAggregates) {
                    // データ型: EFCore Entity
                    var efCoreEntity = new EFCoreEntity(agg);
                    builder.DataClassDeclaring.Add(efCoreEntity.Render(context));
                    context.CoreLibrary.DbContextOnModelCreating.Add(efCoreEntity.RenderCallingOnModelCreating(context));

                    // データ型: DataClassForSave
                    var dataClassForSave = new DataClassForSave(agg, DataClassForSave.E_Type.UpdateOrDelete);
                    builder.DataClassDeclaring.Add(dataClassForSave.RenderCSharp(context));
                    builder.DataClassDeclaring.Add(dataClassForSave.RenderCSharpErrorStructure(context));
                    builder.DataClassDeclaring.Add(dataClassForSave.RenderCSharpReadOnlyStructure(context));
                    builder.TypeScriptDataTypes.Add(dataClassForSave.RenderTypeScript(context));
                    builder.TypeScriptDataTypes.Add(dataClassForSave.RenderTypeScriptErrorStructure(context));
                    builder.TypeScriptDataTypes.Add(dataClassForSave.RenderTypeScriptReadOnlyStructure(context));

                    // データ型: DataClassForNewItem
                    var dataClassForNewItem = new DataClassForSave(agg, DataClassForSave.E_Type.Create);
                    builder.DataClassDeclaring.Add(dataClassForNewItem.RenderCSharp(context));
                    builder.DataClassDeclaring.Add(dataClassForNewItem.RenderCSharpErrorStructure(context));
                    builder.DataClassDeclaring.Add(dataClassForNewItem.RenderCSharpReadOnlyStructure(context));
                    builder.TypeScriptDataTypes.Add(dataClassForNewItem.RenderTypeScript(context));
                    builder.TypeScriptDataTypes.Add(dataClassForNewItem.RenderTypeScriptErrorStructure(context));
                    builder.TypeScriptDataTypes.Add(dataClassForNewItem.RenderTypeScriptReadOnlyStructure(context));
                }
            });

            context.CoreLibrary.UseAggregateFile(rootAggregate, builder => {
                // 処理: 新規作成処理 AppSrv
                // 処理: 更新処理 AppSrv
                // 処理: 削除処理 AppSrv
                var create = new CreateMethod(rootAggregate);
                var update = new UpdateMethod(rootAggregate);
                var delete = new DeleteMethod(rootAggregate);
                builder.AppServiceMethods.Add(create.Render(context));
                builder.AppServiceMethods.Add(update.Render(context));
                builder.AppServiceMethods.Add(delete.Render(context));

                // 処理: SetReadOnly AppSrv
                var setReadOnly = new SetReadOnly(rootAggregate);
                builder.AppServiceMethods.Add(setReadOnly.Render(context));
            });

            // ---------------------------------------------
            // 他の集約から参照されるときのための部品

            context.CoreLibrary.UseAggregateFile(rootAggregate, builder => {
                foreach (var agg in allAggregates) {
                    // データ型
                    var forSave = new DataClassForSaveRefTarget(agg);
                    var forDisplay = new DataClassForDisplayRefTarget(agg);
                    builder.DataClassDeclaring.Add(forSave.RenderCSharp(context));
                    builder.DataClassDeclaring.Add(forDisplay.RenderCSharp(context));
                    builder.TypeScriptDataTypes.Add(forSave.RenderTypeScript(context));
                    builder.TypeScriptDataTypes.Add(forDisplay.RenderTypeScript(context));

                    // UI: コンボボックス
                    // UI: 検索ダイアログ
                    var comboBox = new SearchComboBox(agg);
                    var searchDialog = new SearchDialog(agg);
                    context.ReactProject.AutoGeneratedInput.Add(comboBox.Render(context));
                    context.ReactProject.AutoGeneratedInput.Add(searchDialog.Render(context));

                    // 処理: 参照先検索
                    var searchRef = new SearchRefMethod(agg);
                    context.ReactProject.AutoGeneratedHook.Add(searchRef.HookName, searchRef.RenderHook(context));
                    builder.ControllerActions.Add(searchRef.RenderController(context));
                    builder.AppServiceMethods.Add(searchRef.RenderAppSrvMethod(context));
                }
            });
        }

        void IModel.GenerateCode(CodeRenderingContext context) {

            // 1つのファイルに複数のクラス等がレンダリングされるもの
            context.CoreLibrary.AutoGeneratedDir(genDir => {
                foreach (var aggFile in context.CoreLibrary._itemsByAggregate.Values) {
                    genDir.Generate(aggFile.RenderCoreLibrary());
                }
            });
            context.WebApiProject.AutoGeneratedDir(genDir => {
                foreach (var aggFile in context.CoreLibrary._itemsByAggregate.Values) {
                    genDir.Generate(aggFile.RenderWebApi());
                }
            });
            context.ReactProject.AutoGeneratedDir(reactDir => {
                reactDir.Generate(TypesTsx.Render(context, context.CoreLibrary._itemsByAggregate.Select(x => KeyValuePair.Create(x.Key, x.Value.TypeScriptDataTypes))));

                reactDir.Directory(ReactProject.INPUT, userInputDir => {
                    // TODO: コンボボックス
                });
            });
            context.ReactProject.UtilDir(reactUtilDir => {
                reactUtilDir.Generate(NavigationWrapper.Render());
            });
            context.ReactProject.PagesDir(pageDir => {
                foreach (var group in context.ReactProject.ReactPages.GroupBy(p => p.DirNameInPageDir)) {
                    pageDir.Directory(group.Key, aggregatePageDir => {
                        foreach (var page in group) {
                            aggregatePageDir.Generate(page.GetSourceFile());
                        }
                    });
                }
            });

            // 列挙体
            DataClassForSave.RenderAddModDelEnum(); // TODO #35

            // データ型: 一括コミット コンテキスト引数
            var batchUpdateContext = new BatchUpdateContext();
            context.CoreLibrary.UtilDir(utilDir => {
                utilDir.Generate(batchUpdateContext.Render());
            });

            // 処理: 一括コミット
            // 処理: 一括コミット AppSrv
            var batchUpdate = new BatchUpdate();
            context.ReactProject.AutoGeneratedHook.Add(batchUpdate.HookName, batchUpdate.RenderHook(context));
            context.WebApiProject.ControllerDir(dir => {
                dir.Generate(batchUpdate.RenderController());
            });
            context.CoreLibrary.AppSrvMethods.Add(batchUpdate.RenderAppSrvMethod(context));

            // 処理: デバッグ用ダミーデータ作成関数
            var dummyDataGenerator = new DummyDataGenerator();
            context.ReactProject.UtilDir(utilDir => {
                utilDir.Generate(dummyDataGenerator.Render());
            });
        }
    }
}
