using Nijo.Models.WriteModel2Features;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models {
    internal class DynamicEnum {

        internal const string CSHARP_UTIL_CLASS = "区分マスタUtil";

        internal const string TYPE_PROP_NAME = "種類";
        internal const string VALUE_PROP_NAME = "値CD";
        internal const string DISPLAY_NAME_PROP_NAME = "画面表示名称";

        internal static void GenerateSourceCode(CodeRenderingContext ctx) {

            // 区分マスタが無いならレンダリングしない
            if (!ctx.Schema.RootAggregates().Any(agg => agg.Item.Options.IsDynamicEnumWriteModel)) return;

            // staticな色々を定義する。これらはカスタマイズ処理で使われる。
            ctx.CoreLibrary.AutoGeneratedDir(dir => {
                dir.Generate(RenderCSharp());
            });
            ctx.ReactProject.Types.Add(RenderTypeScript(ctx));
        }

        private static SourceFile RenderCSharp() {
            return new SourceFile {
                FileName = $"{CSHARP_UTIL_CLASS}.cs",
                RenderContent = ctx => {
                    var writeModel = ctx.Schema.GetDynamicEnumWriteModel()!;
                    var efCoreEntity = new EFCoreEntity(writeModel);

                    return $$"""
                        namespace {{ctx.Config.RootNamespace}};

                        public class {{CSHARP_UTIL_CLASS}} {
                            public {{CSHARP_UTIL_CLASS}}({{ctx.Config.DbContextName}} dbContext) {
                                _dbContext = dbContext;

                        {{ctx.Schema.DynamicEnumTypeInfo.SelectTextTemplate(info => $$"""
                                {{info.PhysicalName}} = new("{{info.TypeKey}}", dbContext);
                        """)}}
                            }
                            private readonly {{ctx.Config.DbContextName}} _dbContext;

                        {{ctx.Schema.DynamicEnumTypeInfo.SelectTextTemplate(info => $$"""
                            public DynamicEnumType {{info.PhysicalName}} { get; }
                        """)}}
                        }

                        public class DynamicEnumType {
                            public DynamicEnumType(string key, {{ctx.Config.DbContextName}} dbContext) {
                                _dbContext = dbContext;
                                Key = key;
                            }

                            private readonly {{ctx.Config.DbContextName}} _dbContext;

                            /// <summary>
                            /// 種類
                            /// </summary>
                            public string Key { get; }

                            /// <summary>
                            /// 値と画面表示名称のペア
                            /// </summary>
                            public IReadOnlyDictionary<string, string> Values => _cache ??= _dbContext.{{efCoreEntity.DbSetName}}
                                .Where(x => x.{{TYPE_PROP_NAME}} == Key)
                                .ToDictionary(x => x.{{VALUE_PROP_NAME}}!, x => x.{{DISPLAY_NAME_PROP_NAME}} ?? string.Empty);
                            private IReadOnlyDictionary<string, string>? _cache;
                        }
                        """;
                },
            };
        }

        private static string RenderTypeScript(CodeRenderingContext ctx) {
            return $$"""
                /** 区分マスタの種類名 */
                export type 区分マスタType
                {{ctx.Schema.DynamicEnumTypeInfo.SelectTextTemplate((x, i) => $$"""
                  {{(i == 0 ? "=" : "|")}} '{{x.PhysicalName}}'
                """)}}
                """;
        }
    }
}
