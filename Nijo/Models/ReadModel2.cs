using Nijo.Core;
using Nijo.Models.ReadModel2Features;
using Nijo.Parts.WebServer;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models {
    /// <summary>
    /// 画面表示されるデータ型
    /// </summary>
    internal class ReadModel2 : IModel {
        void IModel.GenerateCode(CodeRenderingContext context, GraphNode<Aggregate> rootAggregate) {
            var aggregateFile = context.CoreLibrary.UseAggregateFile(rootAggregate);

            foreach (var agg in rootAggregate.EnumerateThisAndDescendants()) {
                // データ型: 検索条件クラス
                var condition = new SearchCondition(agg);
                aggregateFile.DataClassDeclaring.Add(condition.RenderCSharpDeclaring(context));
                context.ReactProject.Types.Add(agg, condition.RenderTypeScriptDeclaring(context));

                // データ型: ビュークラス
                var displayData = new DataClassForDisplay(agg);
                aggregateFile.DataClassDeclaring.Add(displayData.RenderCSharpDeclaring(context));
                context.ReactProject.Types.Add(agg, displayData.RenderTypeScriptDeclaring(context));
            }

            // 処理: 検索処理
            var load = new LoadMethod(rootAggregate);
            context.ReactProject.AutoGeneratedHook.Add(load.RenderReactHook(context));
            aggregateFile.ControllerActions.Add(load.RenderControllerAction(context));
            aggregateFile.AppServiceMethods.Add(load.RenderAppSrvAbstractMethod(context));
            aggregateFile.AppServiceMethods.Add(load.RenderAppSrvBaseMethod(context));

            // 処理: 一括更新処理
            context.UseSummarizedFile<BatchUpdateDisplayData>().Register(rootAggregate);

            // UI: MultiView
            var multiView = new MultiView(rootAggregate);
            context.ReactProject.Pages.Add(multiView);

            // UI: SingleView
            var createView = new SingleView(rootAggregate, SingleView.E_Type.New);
            var readOnlyView = new SingleView(rootAggregate, SingleView.E_Type.ReadOnly);
            var editView = new SingleView(rootAggregate, SingleView.E_Type.Edit);
            context.ReactProject.Pages.Add(createView);
            context.ReactProject.Pages.Add(readOnlyView);
            context.ReactProject.Pages.Add(editView);

            // UI: ナビゲーション用関数
            context.ReactProject.UrlUtil.Add(rootAggregate);
        }

        void IModel.GenerateCode(CodeRenderingContext context) {

            // ユーティリティクラス等
            context.CoreLibrary.UtilDir(dir => {
                dir.Generate(MessageContainer.RenderCSharp());
                dir.Generate(ReadOnlyInfo.RenderCSharp());
            });
        }
    }
}
