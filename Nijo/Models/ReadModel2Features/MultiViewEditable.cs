using Nijo.Core;
using Nijo.Models.WriteModel2Features;
using Nijo.Parts.WebClient;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models.ReadModel2Features {
    /// <summary>
    /// 一括編集画面
    /// </summary>
    internal class MultiViewEditable : IReactPage {
        internal MultiViewEditable(GraphNode<Aggregate> rootAggregate) {
            _rootAggregate = rootAggregate;
        }
        private readonly GraphNode<Aggregate> _rootAggregate;

        public string Url => $"/{_rootAggregate.Item.UniqueId}/multi-edit";
        public string DirNameInPageDir => _rootAggregate.Item.DisplayName.ToFileNameSafe();
        public string ComponentPhysicalName => $"{_rootAggregate.Item.PhysicalName}MultiViewEditable";
        public bool ShowMenu => false;
        public string? LabelInMenu => null;

        public SourceFile GetSourceFile() => new() {
            FileName = "multi-view-editable.tsx",
            RenderContent = ctx => {
                var dataClass = new DataClassForDisplay(_rootAggregate);
                var searchCondition = new SearchCondition(_rootAggregate);
                var loadMethod = new LoadMethod(_rootAggregate);
                var tableBuilder = new Parts.WebClient.DataTable.DataTableBuilder(_rootAggregate, $"AggregateType.{dataClass.TsTypeName}", false)
                    // 行ヘッダ（列の状態）
                    .Add(new Parts.WebClient.DataTable.AdhocColumn {
                        Header = string.Empty,
                        DefaultWidth = 48,
                        EnableResizing = false,
                        CellContents = (ctx, arg, argRowObject) => $$"""
                            {{arg}} => {
                              // 追加・更新・削除 の別を表示する
                              const row = {{argRowObject}}
                              const state = AggregateType.{{DataClassForSaveBase.GET_ADD_MOD_DEL_ENUM_TS}}(row)
                              return (
                                <Layout.AddModDelStateCell state={state} />
                              )
                            }
                            """,
                })
                // メンバーの列
                .AddMembers(dataClass);

                var rootAggregateComponent = new MultiViewEditableAggregateComponent(_rootAggregate);

                return $$"""
                    import React, { useState, useContext } from 'react'
                    import useEvent from 'react-use-event-hook'
                    import { useLocation } from 'react-router-dom'
                    import { useFieldArray, FormProvider, useWatch } from 'react-hook-form'
                    import * as Icon from '@heroicons/react/24/outline'
                    import { Panel, PanelGroup, PanelResizeHandle, ImperativePanelHandle } from 'react-resizable-panels'
                    import * as Layout from '../../collection'
                    import * as Input from '../../input'
                    import * as Util from '../../util'
                    import * as AggregateType from '../../autogenerated-types'
                    import * as AggregateHook from '../../autogenerated-hooks'
                    import * as AggregateComponent from '../../autogenerated-components'
                    import { {{AutoGeneratedCustomizer.USE_CONTEXT}} } from '../../autogenerated-customizer'
                    const VForm2 = Layout.VForm2

                    export default function () {
                      // 画面初期表示時データ読み込み
                      const [pageState, setPageState] = React.useState<'init' | 'loading' | 'loaded'>('init')
                      const { search: locationSerach } = useLocation()
                      const { {{LoadMethod.LOAD}}, {{LoadMethod.CURRENT_PAGE_ITEMS}} } = AggregateHook.{{loadMethod.ReactHookName}}()
                      React.useEffect(() => {
                        setPageState('loading')
                        const condition = AggregateType.{{searchCondition.ParseQueryParameter}}(locationSerach)
                        {{LoadMethod.LOAD}}(condition).then(() => {
                          setPageState('loaded')
                        })
                      }, [locationSerach])

                      return pageState === 'loaded' ? (
                        <AfterLoaded data={{{LoadMethod.CURRENT_PAGE_ITEMS}}} />
                      ) : (
                        <Input.NowLoading />
                      )
                    }

                    const AfterLoaded = ({ data }: {
                      data: AggregateType.{{dataClass.TsTypeName}}[]
                    }) => {
                      const tableRef = React.useRef<Layout.DataTableRef<AggregateType.{{dataClass.TsTypeName}}>>(null)

                      // 編集中データ
                      const reactHookFormMethods = Util.useFormEx<{ data: AggregateType.{{dataClass.TsTypeName}}[] }>({ defaultValues: { data } })
                      const { insert, remove } = useFieldArray({ name: 'data', control: reactHookFormMethods.control })
                      const fields = useWatch({ name: 'data', control: reactHookFormMethods.control })

                      // 詳細部分のレイアウト
                      const [singleViewPosition, setSingleViewPosition] = React.useState<'horizontal' | 'vertical'>('horizontal')
                      const [singleViewCollapsed, setSingleViewCollapsed] = React.useState(false)
                      const resizerCssClass = React.useMemo(() => {
                        return singleViewPosition === 'horizontal' ? 'w-2' : 'h-2'
                      }, [singleViewPosition])
                      const singleViewRef = React.useRef<ImperativePanelHandle>(null)
                      const handleClickHorizontal = useEvent(() => {
                        setSingleViewPosition('horizontal')
                        singleViewRef.current?.expand()
                      })
                      const handleClickVertical = useEvent(() => {
                        setSingleViewPosition('vertical')
                        singleViewRef.current?.expand()
                      })
                      const handleClickCollapse = useEvent(() => {
                        singleViewRef.current?.collapse()
                      })

                      // 列定義
                      const columnDefs = React.useMemo((): Layout.ColumnDefEx<AggregateType.{{dataClass.TsTypeName}}>[] => [
                        {{WithIndent(tableBuilder.RenderColumnDef(ctx), "    ")}}
                      ], [])

                      // 選択されている行
                      const [activeRowIndex, setActiveRowIndex] = useState<number | undefined>(undefined)
                      const { debouncedValue: debouncedActiveRowIndex, debouncing } = Util.useDebounce(activeRowIndex, 300)
                      const handleActiveRowChanged = useEvent((e: { getRow: () => AggregateType.{{dataClass.TsTypeName}}, rowIndex: number } | undefined) => {
                        setActiveRowIndex(e?.rowIndex)
                      })

                      // 行追加
                      const handleInsert = useEvent(() => {
                        insert(activeRowIndex ?? 0, AggregateType.{{dataClass.TsNewObjectFunction}}())
                      })

                      // 行削除
                      const handleRemove = useEvent(() => {
                        if (!tableRef.current) return
                        const removeIndexes: number[] = []
                        for (const x of tableRef.current.getSelectedRows()) {
                          const state = AggregateType.{{DataClassForSaveBase.GET_ADD_MOD_DEL_ENUM_TS}}(x.row)
                          if (state === 'ADD') {
                            removeIndexes.push(x.rowIndex)
                          } else {
                            reactHookFormMethods.setValue(`data.${x.rowIndex}.{{DataClassForDisplay.WILL_BE_DELETED_TS}}`, true)
                          }
                        }
                        remove(removeIndexes)
                      })

                      // リセット
                      const handleReset = useEvent(() => {
                        if (!confirm('選択されている行の変更を元に戻しますか？')) return
                        alert('TODO #43 リセット処理未実装')
                      })

                      return (
                        <FormProvider {...reactHookFormMethods}>
                          <Layout.PageFrame
                            header={<>
                              <Layout.PageTitle>{{_rootAggregate.Item.DisplayName}}&nbsp;一括編集</Layout.PageTitle>
                              <Input.IconButton onClick={handleInsert} outline mini>追加</Input.IconButton>
                              <Input.IconButton onClick={handleRemove} outline mini>削除</Input.IconButton>
                              <Input.IconButton onClick={handleReset} outline mini>リセット</Input.IconButton>
                              <div className="flex-1"></div>
                              <div className="self-stretch flex gap-1 border border-color-4">
                                <Input.IconButton icon={Icon.ArrowsRightLeftIcon} hideText className="p-2" onClick={handleClickHorizontal} fill={!singleViewCollapsed && singleViewPosition === 'horizontal'}>左右に並べる</Input.IconButton>
                                <Input.IconButton icon={Icon.ArrowsUpDownIcon} hideText className="p-2" onClick={handleClickVertical} fill={!singleViewCollapsed && singleViewPosition === 'vertical'}>上下に並べる</Input.IconButton>
                                <Input.IconButton icon={Icon.ArrowsPointingOutIcon} hideText className="p-2" onClick={handleClickCollapse} fill={singleViewCollapsed}>一覧のみ表示</Input.IconButton>
                              </div>
                              <div className="basis-4"></div>
                              <Input.IconButton fill>保存</Input.IconButton>
                            </>}
                          >
                            <PanelGroup direction={singleViewPosition}>

                              {/* 一覧欄 */}
                              <Panel className="border border-color-4">
                                <Layout.DataTable
                                  ref={tableRef}
                                  data={fields}
                                  columns={columnDefs}
                                  onActiveRowChanged={handleActiveRowChanged}
                                  className="h-full"
                                />
                              </Panel>

                              <PanelResizeHandle className={resizerCssClass} />

                              {/* 詳細欄 */}
                              <Panel
                                ref={singleViewRef}
                                collapsible
                                onCollapse={setSingleViewCollapsed}
                                className="relative border border-color-4"
                              >
                                {!singleViewCollapsed && debouncedActiveRowIndex !== undefined && (
                                  {{WithIndent(rootAggregateComponent.RenderCaller(["debouncedActiveRowIndex"]), "              ")}}
                                )}
                                {debouncing && (
                                  <Input.NowLoading />
                                )}
                              </Panel>
                            </PanelGroup>
                          </Layout.PageFrame>
                        </FormProvider>
                      )
                    }

                    {{rootAggregateComponent.EnumerateThisAndDescendantsRecursively().SelectTextTemplate(component => $$"""

                    {{component.RenderDeclaring(ctx)}}
                    """)}}
                    """;
            },
        };

        internal string NavigationHookName => $"useNavigateTo{_rootAggregate.Item.PhysicalName}MultiViewEditable";

        internal string RenderNavigationHook(CodeRenderingContext context) {
            var searchCondition = new SearchCondition(_rootAggregate);
            return $$"""
                /** {{_rootAggregate.Item.DisplayName}}の一括編集画面へ遷移します。初期表示時検索条件を指定することができます。 */
                export const {{NavigationHookName}} = () => {
                  const navigate = ReactRouter.useNavigate()

                  /** {{_rootAggregate.Item.DisplayName}}の一括編集画面へ遷移します。初期表示時検索条件を指定することができます。 */
                  return React.useCallback((init: Types.{{searchCondition.TsTypeName}}) => {
                    // 初期表示時検索条件の設定
                    const searchParams = new URLSearchParams()
                    searchParams.append('{{SearchCondition.URL_FILTER}}', JSON.stringify(init.{{SearchCondition.FILTER_TS}}))
                    if (init.{{SearchCondition.KEYWORD_TS}}) searchParams.append('{{SearchCondition.URL_KEYWORD}}', init.{{SearchCondition.KEYWORD_TS}})
                    if (init.{{SearchCondition.SORT_TS}}.length > 0) searchParams.append('{{SearchCondition.URL_SORT}}', JSON.stringify(init.{{SearchCondition.SORT_TS}}))

                    navigate({
                      pathname: '{{Url}}',
                      search: searchParams.toString(),
                    })
                  }, [navigate])
                }
                """;
        }

    }
}
