using Nijo.Core;
using Nijo.Core.AggregateMemberTypes;
using Nijo.Models.RefTo;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Nijo.Core.AggregateMember;

namespace Nijo.Models.WriteModel2Features {
    /// <summary>
    /// デバッグ用ダミーデータ作成関数
    /// </summary>
    internal class DummyDataGenerator : ISummarizedFile {
        private const int DATA_COUNT = 4;

        private readonly List<GraphNode<Aggregate>> _aggregates = new();

        internal void Add(GraphNode<Aggregate> aggregate) {
            _aggregates.Add(aggregate);
        }

        void ISummarizedFile.OnEndGenerating(CodeRenderingContext context) {
            context.CoreLibrary.UtilDir(dir => {
                dir.Generate(RenderAppSrv());
            });

            context.ReactProject.UtilDir(utilDir => {
                utilDir.Generate(RenderTemporary());
            });
        }

        private static SourceFile RenderTemporary() => new SourceFile {
            FileName = "useDummyDataGenerator2.ts",
            RenderContent = ctx => {
                // #71
                // ダミーデータ作成処理でしか使わないソースコードが増えてきており、
                // ダミーデータ作成処理の品質が安定しないため、いったん無効化している。
                return $$"""
                    import React from 'react'
                    import * as Util from '../util'

                    export const useDummyDataGenerator2 = () => {
                      const [, dispatchMsg] = Util.useMsgContext()

                      return React.useCallback(async () => {
                        dispatchMsg(msg => msg.warn(`ダミーデータ作成処理の品質が安定しないため、無効化しています。Issue #71 の解消をお待ちください。`))
                        return false
                      }, [])
                    }
                    """;
            }
        };

        private SourceFile Render() => new SourceFile {
            FileName = "useDummyDataGenerator2.ts",
            RenderContent = ctx => {
                var random = new Random(0);
                var ordered = _aggregates
                    .OrderByDataFlow();
                var refSearchHooks = _aggregates
                    .SelectMany(agg => agg.EnumerateThisAndDescendants())
                    .Where(agg => ctx.Config.GenerateUnusedRefToModules || agg.GetReferedEdges().Any())
                    .Select(agg => new RefSearchHookTemp(agg));

                return $$"""
                    import { useCallback } from 'react'
                    import * as AggregateType from '../autogenerated-types'
                    import * as AggregateHook from '../autogenerated-hooks'
                    import * as RefTo from '../ref-to'

                    export const useDummyDataGenerator2 = () => {
                      const batchUpdateWriteModels = AggregateHook.{{BatchUpdateWriteModel.HOOK_NAME}}()
                    {{refSearchHooks.SelectTextTemplate(x => $$"""
                      const { {{RefSearchMethod.LOAD}}: {{x.Load}} } = RefTo.{{x.Hook}}(true)
                    """)}}

                      return useCallback(async () => {

                    {{ordered.SelectTextTemplate(x => $$"""
                        {{WithIndent(RenderAggregate(x, random, ctx), "    ")}}

                    """)}}
                        return true
                      }, [
                        batchUpdateWriteModels,
                    {{refSearchHooks.SelectTextTemplate(x => $$"""
                        {{x.Load}},
                    """)}}
                      ])
                    }
                    """;
            },
        };

        private SourceFile RenderAppSrv() {
            return new SourceFile {
                FileName = "DummyDataGenerating.cs",
                RenderContent = ctx => {
                    var appsrv = new Parts.WebServer.ApplicationService();

                    return $$"""
                        #if DEBUG

                        namespace {{ctx.Config.RootNamespace}};

                        partial class {{appsrv.AbstractClassName}} {

                            /// <summary>
                            /// デバッグ用のダミーデータを作成します。
                            /// データベースはいずれのテーブルも空の前提です。
                            /// </summary>
                            /// <param name="count">
                            /// 作成するデータの数（集約単位）。
                            /// なお実装上の都合によりいずれの集約も明細は1件ずつしか作成されません。
                            /// </param>
                            public virtual void GenerateDummyData(int count) {
                                if (count <= 0) throw new ArgumentOutOfRangeException();

                                BatchUpdateState saveResult;
                                var ctx = new DummyDataGeneratorContext(DbContext) {
                                    Random = new Random(0),
                                    GenerateCount = count,
                                    SaveOptions = new SaveOptions {
                                        IgnoreConfirm = true,
                                    },
                                };

                                // --------------------------------------------------
                                // データの流れの上流（参照される方）から順番にダミーデータを作成する
                        {{_aggregates.OrderByDataFlow().SelectTextTemplate(agg => $$"""

                                // {{agg.Item.DisplayName}}
                                saveResult = GenerateDummyDataOf{{agg.Item.PhysicalName}}(ctx);
                                if (saveResult.HasError()) {
                                    throw new InvalidOperationException($"{{agg.Item.DisplayName.Replace("\"", "\\\"")}}のダミーデータ作成でエラーが発生しました: {saveResult.GetErrorDataJson().ToJson()}");
                                }
                        """)}}
                            }

                        {{_aggregates.SelectTextTemplate(agg => $$"""
                            {{WithIndent(RenderAggregate(agg), "    ")}}
                        """)}}
                        }

                        {{WithIndent(RenderDummyDataGenerateContext(ctx), "")}}

                        #endif
                        """;
                },
            };
        }

        private string RenderAggregate(GraphNode<Aggregate> rootAggregate) {
            var createData = new DataClassForSave(rootAggregate, DataClassForSave.E_Type.Create);
            var refTo = rootAggregate
                .EnumerateThisAndDescendants()
                .SelectMany(agg => agg.GetMembers().OfType<AggregateMember.Ref>())
                .Distinct();

            return $$"""
                /// <summary>
                /// {{rootAggregate.Item.DisplayName}} のデバッグ用ダミーデータを作成します。
                /// </summary>
                protected virtual BatchUpdateState GenerateDummyDataOf{{rootAggregate.Item.PhysicalName}}(DummyDataGeneratorContext ctx) {
                    var data = Enumerable
                        .Range(0, ctx.GenerateCount)
                        .Select(i => new CreateCommand<{{createData.CsClassName}}> {
                            Values = new {{createData.CsClassName}} {
                                {{WithIndent(RenderMembers(createData), "                ")}}
                            },
                        })
                        .ToArray();
                    return BatchUpdateWriteModels(data, ctx.SaveOptions);
                }
                """;

            IEnumerable<string> RenderMembers(DataClassForSave createData) {

                // 文字列系の項目のダミーデータに使われる文字列
                const string RANDOM_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}\\\"|;:,.<>?";
                var RANDOM_CHARS_LENGTH = RANDOM_CHARS.Length;

                foreach (var member in createData.GetOwnMembers()) {
                    if (member is AggregateMember.ValueMember vm) {

                        var dummyValue = vm.Options.MemberType switch {
                            Core.AggregateMemberTypes.Boolean => "ctx.Random.Next(0, 1) == 0",
                            EnumList enumList => $$"""
                                new[] { {{enumList.Definition.Items.Select(x => $"{enumList.GetCSharpTypeName()}.{x.PhysicalName}").Join(", ")}} }[ctx.Random.Next(0, {{enumList.Definition.Items.Count - 1}})]
                                """,
                            Integer => $"ctx.Random.Next(0, 999999)",
                            Numeric => $"ctx.Random.Next(0, 999999) / 7m",
                            Sentence => $$"""
                                string.Concat(Enumerable
                                    .Range(0, ctx.Random.Next(0, {{vm.Options.MaxLength ?? 40}}))
                                    .Select(_ => ctx.Random.Next(10) == 0 ? Environment.NewLine : new string("{{RANDOM_CHARS}}"[ctx.Random.Next(0, {{RANDOM_CHARS_LENGTH - 1}})], 1)))
                                """,
                            Year => $"ctx.Random.Next(1990, 2040)",
                            YearMonth => $$"""
                                new {{Parts.WebServer.RuntimeYearMonthClass.CLASS_NAME}}(ctx.Random.Next(1900, 9999), ctx.Random.Next(1, 12))
                                """,
                            YearMonthDay => $$"""
                                new {{Parts.WebServer.RuntimeDateClass.CLASS_NAME}}(ctx.Random.Next(1900, 9999), ctx.Random.Next(1, 12), ctx.Random.Next(1, 28))
                                """,
                            YearMonthDayTime => $$"""
                                new DateTime((long)ctx.Random.Next(999999))
                                """,
                            Uuid => null, // 自動生成されるので
                            VariationSwitch => null, // Variationの分岐で処理済み
                            Word => $$"""
                                string.Concat(Enumerable.Range(0, {{vm.Options.MaxLength ?? 40}}).Select(_ => "{{RANDOM_CHARS}}"[ctx.Random.Next(0, {{RANDOM_CHARS_LENGTH - 1}})]))
                                """,
                            ValueObjectMember vo => $$"""
                                ({{vo.GetCSharpTypeName()}}?)string.Concat(Enumerable.Range(0, {{vm.Options.MaxLength ?? 40}}).Select(_ => "{{RANDOM_CHARS}}"[ctx.Random.Next(0, {{RANDOM_CHARS_LENGTH - 1}})]))
                                """,
                            _ => null, // 未定義
                        };
                        if (dummyValue != null) {
                            yield return $$"""
                                {{member.MemberName}} = {{dummyValue}},
                                """;
                        }

                    } else if (member is AggregateMember.Children children) {

                        // 主キーにref-toが含まれる場合、
                        // 参照先のデータの数よりもこの集約のデータの数の方が多いとき
                        // どう足掻いても登録エラーになるので明細の数は1件しか作成できない
                        var containsRefInPk = children.ChildrenAggregate
                            .EnumerateThisAndDescendants()
                            .Any(agg => agg.GetKeys().Any(m => m is AggregateMember.Ref));

                        var childrenClass = new DataClassForSave(children.ChildrenAggregate, DataClassForSave.E_Type.Create);
                        var childrenCount = containsRefInPk
                            ? "1"
                            : "ctx.Random.Next(20, 50)";

                        yield return $$"""
                            {{member.MemberName}} = Enumerable.Range(0, {{childrenCount}}).Select(i => new {{childrenClass.CsClassName}} {
                                {{WithIndent(RenderMembers(childrenClass), "    ")}}
                            }).ToList(),
                            """;

                    } else if (member is AggregateMember.Ref @ref) {
                        var refTargetKey = new DataClassForRefTargetKeys(@ref.RefTo, @ref.RefTo);

                        yield return $$"""
                            {{member.MemberName}} = ctx.GetRefTargetKeyOf<{{refTargetKey.CsClassName}}>(i),
                            """;

                    } else if (member is AggregateMember.RelationMember rm) {
                        var childrenClass = new DataClassForSave(rm.MemberAggregate, DataClassForSave.E_Type.Create);
                        yield return $$"""
                            {{member.MemberName}} = new() {
                                {{WithIndent(RenderMembers(childrenClass), "    ")}}
                            },
                            """;

                    } else {
                        throw new NotImplementedException();
                    }
                }
            }
        }

        private string RenderDummyDataGenerateContext(CodeRenderingContext ctx) {
            // ほかの集約から参照される集約
            var referableAggregates = _aggregates
                .SelectMany(agg => agg.EnumerateThisAndDescendants())
                .Where(agg => agg.GetReferedEdges().Any());

            return $$"""
                /// <summary>
                /// デバッグ用のダミーデータ作成処理のみで使われる情報
                /// </summary>
                public class DummyDataGeneratorContext {
                    public DummyDataGeneratorContext({{ctx.Config.DbContextName}} dbContext) {
                        _dbContext = dbContext;
                    }

                    private readonly {{ctx.Config.DbContextName}} _dbContext;

                    public required int GenerateCount { get; init; }
                    public required Random Random { get; init; }
                    public required SaveOptions SaveOptions { get; init; }

                    /// <summary>
                    /// 外部参照のキーを取得する。
                    /// これの都合上、ダミーデータの作成はデータの流れの順番に実行される必要がある。
                    /// </summary>
                    public TRefTargetKey GetRefTargetKeyOf<TRefTargetKey>(int index) {
                        if (!_refTargetKeysCache.TryGetValue(typeof(TRefTargetKey), out var keys)) {
                #pragma warning disable CS8602
                {{referableAggregates.SelectTextTemplate(agg => $$"""
                            {{WithIndent(RenderRefToLoading(agg), "            ")}}
                """)}}
                #pragma warning restore CS8602
                            if (keys == null) {
                                throw new InvalidOperationException($"{typeof(TRefTargetKey).Name}型には外部参照先のキーの型を指定してください。");
                            }
                        }
                        return (TRefTargetKey)keys[index];
                    }
                    private readonly Dictionary<Type, object[]> _refTargetKeysCache = [];
                }
                """;

            string RenderRefToLoading(GraphNode<Aggregate> aggregate) {
                var asEntry = aggregate.AsEntry();
                var entity = new EFCoreEntity(asEntry);
                var refTargetKey = new DataClassForRefTargetKeys(asEntry, asEntry);
                var orderBy = asEntry
                    .GetKeys()
                    .OfType<AggregateMember.ValueMember>();

                return $$"""
                    if (typeof(TRefTargetKey) == typeof({{refTargetKey.CsClassName}})) {
                        keys = _dbContext.{{entity.DbSetName}}
                    {{orderBy.SelectTextTemplate((vm, i) => i == 0 ? $$"""
                            .OrderBy(e => e.{{vm.Declared.GetFullPathAsDbEntity().Join(".")}})    
                    """ : $$"""
                            .ThenBy(e => e.{{vm.Declared.GetFullPathAsDbEntity().Join(".")}})
                    """)}}
                            .Select(e => new {{refTargetKey.CsClassName}} {
                                {{WithIndent(RenderMembers(refTargetKey), "            ")}}
                            })
                            .Cast<object>()
                            .ToArray();
                        _refTargetKeysCache[typeof({{refTargetKey.CsClassName}})] = keys;
                    }
                    """;

                IEnumerable<string> RenderMembers(DataClassForRefTargetKeys refTargetKey) {
                    foreach (var key in refTargetKey.GetValueMembers()) {
                        yield return $$"""
                            {{key.MemberName}} = e.{{key.Member.Declared.GetFullPathAsDbEntity(since: aggregate).Join(".")}},
                            """;
                    }
                    foreach (var rm in refTargetKey.GetRelationMembers()) {
                        yield return $$"""
                            {{rm.MemberName}} = new() {
                                {{WithIndent(RenderMembers(rm), "    ")}}
                            },
                            """;
                    }
                }
            }
        }

        private static string RenderAggregate(GraphNode<Aggregate> rootAggregate, Random random, CodeRenderingContext ctx) {
            var descendants = rootAggregate.EnumerateDescendants();
            var instanceList = Enumerable
                .Range(0, DATA_COUNT)
                .Select(_ => $"data{random.Next(99999999):00000000}")
                .ToArray();
            var forSave = new DataClassForSave(rootAggregate, DataClassForSave.E_Type.Create);
            var response = $"response{random.Next(99999999):00000000}";

            return $$"""
                // ----------------------- {{rootAggregate.Item.DisplayName}}のダミーデータ作成 -----------------------
                {{instanceList.SelectTextTemplate(instance => $$"""
                const {{instance}} = AggregateType.{{forSave.TsNewObjectFnName}}()
                """)}}

                {{rootAggregate.GetMembers().Where(m => m.DeclaringAggregate == rootAggregate).SelectTextTemplate(member => $$"""
                {{instanceList.SelectTextTemplate((instance, index) => $$"""
                {{SetDummyValue(member, instance, index)}}
                """)}}
                """)}}

                {{descendants.SelectTextTemplate(agg => $$"""
                {{If(agg.IsChildrenMember(), () => $$"""
                {{instanceList.SelectTextTemplate(instance => $$"""
                {{instance}}.{{ObjectPath(agg).Join(".")}} = {{NewObject(agg)}}
                """)}}
                """)}}
                {{agg.GetMembers().Where(m => m.DeclaringAggregate == agg).SelectTextTemplate(member => $$"""
                {{instanceList.SelectTextTemplate((instance, index) => $$"""
                {{SetDummyValue(member, instance, index)}}
                """)}}
                """)}}

                """)}}
                const {{response}} = await batchUpdateWriteModels([{{instanceList.Join(", ")}}].map(data => ({
                  {{DataClassForSaveBase.DATA_TYPE_TS}}: '{{DataClassForSaveBase.GetEnumValueOf(rootAggregate)}}',
                  {{DataClassForSaveBase.ADD_MOD_DEL_TS}}: 'ADD',
                  {{DataClassForSaveBase.VALUES_TS}}: data,
                })), { noMessage: true, ignoreConfirm: true })
                if (!{{response}}.ok) return false

                """;

            static IEnumerable<string> ObjectPath(GraphNode<Aggregate> agg) {
                return agg
                    .PathFromEntry()
                    .Select(path => path.Terminal.As<Aggregate>().IsChildrenMember()
                                 && path.Terminal.As<Aggregate>() != agg
                        ? $"{path.RelationName}[0]"
                        : $"{path.RelationName}");
            }

            static string NewObject(GraphNode<Aggregate> agg) {
                var forSave = new DataClassForSave(agg, DataClassForSave.E_Type.Create);
                return agg.IsChildrenMember()
                    ? $"[AggregateType.{forSave.TsNewObjectFnName}()]"
                    : $"AggregateType.{forSave.TsNewObjectFnName}()";
            }

            string SetDummyValue(AggregateMember.AggregateMemberBase member, string instance, int index) {
                var path = member.Owner
                    .PathFromEntry()
                    .Select(edge => edge.Terminal.As<Aggregate>().IsChildrenMember()
                        ? $"{edge.RelationName}[0]"
                        : edge.RelationName)
                    .Concat([member.MemberName]);

                if (member is AggregateMember.Variation variation) {
                    var key = random.Next(variation.VariationGroup.VariationAggregates.Count);
                    return $"{instance}.{path.Join(".")} = '{variation.GetGroupItems().ElementAt(key).TsValue}'";

                } else if (member is AggregateMember.Schalar schalar) {
                    static string RandomAlphabet(Random random, int length) {
                        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                        return new string(chars[random.Next(chars.Length)], length);
                    }
                    static string RandomEnum(EnumList enumList, Random random) {
                        var randomItem = enumList
                            .Definition
                            .Items[random.Next(enumList.Definition.Items.Count)];
                        return $"'{randomItem.PhysicalName}'";
                    }

                    var dummyValue = schalar.Options.MemberType switch {
                        Core.AggregateMemberTypes.Boolean => "true",
                        EnumList enumList => RandomEnum(enumList, random),
                        Integer => random.Next(999999).ToString(),
                        Numeric => $"{random.Next(999999)}.{random.Next(0, 99)}",
                        Sentence => schalar.IsKey
                            ? $"'SENTENCE-{random.Next(999999999)}'"
                            : $"'XXXXXXXXXXXXXX\\nXXXXXXXXXXXXXX'",
                        Year => random.Next(1990, 2040).ToString(),
                        YearMonth => $"{random.Next(1990, 2040):0000}{random.Next(1, 12):00}",
                        YearMonthDay => $"'{new DateTime(2000, 1, 1).AddDays(random.Next(3000)):yyyy-MM-dd}'",
                        YearMonthDayTime => $"'{new DateTime(2000, 1, 1).AddDays(random.Next(3000)):yyyy-MM-dd}'",
                        Uuid => null, // 自動生成されるので
                        VariationSwitch => null, // Variationの分岐で処理済み
                        Word => schalar.IsKey
                            ? $"'W-{random.Next(99999999)}'"
                            : $"'{RandomAlphabet(random, 10)}'",
                        ValueObjectMember vo => vo.RenderDummyDataValue(random), 
                        _ => null, // 未定義
                    };
                    return dummyValue == null
                        ? SKIP_MARKER
                        : $"{instance}.{path.Join(".")} = {dummyValue}";

                } else if (member is AggregateMember.Ref @ref) {
                    var refSearch = new RefSearchHookTemp(@ref.RefTo);
                    var apiReturnType = new RefDisplayData(@ref.RefTo, @ref.RefTo);
                    var res = $"response{random.Next(99999999):00000000}";
                    return $$"""
                        const {{res}} = await {{refSearch.Load}}(AggregateType.{{refSearch.NewCondition}}())
                        {{instance}}.{{path.Join(".")}} = {{apiReturnType.RenderConvertToTsWriteModelKey($"{res}[{index}]", @ref.RefTo)}}
                        """;

                } else if (member is AggregateMember.Child
                          || member is AggregateMember.Children
                          || member is AggregateMember.VariationItem) {
                    return SKIP_MARKER;

                } else {
                    throw new NotImplementedException();
                }
            }
        }

        private class RefSearchHookTemp {
            internal RefSearchHookTemp(GraphNode<Aggregate> aggregate) {
                _aggregate = aggregate;
                _refSearchMethod = new RefSearchMethod(aggregate, aggregate);
                _refSearchCondition = new RefSearchCondition(aggregate, aggregate);
            }
            private readonly GraphNode<Aggregate> _aggregate;
            private readonly RefSearchMethod _refSearchMethod;
            private readonly RefSearchCondition _refSearchCondition;

            internal string Hook => _refSearchMethod.ReactHookName;
            internal string Load => $"load{_aggregate.Item.PhysicalName}_{_aggregate.Item.UniqueId}";
            internal string NewCondition => _refSearchCondition.CreateNewObjectFnName;
        }
    }
}
