using Nijo.Core;
using Nijo.Parts.WebServer;
using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Models.WriteModel2Features {
    /// <summary>
    /// 一括更新処理
    /// </summary>
    internal class BatchUpdate : ISummarizedFile {

        private readonly List<GraphNode<Aggregate>> _aggregates = new();
        internal void Register(GraphNode<Aggregate> aggregate) {
            _aggregates.Add(aggregate);
        }

        private readonly Dictionary<string, string> _additionalHooks = new();
        internal void AddReactHook(string hookName, string code) {
            _additionalHooks.Add(hookName, code);
        }

        private readonly List<string> _additionalControllerActions = new();
        internal void AddControllerAction(string code) {
            _additionalControllerActions.Add(code);
        }

        private readonly List<string> _additionalAppSrvMethods = new();
        internal void AddAppSrvMethod(string code) {
            _additionalAppSrvMethods.Add(code);
        }

        // --------------------------------------------------

        internal const string HOOK_NAME = "useBatchUpdate";
        internal const string HOOK_PARAM_ITEMS = "Items";

        private const string CONTROLLER_SUBDOMAIN = "batch-update";
        private const string CONTROLLER_ACTION_IMMEDIATELY = "immediately";

        private const string APPSRV_METHOD = "ExecuteBatchUpdate";

        int ISummarizedFile.RenderingOrder => 100; // BatchUpdateDisplayDataでマイナス1したときに既定値である0を下回るのがなんとなく不安だったので
        void ISummarizedFile.OnEndGenerating(CodeRenderingContext context) {

            context.ReactProject.AutoGeneratedHook.Add(RenderHook(context));
            context.WebApiProject.ControllerDir(dir => {
                dir.Generate(RenderController());
            });
            context.CoreLibrary.AppSrvMethods.Add(RenderAppSrvMethod(context));

        }

        private string RenderHook(CodeRenderingContext context) {
            return $$"""
                /** 一括更新処理を使用します。 */
                export const useBatchUpdate = () => {
                  const [, dispatchMsg] = Util.useMsgContext()
                  const { post } = Util.useHttpRequest()

                  /** 一括更新を即時実行します。更新するデータの量によっては長い待ち時間が発生する可能性があります。 */
                  const batchUpdateImmediately = React.useCallback(({{HOOK_PARAM_ITEMS}}: Types.{{DataClassForSaveBase.TS_SAVE_COMMAND}}[]) => {
                    const res = await post(`{{Controller.SUBDOMAIN}}/{{CONTROLLER_SUBDOMAIN}}/{{CONTROLLER_ACTION_IMMEDIATELY}}`, { {{HOOK_PARAM_ITEMS}} })
                    if (!res.ok) {
                      dispatchMsg(msg => msg.error('一括更新に失敗しました。'))
                    }
                  }, [post, dispatchMsg])

                {{_additionalHooks.Values.SelectTextTemplate(code => $$"""
                  {{WithIndent(code, "  ")}}

                """)}}CodeRenderingContext context
                  return {
                    batchUpdateImmediately,
                {{_additionalHooks.Keys.SelectTextTemplate(hookName => $$"""
                    {{hookName}},
                """)}}
                  }
                }
                """;
        }

        private SourceFile RenderController() => new SourceFile {
            FileName = "BatchUpdateController.cs",
            RenderContent = context => {
                var appSrv = new ApplicationService();

                return $$"""
                    using Microsoft.AspNetCore.Mvc;

                    namespace {{context.Config.RootNamespace}};

                    [ApiController]
                    [Route("{{Controller.SUBDOMAIN}}/{{CONTROLLER_SUBDOMAIN}}")]
                    public partial class BatchUpdateController : ControllerBase {
                        public BatchUpdateController({{appSrv.ClassName}} applicationService) {
                            _applicationService = applicationService;
                        }

                        private readonly {{appSrv.ClassName}} _applicationService;

                        #region WriteModel一括更新
                        /// <summary>
                        /// 一括更新処理を実行します。
                        /// </summary>
                        /// <param name="parameter">一括更新内容</param>
                        /// <param name="ignoreConfirm">「○○ですがよろしいですか？」などのコンファームを無視します。</param>
                        [HttpPost("{{CONTROLLER_ACTION_IMMEDIATELY}}")]
                        public virtual IActionResult ExecuteImmediately([FromBody] WriteModelsBatchUpdateParameter parameter, [FromQuery] bool ignoreConfirm) {
                            using var tran = _applicationService.DbContext.Database.BeginTransaction();
                            try {
                                var context = new {{BatchUpdateContext.CLASS_NAME}}(ignoreConfirm);
                                _applicationService.{{APPSRV_METHOD}}(parameter.{{HOOK_PARAM_ITEMS}}, context);

                                if (context.HasUserError) {
                                    tran.Rollback();
                                    return Problem($"一括更新に失敗しました。{Environment.NewLine}{string.Join(Environment.NewLine, errors2)}");
                                }
                                tran.Commit();
                                return Ok();

                            } catch (Exception ex) {
                                tran.Rollback();
                                return Problem(ex.ToString());
                            }
                        }
                        public partial class WriteModelsBatchUpdateParameter {
                            public List<{{DataClassForSaveBase.SAVE_COMMAND_BASE}}> {{HOOK_PARAM_ITEMS}} { get; set; } = new();
                        }
                        #endregion WriteModel一括更新
                    {{_additionalControllerActions.SelectTextTemplate(code => $$"""

                        {{WithIndent(code, "    ")}}
                    """)}}
                    }
                    """;
            },
        };

        private string RenderAppSrvMethod(CodeRenderingContext context) {
            var sortedAggregates = _aggregates
                //.OrderBy(agg => 依存される順) // TODO #35
                .Select((agg, i) => new {
                    CreateItems = $"create{agg.Item.PhysicalName}", // 引数のうちこの集約の新規追加データのみから成る配列の変数名
                    UpdateItems = $"update{agg.Item.PhysicalName}", // 引数のうちこの集約の更新データのみから成る配列の変数名
                    DeleteItems = $"delete{agg.Item.PhysicalName}", // 引数のうちこの集約の削除データのみから成る配列の変数名
                    CreateCommand = $"{DataClassForSaveBase.CREATE_COMMAND}<{new DataClassForSave(agg, DataClassForSave.E_Type.Create).CsClassName}>", // 新規作成コマンドのクラス名
                    UpdateCommand = $"{DataClassForSaveBase.UPDATE_COMMAND}<{new DataClassForSave(agg, DataClassForSave.E_Type.UpdateOrDelete).CsClassName}>", // 更新コマンドのクラス名
                    DeleteCommand = $"{DataClassForSaveBase.DELETE_COMMAND}<{new DataClassForSave(agg, DataClassForSave.E_Type.UpdateOrDelete).CsClassName}>", // 削除コマンドのクラス名
                    TempVar0 = $"x{(i * 3) + 0}", // 一時変数
                    TempVar1 = $"x{(i * 3) + 1}", // 一時変数
                    TempVar2 = $"x{(i * 3) + 2}", // 一時変数
                    Create = new CreateMethod(agg).MethodName, // メソッド名
                    Update = new UpdateMethod(agg).MethodName, // メソッド名
                    Delete = new DeleteMethod(agg).MethodName, // メソッド名
                })
                .ToArray();

            return $$"""
                #region 一括更新
                /// <summary>
                /// データ一括更新を実行します。
                /// </summary>
                /// <param name="items">更新データ</param>
                /// <param name="saveContext">コンテキスト引数。エラーや警告の送出はこのオブジェクトを通して行なってください。</param>
                public void {{APPSRV_METHOD}}(IEnumerable<{{DataClassForSaveBase.SAVE_COMMAND_BASE}}> items, {{BatchUpdateContext.CLASS_NAME}} saveContext) {

                    // パラメータの各要素の型を仕分けてそれぞれの配列に格納する
                {{sortedAggregates.SelectTextTemplate(agg => $$"""
                    var {{agg.CreateItems}} = new List<{{agg.CreateCommand}}>();
                    var {{agg.UpdateItems}} = new List<{{agg.UpdateCommand}}>();
                    var {{agg.DeleteItems}} = new List<{{agg.DeleteCommand}}>();
                """)}}

                    foreach (var item in items) {
                {{If(sortedAggregates.Length == 0, () => $$"""
                        throw new InvalidOperationException($"引数{nameof(items)}の要素が想定外の型です: {item.ToJson()}");
                """).Else(() => $$"""
                {{sortedAggregates.SelectTextTemplate((agg, i) => $$"""
                        {{(i == 0 ? "if" : "} else if")}} (item is {{agg.CreateCommand}} {{agg.TempVar0}}) {
                            {{agg.CreateItems}}.Add({{agg.TempVar0}});
                        } else if (item is {{agg.UpdateCommand}} {{agg.TempVar1}}) {
                            {{agg.UpdateItems}}.Add({{agg.TempVar1}});
                        } else if (item is {{agg.DeleteCommand}} {{agg.TempVar2}}) {
                            {{agg.DeleteItems}}.Add({{agg.TempVar2}});

                """)}}
                        } else {
                            throw new InvalidOperationException($"引数{nameof(items)}の要素が想定外の型です: {item.ToJson()}");
                        }
                """)}}
                    }

                    // データ間の依存関係に注意しないと正常終了すべき処理が異常終了してしまうので、正しい順番で処理する。
                    // 1. 依存する側  のデータの削除
                    // 2. 依存される側のデータの削除
                    // 3. 依存される側のデータの新規作成
                    // 4. 依存する側  のデータの新規作成
                    // 5. 依存される側のデータの更新
                    // 6. 依存する側  のデータの更新
                {{sortedAggregates.Reverse().SelectTextTemplate(agg => $$"""
                    foreach (var item in {{agg.DeleteItems}}) {{agg.Delete}}(item, saveContext);
                """)}}
                {{sortedAggregates.SelectTextTemplate(agg => $$"""
                    foreach (var item in {{agg.CreateItems}}) {{agg.Create}}(item, saveContext);
                """)}}
                {{sortedAggregates.SelectTextTemplate(agg => $$"""
                    foreach (var item in {{agg.UpdateItems}}) {{agg.Update}}(item, saveContext);
                """)}}
                }
                {{_additionalAppSrvMethods.SelectTextTemplate(code => $$"""

                {{code}}
                """)}}
                #endregion 一括更新
                """;
        }
    }
}
