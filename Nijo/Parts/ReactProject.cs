using Nijo.Util.CodeGenerating;
using Nijo.Util.DotnetEx;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace Nijo.Parts {
    /// <summary>
    /// 自動生成されるReact.jsのSPAに対する操作を提供します。
    /// </summary>
    internal class ReactProject {

        internal ReactProject(GeneratedProject generatedProject) {
            _generatedProject = generatedProject;
        }

        private readonly GeneratedProject _generatedProject;

        internal string ProjectRoot => Path.Combine(_generatedProject.SolutionRoot, "react");
        internal string AutoGeneratedDir => Path.Combine(ProjectRoot, "src", "__autoGenerated");

        /// <summary>
        /// プロジェクトディレクトリを新規作成します。
        /// </summary>
        internal void CreateProjectIfNotExists(Core.Config config) {
            if (Directory.Exists(ProjectRoot)) return;

            // 埋め込みリソースからテンプレートを出力
            var resources = new EmbeddedResource.Collection(Assembly.GetExecutingAssembly());
            foreach (var resource in resources.Enumerate("react")) {
                var destination = Path.Combine(
                    ProjectRoot,
                    Path.GetRelativePath("react", resource.RelativePath));

                Directory.CreateDirectory(Path.GetDirectoryName(destination)!);

                using var reader = resource.GetStreamReader();
                using var writer = SourceFile.GetStreamWriter(destination);
                while (!reader.EndOfStream) {
                    writer.WriteLine(reader.ReadLine());
                }
            }

            // デバッグページを削除する
            var appTsx = Path.Combine(ProjectRoot, "src", "App.tsx");
            File.WriteAllText(appTsx, $$"""
                import { DefaultNijoApp } from './__autoGenerated'

                function App() {

                  return (
                    <DefaultNijoApp />
                  )
                }

                export default App
                """, new UTF8Encoding(false));
        }

        /// <summary>
        /// 依存先パッケージをインストールします。
        /// </summary>
        internal async Task NpmInstall(CancellationToken cancellationToken) {
            var npmCi = new Process();
            try {
                npmCi.StartInfo.WorkingDirectory = ProjectRoot;
                if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
                    npmCi.StartInfo.FileName = "powershell";
                    npmCi.StartInfo.Arguments = "/c \"npm ci\"";
                } else {
                    npmCi.StartInfo.FileName = "npm";
                    npmCi.StartInfo.Arguments = "ci";
                }
                npmCi.Start();
                await npmCi.WaitForExitAsync(cancellationToken);

            } finally {
                npmCi.EnsureKill();
            }
        }

        /// <summary>
        /// デバッグ時に起動されるサーバーのURLを返します。
        /// </summary>
        public Uri GetDebuggingClientUrl() {
            // vite.config.ts からポートを参照してURLを生成して返す
            var viteConfigTs = Path.Combine(ProjectRoot, "vite.config.ts");
            if (!File.Exists(viteConfigTs))
                throw new FileNotFoundException(viteConfigTs);

            using var stream = new StreamReader(viteConfigTs, Encoding.UTF8);
            var regex = new Regex(@"port:\s*([^,]*)");
            while (!stream.EndOfStream) {
                var line = stream.ReadLine();
                if (line == null) continue;
                var match = regex.Match(line);
                if (!match.Success) continue;
                var port = match.Groups[1].Value;
                return new Uri($"http://localhost:{port}");
            }

            throw new InvalidOperationException("vite.config.ts からポート番号を読み取れません。'port: 9999'のようにポートを設定している行があるか確認してください。");
        }
    }
}
