using Nijo.Util.CodeGenerating;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Parts.WebClient.DataTable {
    /// <summary>
    /// DataTableの列定義生成ヘルパー関数
    /// </summary>
    internal class CellType : ISummarizedFile {

        internal const string GET_HELPER = "getColumnDefBuilder";
        internal const string HELPER_MEHOTD_TYPE = "CellTypeHelper";

        internal void Add(string helperMethodSource) {
            // まったく同じソースコードの場合は同じ型が重複してレンダリングしようとしているのでレンダリング割愛
            // （HashSetにすることで同じ文字列かどうか判定される）
            _helperMethods.Add(helperMethodSource);
        }
        private readonly HashSet<string> _helperMethods = new();

        public void OnEndGenerating(CodeRenderingContext context) {
            context.ReactProject.AutoGeneratedDir(dir => {
                dir.Directory("collection", layoutDir => {
                    layoutDir.Generate(Render());
                });
            });
        }

        private SourceFile Render() {
            return new() {
                FileName = "DataTable.CellType.tsx",
                RenderContent = ctx => {
                    return $$"""
                        import { ColumnEditSetting, DataTableColumn } from './DataTable.Public'
                        import * as Util from '../util'
                        import * as AggregateType from '../autogenerated-types'

                        /** DataTable列定義生成ヘルパー */
                        export const {{GET_HELPER}} = <TRow,>() => new DataTableColumnHelper<TRow>()

                        class DataTableColumnHelper<TRow> {
                          private _columns: DataTableColumn<TRow>[] = []

                          /** 任意の列 */
                          add(col: DataTableColumn<TRow>): this {
                            this._columns.push(col)
                            return this
                          }

                        {{_helperMethods.SelectTextTemplate(source => $$"""
                          {{WithIndent(source, "  ")}}

                        """)}}
                          toArray(): DataTableColumn<TRow>[] {
                            return [...this._columns]
                          }
                        }

                        /** 列定義生成関数の型 */
                        type {{HELPER_MEHOTD_TYPE}}<TRow, TValue> = (
                          header: string,
                          getValue: ((row: TRow) => TValue),
                          setValue: ((row: TRow, value: TValue) => void),
                          opt?: CellTypeHelperOptions<TRow>
                        ) => DataTableColumnHelper<TRow>

                        /** 列定義生成ヘルパー関数のオプション */
                        type CellTypeHelperOptions<TRow> = Partial<Pick<DataTableColumn<TRow>,
                          'id'
                          | 'defaultWidthPx'
                          | 'fixedWidth'
                          | 'headerGroupName'
                        >> & {
                          readOnly?: boolean | ((row: TRow) => boolean)
                        }

                        /** 表示用のレイアウトを施したセル */
                        export const PlainCell = ({ children }: {
                          children?: React.ReactNode
                        }) => {
                          return (
                            <span className="block w-full px-1 overflow-hidden whitespace-nowrap">
                              {children}
                              &nbsp;
                            </span>
                          )
                        }
                        """;
                },
            };
        }
    }
}
