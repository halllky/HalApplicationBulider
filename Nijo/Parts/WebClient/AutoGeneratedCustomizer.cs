using Nijo.Util.CodeGenerating;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Nijo.Parts.WebClient {
    /// <summary>
    /// UIのカスタマイザー。
    /// 自動生成されたあとのソースコードに手を加える際に手を加えれられる箇所を定義する。
    /// 例えば一覧検索画面に任意のコマンドを追加できるようにするなど。
    /// </summary>
    internal class AutoGeneratedCustomizer : ISummarizedFile {

        internal void Add(string sourceCode) {
            _sourceCode.Add(sourceCode);
        }
        private readonly List<string> _sourceCode = new();

        void ISummarizedFile.OnEndGenerating(CodeRenderingContext context) {

            context.ReactProject.AutoGeneratedDir(dir => {
                dir.Generate(new SourceFile {
                    FileName = "autogenerated-customizer.tsx",
                    RenderContent = ctx => {

                        return $$"""
                            import * as Util from './util'
                            import * as Input from './input'
                            import * as Layout from './collection'
                            import * as AggregateType from './autogenerated-types'
                            import * as AggregateHook from './autogenerated-hooks'

                            /** 自動生成されたあとのソースコードに対してカスタマイズを加えられる箇所の一覧とその設定 */
                            export type AutoGeneratedCustomizer = {
                              /** Raect router のルーティング処理（クライアント側のURLとページの紐づき設定）を編集します。 */
                              modifyRoutes?: (defaultRoutes: { url: string, el: JSX.Element }[]) => ({ url: string, el: JSX.Element })[]
                            {{_sourceCode.SelectTextTemplate(source => $$"""
                              {{WithIndent(source, "  ")}}
                            """)}}
                            }
                            """;
                    },
                });
            });

        }
    }
}
