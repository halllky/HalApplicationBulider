using Nijo.Parts.WebServer;
using Nijo.Core;
using Nijo.Util.CodeGenerating;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Nijo.Models;
using Nijo.Features;

namespace Nijo {
    public sealed class NijoCodeGenerator {

        internal IEnumerable<IFeature> GetFeatures() {
            yield return new Features.Debugging.DebuggingFeature();
            yield return new Features.Logging.LoggingFeature();
            yield return new Features.BackgroundService.BgTaskFeature();
            yield return new Features.BatchUpdate.BatchUpdateFeature();
        }

        internal static class Models {
            internal static KeyValuePair<string, Func<IModel>> WriteModel => KeyValuePair.Create("write-model", () => (IModel)new Nijo.Models.WriteModel.WriteModel());
            internal static KeyValuePair<string, Func<IModel>> ReadModel => KeyValuePair.Create("read-model", () => (IModel)new Nijo.Models.ReadModel.ReadModel());

            internal static IEnumerable<KeyValuePair<string, Func<IModel>>> GetAll() {
                yield return WriteModel;
                yield return ReadModel;
            }
        }


        internal NijoCodeGenerator(GeneratedProject project, ILogger? log) {
            _project = project;
            _log = log;
        }

        private readonly GeneratedProject _project;
        private readonly ILogger? _log;

        /// <summary>
        /// コードの自動生成を行います。
        /// </summary>
        public NijoCodeGenerator UpdateAutoGeneratedCode() {

            _log?.LogInformation($"コード自動生成開始: {_project.ProjectRoot}");

            var ctx = new CodeRenderingContext {
                Config = _project.ReadConfig(),
                Schema = _project.BuildSchema(),
            };
            ctx._webapiDir = DirectorySetupper.StartSetup(ctx, Path.Combine(_project.WebApiProjectRoot, "__AutoGenerated"));
            ctx._reactDir = DirectorySetupper.StartSetup(ctx, Path.Combine(_project.WebClientProjectRoot, "src", "__autoGenerated"));

            var features = GetFeatures().ToArray();
            var nonAggregateFeatures = features
                .OfType<IFeature>();
            foreach (var feature in nonAggregateFeatures) {
                feature.GenerateCode(ctx);
            }

            var handlers = Models
                .GetAll()
                .ToDictionary(kv => kv.Key, kv => kv.Value.Invoke());
            foreach (var rootAggregate in ctx.Schema.RootAggregates()) {
                if (!string.IsNullOrWhiteSpace(rootAggregate.Item.Options.Handler)
                    && handlers.TryGetValue(rootAggregate.Item.Options.Handler, out var feature)) {
                    feature.GenerateCode(ctx, rootAggregate);
                } else {
                    // 特に指定の無い集約は処理対象外
                }
            }

            // 複数の集約から1個のソースが作成されるものはこのタイミングで作成
            ctx.OnEndContext();

            _log?.LogInformation($"コード自動生成終了: {_project.ProjectRoot}");
            return this;
        }

        /// <summary>
        /// ソースコード自動生成処理を直感的に書けるようにするためのクラス
        /// </summary>
        public class DirectorySetupper {
            internal static DirectorySetupper StartSetup(CodeRenderingContext ctx, string absolutePath) {
                return new DirectorySetupper(ctx, absolutePath);
            }
            internal static void StartSetup(CodeRenderingContext ctx, string absolutePath, Action<DirectorySetupper> fn) {
                var setupper = StartSetup(ctx, absolutePath);
                setupper.Directory("", fn);
            }
            private DirectorySetupper(CodeRenderingContext ctx, string path) {
                Path = path;
                _ctx = ctx;
            }

            internal string Path { get; }

            private readonly CodeRenderingContext _ctx;

            public void Directory(string relativePath, Action<DirectorySetupper> fn) {
                var fullpath = System.IO.Path.Combine(Path, relativePath);
                if (!System.IO.Directory.Exists(fullpath))
                    System.IO.Directory.CreateDirectory(fullpath);
                _ctx.Handle(fullpath);

                fn(new DirectorySetupper(_ctx, System.IO.Path.Combine(Path, relativePath)));
            }

            public void Generate(SourceFile sourceFile) {
                var file = System.IO.Path.Combine(Path, sourceFile.FileName);
                _ctx.Handle(file);

                using var sw = new StreamWriter(file, append: false, encoding: GetEncoding(file));
                var ext = System.IO.Path.GetExtension(file).ToLower();
                sw.NewLine = ext == ".cs" ? "\r\n" : "\n";
                var content = sourceFile
                    .RenderContent()
                    .Replace(Environment.NewLine, sw.NewLine);
                sw.WriteLine(content);
            }

            public void CopyFrom(string copySourceFile) {
                var copyTargetFile = System.IO.Path.Combine(Path, System.IO.Path.GetFileName(copySourceFile));
                _ctx.Handle(copyTargetFile);

                var encoding = GetEncoding(copySourceFile);
                using var reader = new StreamReader(copySourceFile, encoding);
                using var writer = new StreamWriter(copyTargetFile, append: false, encoding: encoding);
                while (!reader.EndOfStream) {
                    writer.WriteLine(reader.ReadLine());
                }
            }

            internal void CopyEmbeddedResource(Parts.EmbeddedResource resource) {
                var destination = System.IO.Path.GetFullPath(System.IO.Path.Combine(Path, resource.FileName));

                // 他の何かの機能で既に同名のファイルが生成されている場合はスキップ
                if (_ctx.IsHandled(destination)) return;
                _ctx.Handle(destination);

                using var reader = resource.GetStreamReader();
                using var writer = new StreamWriter(destination, false, GetEncoding(destination));
                while (!reader.EndOfStream) {
                    writer.WriteLine(reader.ReadLine());
                }
            }

            private static Encoding GetEncoding(string filepath) {
                return System.IO.Path.GetExtension(filepath).ToLower() == "cs"
                    ? Encoding.UTF8 // With BOM
                    : new UTF8Encoding(false);
            }
        }
    }
}
