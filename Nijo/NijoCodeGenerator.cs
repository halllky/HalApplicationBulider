using Nijo.Features;
using Nijo.Features.InstanceHandling;
using Nijo.Features.WebClient;
using Nijo.Core;
using Nijo.DotnetEx;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Nijo {
    public sealed class NijoCodeGenerator {
        internal NijoCodeGenerator(GeneratedProject project, ILogger? log) {
            _project = project;
            _log = log;
        }

        private readonly GeneratedProject _project;
        private readonly ILogger? _log;

        /// <summary>
        /// 新規プロジェクトのひな形を作成します。
        /// </summary>
        internal NijoCodeGenerator CreateProjectTemplate(string applicationName) {
            _log?.LogInformation($"プロジェクトを作成します。");

            // プロジェクトディレクトリの作成
            if (Directory.Exists(_project.ProjectRoot) || File.Exists(_project.ProjectRoot)) {
                throw new InvalidOperationException($"Directory is already exists: {_project.ProjectRoot}");
            }
            Directory.CreateDirectory(_project.ProjectRoot);

            // nijo.xmlの作成
            var xmlPath = _project.SchemaXml.GetPath();
            var config = new Config {
                ApplicationName = applicationName,
                DbContextName = "MyDbContext",
            };
            var xmlContent = new XDocument(config.ToXmlWithRoot());
            using var sw = new StreamWriter(xmlPath, append: false, encoding: new UTF8Encoding(false));
            sw.WriteLine(xmlContent.ToString());

            // プロジェクトルートディレクトリのいろいろ作成
            var nijoExeDir = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)!;
            var gitignoreFrom = Path.Combine(nijoExeDir, "ApplicationTemplates", ".gitignore");
            var gitignoreTo = Path.Combine(_project.ProjectRoot, ".gitignore");
            File.Copy(gitignoreFrom, gitignoreTo);

            // reactディレクトリのコピー
            // webapiディレクトリのコピー
            var reactProjectTemplate = Path.Combine(nijoExeDir, "ApplicationTemplates", "REACT_AND_WEBAPI", "react");
            var webapiProjectTemplate = Path.Combine(nijoExeDir, "ApplicationTemplates", "REACT_AND_WEBAPI", "webapi");
            DotnetEx.IO.CopyDirectory(reactProjectTemplate, _project.WebClientProjectRoot);
            DotnetEx.IO.CopyDirectory(webapiProjectTemplate, _project.WebApiProjectRoot);

            // reactのデバッグ用コードを除去
            var debugRoom = Path.Combine(_project.WebClientProjectRoot, "src", "debug-room");
            Directory.Delete(debugRoom, true);

            var appTsx = Path.Combine(_project.WebClientProjectRoot, "src", "App.tsx");
            File.WriteAllText(appTsx, $$"""
                import { ApplicationRoot } from './__autoGenerated/application'

                function App() {

                  return (
                    <ApplicationRoot />
                  )
                }

                export default App
                """, new UTF8Encoding(false));

            // ソースコード中の "REACT_AND_WEBAPI" という文字をプロジェクト名に置換する
            var programCs = Path.Combine(_project.WebApiProjectRoot, "Program.cs");
            var beforeReplace = File.ReadAllText(programCs);
            var afterReplace = beforeReplace.Replace("REACT_AND_WEBAPI", config.RootNamespace);
            File.WriteAllText(programCs, afterReplace);

            var beforeCsproj = Path.Combine(_project.WebApiProjectRoot, "REACT_AND_WEBAPI.csproj");
            var afterCsproj = Path.Combine(_project.WebApiProjectRoot, $"{config.ApplicationName}.csproj");
            File.Move(beforeCsproj, afterCsproj);

            // 自動生成されないクラスの初期値
            var appSrv = new ApplicationService(config);
            var overrideAppSrv = Path.Combine(_project.WebApiProjectRoot, appSrv.ConcreteClassFileName);
            File.WriteAllText(overrideAppSrv, $$"""
                namespace {{config.RootNamespace}} {
                    /// <summary>
                    /// 自動生成された検索機能や登録機能を上書きする場合はこのクラス内でそのメソッドやプロパティをoverrideしてください。
                    /// </summary>
                    public partial class {{appSrv.ConcreteClass}} : {{appSrv.ClassName}} {
                        public {{appSrv.ConcreteClass}}(IServiceProvider serviceProvider) : base(serviceProvider) { }


                    }
                }
                """);

            return this;
        }
        /// <summary>
        /// コードの自動生成を行います。
        /// </summary>
        /// <param name="log">ログ出力先</param>
        public NijoCodeGenerator UpdateAutoGeneratedCode() {

            _log?.LogInformation($"コード自動生成開始: {_project.ProjectRoot}");

            var config = _project.ReadConfig();
            var appSchema = _project.BuildSchema();
            var ctx = new CodeRenderingContext {
                Config = config,
                Schema = appSchema,
            };

            DirectorySetupper.StartSetup(ctx, _project.WebApiProjectRoot, dir => {

                dir.Directory("__AutoGenerated", genDir => {
                    genDir.Generate(Configure.Render());
                    genDir.Generate(EnumDefs.Render());
                    genDir.Generate(new ApplicationService(config).Render());

                    foreach (var aggregate in ctx.Schema.RootAggregates()) {
                        genDir.Generate(new AggregateRenderer(aggregate).Render());
                    }

                    genDir.Directory("Util", utilDir => {
                        utilDir.Generate(Features.Util.RuntimeSettings.Render());
                        utilDir.Generate(Features.Util.DotnetExtensions.Render());
                        utilDir.Generate(Features.Util.FromTo.Render());
                        utilDir.Generate(Features.Logging.HttpResponseExceptionFilter.Render());
                        utilDir.Generate(Features.Logging.DefaultLogger.Render());
                        utilDir.Generate(Features.Util.Utility.RenderJsonConversionMethods());
                        utilDir.DeleteOtherFiles();
                    });
                    genDir.Directory("Web", controllerDir => {
                        controllerDir.Generate(Features.Searching.MultiView.RenderCSharpSearchConditionBaseClass());
                        controllerDir.Generate(DebuggerController.Render());
                        controllerDir.DeleteOtherFiles();
                    });
                    genDir.Directory("EntityFramework", efDir => {
                        efDir.Generate(new DbContextClass(config).RenderDeclaring());
                        efDir.DeleteOtherFiles();
                    });
                    //genDir.Directory("BackgroundService", bsDir => {
                    //    bsDir.Generate(Features.BackgroundService.BackgroundTaskLauncher.Render());
                    //    bsDir.Generate(Features.BackgroundService.BackgroundTask.Render());

                    //    var bgTaskSearch = Features.BackgroundService.BackgroundTaskEntity.CreateSearchFeature(appSchema.Graph, ctx);
                    //    bsDir.Generate(bgTaskSearch.RenderControllerAction());
                    //    bsDir.Generate(bgTaskSearch.RenderCSharpClassDef());
                    //    bsDir.Generate(bgTaskSearch.RenderDbContextMethod());

                    //    bsDir.DeleteOtherFiles();
                    //});
                    genDir.DeleteOtherFiles();
                });
            });

            var reactProjectTemplate = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)!, "ApplicationTemplates", "REACT_AND_WEBAPI", "react");

            DirectorySetupper.StartSetup(ctx, Path.Combine(_project.WebClientProjectRoot, "src", "__autoGenerated"), reactDir => {
                const string REACT_PAGE_DIR = "pages";
                string GetAggDirName(GraphNode<Aggregate> a) => a.Item.DisplayName.ToFileNameSafe();

                reactDir.CopyFrom(Path.Combine(reactProjectTemplate, "src", "__autoGenerated", "nijo.css"));
                reactDir.Generate(index.Render(a => $"{REACT_PAGE_DIR}/{GetAggDirName(a)}"));
                reactDir.Generate(types.Render());

                reactDir.Directory("application", reactApplicationDir => {
                    var source = Path.Combine(reactProjectTemplate, "src", "__autoGenerated", "application");
                    foreach (var file in Directory.GetFiles(source)) reactApplicationDir.CopyFrom(file);
                    reactApplicationDir.DeleteOtherFiles();
                });
                reactDir.Directory("decoration", decorationDir => {
                    var source = Path.Combine(reactProjectTemplate, "src", "__autoGenerated", "decoration");
                    foreach (var file in Directory.GetFiles(source)) decorationDir.CopyFrom(file);
                    decorationDir.DeleteOtherFiles();
                });
                reactDir.Directory("layout", layoutDir => {
                    var source = Path.Combine(reactProjectTemplate, "src", "__autoGenerated", "layout");
                    foreach (var file in Directory.GetFiles(source)) layoutDir.CopyFrom(file);
                    layoutDir.DeleteOtherFiles();
                });
                reactDir.Directory("user-input", userInputDir => {
                    var source = Path.Combine(reactProjectTemplate, "src", "__autoGenerated", "user-input");
                    foreach (var file in Directory.GetFiles(source)) userInputDir.CopyFrom(file);
                    userInputDir.DeleteOtherFiles();

                    userInputDir.Generate(Features.KeywordSearching.ComboBox.RenderDeclaringFile());
                });
                reactDir.Directory("util", reactUtilDir => {
                    var source = Path.Combine(reactProjectTemplate, "src", "__autoGenerated", "util");
                    foreach (var file in Directory.GetFiles(source)) reactUtilDir.CopyFrom(file);
                    reactUtilDir.Generate(Features.Util.DummyDataGenerator.Render());
                    reactUtilDir.DeleteOtherFiles();
                });
                reactDir.Directory(REACT_PAGE_DIR, pageDir => {
                    foreach (var root in ctx.Schema.RootAggregates()) {
                        pageDir.Directory(GetAggDirName(root), aggregateDir => {
                            aggregateDir.Generate(new Features.Searching.AggregateSearchFeature(root).GetMultiView().RenderMultiView());
                            if (root.IsCreatable()) aggregateDir.Generate(new SingleView(root, SingleView.E_Type.Create).Render());
                            if (root.IsStored()) aggregateDir.Generate(new SingleView(root, SingleView.E_Type.View).Render());
                            if (root.IsEditable()) aggregateDir.Generate(new SingleView(root, SingleView.E_Type.Edit).Render());
                            aggregateDir.DeleteOtherFiles();
                        });
                    }

                    //pageDir.Directory("BackgroundTask", bgTaskDir => {
                    //    var bgTaskSearch = Features.BackgroundService.BackgroundTaskEntity.CreateSearchFeature(appSchema.Graph, ctx);
                    //    bgTaskDir.Generate(bgTaskSearch.CreateReactPage());
                    //});

                    pageDir.DeleteOtherFiles();
                });
                reactDir.DeleteOtherFiles();
            });

            _log?.LogInformation($"コード自動生成終了: {_project.ProjectRoot}");
            return this;
        }

        private class DirectorySetupper {
            internal static void StartSetup(CodeRenderingContext ctx, string absolutePath, Action<DirectorySetupper> fn) {
                var setupper = new DirectorySetupper(ctx, absolutePath);
                setupper.Directory("", fn);
            }
            private DirectorySetupper(CodeRenderingContext ctx, string path) {
                Path = path;
                _generated = new HashSet<string>();
                _ctx = ctx;
            }

            internal string Path { get; }

            private readonly CodeRenderingContext _ctx;

            private readonly HashSet<string> _generated;
            internal void Directory(string relativePath, Action<DirectorySetupper> fn) {
                var fullpath = System.IO.Path.Combine(Path, relativePath);
                if (!System.IO.Directory.Exists(fullpath))
                    System.IO.Directory.CreateDirectory(fullpath);

                _generated.Add(fullpath);

                fn(new DirectorySetupper(_ctx, System.IO.Path.Combine(Path, relativePath)));
            }

            internal void Generate(SourceFile sourceFile) {
                var file = System.IO.Path.Combine(Path, sourceFile.FileName);

                _generated.Add(file);

                using var sw = new StreamWriter(file, append: false, encoding: GetEncoding(file));
                var ext = System.IO.Path.GetExtension(file).ToLower();
                sw.NewLine = ext == ".cs" ? "\r\n" : "\n";
                var content = sourceFile
                    .RenderContent(_ctx)
                    .Replace(Environment.NewLine, sw.NewLine);
                sw.WriteLine(content);
            }

            internal void CopyFrom(string copySourceFile) {
                var copyTargetFile = System.IO.Path.Combine(Path, System.IO.Path.GetFileName(copySourceFile));

                _generated.Add(copyTargetFile);

                var encoding = GetEncoding(copySourceFile);
                using var reader = new StreamReader(copySourceFile, encoding);
                using var writer = new StreamWriter(copyTargetFile, append: false, encoding: encoding);
                while (!reader.EndOfStream) {
                    writer.WriteLine(reader.ReadLine());
                }
            }
            internal void DeleteOtherFiles() {
                var deleteFiles = System.IO.Directory
                    .GetFiles(Path)
                    .Where(path => !_generated.Contains(path));
                foreach (var file in deleteFiles) {
                    if (!File.Exists(file)) continue;
                    File.Delete(file);
                }
                var deletedDirectories = System.IO.Directory
                    .GetDirectories(Path)
                    .Where(path => !_generated.Contains(path));
                foreach (var dir in deletedDirectories) {
                    if (!System.IO.Directory.Exists(dir)) continue;
                    System.IO.Directory.Delete(dir, true);
                }
            }

            private static Encoding GetEncoding(string filepath) {
                return System.IO.Path.GetExtension(filepath).ToLower() == "cs"
                    ? Encoding.UTF8 // With BOM
                    : new UTF8Encoding(false);
            }
        }
    }
}
