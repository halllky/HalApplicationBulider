using Nijo.Core;
using Nijo.Util.DotnetEx;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.Build.Evaluation;
using Nijo.Parts.WebServer;

namespace Nijo {
    public sealed partial class GeneratedProject {

        /// <summary>
        /// 新しいプロジェクトを作成します。
        /// </summary>
        /// <param name="applicationName">アプリケーション名</param>
        /// <param name="verbose">ログの詳細出力を行うかどうか</param>
        /// <returns>作成されたプロジェクトを表すオブジェクト</returns>
        public static GeneratedProject Create(
            string projectRootDir,
            string? applicationName,
            bool keepTempIferror,
            CancellationToken? cancellationToken = null,
            ILogger? log = null) {

            if (string.IsNullOrWhiteSpace(applicationName))
                throw new InvalidOperationException($"Please specify name of new application.");

            if (Path.GetInvalidFileNameChars().Any(applicationName.Contains))
                throw new InvalidOperationException($"'{applicationName}' contains invalid characters for a file name.");

            if (Directory.Exists(projectRootDir))
                throw new InvalidOperationException($"'{projectRootDir}' is already exists.");

            var tempDir = keepTempIferror
                // 最終的な出力先ディレクトリに直に生成する場合はこちら
                ? projectRootDir
                // まず一時ディレクトリに生成して、最後まで正常終了した場合だけ最終的な出力先ディレクトリにコピーする場合はこちら
                : Path.Combine(Path.GetTempPath(), "nijo.temp." + Path.GetRandomFileName());

            var error = false;
            try {
                var tempProject = new GeneratedProject(tempDir, log);

                using (var _ = log?.BeginScope("プロジェクトディレクトリの作成")) {
                    log?.LogInformation("ProjectRoot: {0}", tempProject.ProjectRoot);

                    if (Directory.Exists(tempProject.ProjectRoot) || File.Exists(tempProject.ProjectRoot)) {
                        throw new InvalidOperationException($"Directory is already exists: {tempProject.ProjectRoot}");
                    }
                    Directory.CreateDirectory(tempProject.ProjectRoot);
                }

                var config = new Config {
                    ApplicationName = applicationName,
                    DbContextName = "MyDbContext",
                };

                using (var _ = log?.BeginScope("nijo.xmlの作成")) {
                    var xmlPath = tempProject.SchemaXml.GetPath();
                    log?.LogInformation("XML Path: {0}", xmlPath);

                    var xmlContent = new XDocument(config.ToXmlWithRoot());
                    using var sw = new StreamWriter(xmlPath, append: false, encoding: new UTF8Encoding(false));
                    sw.WriteLine(xmlContent.ToString());
                }

                using (var _ = log?.BeginScope(".gitignoreの作成")) {
                    var gitignore = Path.Combine(tempProject.ProjectRoot, ".gitignore");
                    log?.LogInformation(".gitignore path: {0}", gitignore);

                    File.WriteAllText(gitignore, $$"""
                        /*.sqlite3
                        """);
                }

                using (var _ = log?.BeginScope("React & ASP.NET テンプレートのコピー")) {
                    var reactProjectTemplate = Path.Combine(Parts.App.TEMPLATE_LINKBASE, "REACT_AND_WEBAPI", "react");
                    var webapiProjectTemplate = Path.Combine(Parts.App.TEMPLATE_LINKBASE, "REACT_AND_WEBAPI", "webapi");

                    log?.LogInformation("React template  : {0}", reactProjectTemplate);
                    log?.LogInformation("ASP.NET template: {0}", webapiProjectTemplate);

                    Util.DotnetEx.IO.CopyDirectory(reactProjectTemplate, tempProject.WebClientProjectRoot);
                    Util.DotnetEx.IO.CopyDirectory(webapiProjectTemplate, tempProject.WebApiProjectRoot);
                }

                using (var _ = log?.BeginScope("reactのデバッグ用コードを除去")) {
                    var debugRoom = Path.Combine(tempProject.WebClientProjectRoot, "src", "debug-room");
                    Directory.Delete(debugRoom, true);

                    var appTsx = Path.Combine(tempProject.WebClientProjectRoot, "src", "App.tsx");
                    File.WriteAllText(appTsx, $$"""
                        import { DefaultNijoApp } from './__autoGenerated'

                        function App() {

                          return (
                            <DefaultNijoApp />
                          )
                        }

                        export default App
                        """, new UTF8Encoding(false));
                }

                using (var _ = log?.BeginScope("テンプレート中に登場するプロジェクト名を作成されるプロジェクト名に置換")) {
                    var programCs = Path.Combine(tempProject.WebApiProjectRoot, "Program.cs");
                    var beforeReplace = File.ReadAllText(programCs);
                    var afterReplace = beforeReplace.Replace("REACT_AND_WEBAPI", config.RootNamespace);
                    File.WriteAllText(programCs, afterReplace);

                    var beforeCsproj = Path.Combine(tempProject.WebApiProjectRoot, "REACT_AND_WEBAPI.csproj");
                    var afterCsproj = Path.Combine(tempProject.WebApiProjectRoot, $"{config.ApplicationName}.csproj");
                    File.Move(beforeCsproj, afterCsproj);
                }

                using (var _ = log?.BeginScope("自動生成されないコードの初期化")) {
                    var appSrv = new ApplicationService();
                    var overrideAppSrv = Path.Combine(tempProject.WebApiProjectRoot, appSrv.ConcreteClassFileName);
                    File.WriteAllText(overrideAppSrv, $$"""
                        namespace {{config.RootNamespace}} {
                            /// <summary>
                            /// 自動生成された検索機能や登録機能を上書きする場合はこのクラス内でそのメソッドやプロパティをoverrideしてください。
                            /// </summary>
                            public partial class {{appSrv.ConcreteClass}} : {{appSrv.ClassName}} {
                                public {{appSrv.ConcreteClass}}(IServiceProvider serviceProvider) : base(serviceProvider) { }


                            }
                        }
                        """);
                }

                using (var _ = log?.BeginScope("自動生成されるコードの初期化")) {
                    tempProject.CodeGenerator.UpdateAutoGeneratedCode();
                }

                using (var _ = log?.BeginScope("外部パッケージのインストール")) {
                    tempProject.Debugger.InstallDependencies();
                }

                using (var _ = log?.BeginScope("DB作成")) {
                    tempProject.Migrator.EnsureCreateDatabase();
                }

                using (var _ = log?.BeginScope("git初期化")) {
                    tempProject.Terminal.Run(new[] { "git", "init" }, cancellationToken ?? CancellationToken.None).Wait();
                    tempProject.Terminal.Run(new[] { "git", "add", "." }, cancellationToken ?? CancellationToken.None).Wait();
                    tempProject.Terminal.Run(new[] { "git", "commit", "-m", "init" }, cancellationToken ?? CancellationToken.None).Wait();
                }

                // ここまでの処理がすべて成功したら一時ディレクトリを本来のディレクトリ名に変更
                if (tempDir != projectRootDir) {
                    if (Directory.Exists(projectRootDir)) throw new InvalidOperationException($"プロジェクトディレクトリを {projectRootDir} に移動できません。");
                    Directory.Move(tempDir, projectRootDir);
                }

                log?.LogInformation("プロジェクト作成完了");

                return new GeneratedProject(projectRootDir, log);

            } catch {
                error = true;
                throw;

            } finally {
                if (tempDir != projectRootDir && Directory.Exists(tempDir) && (keepTempIferror == false || error == false)) {
                    try {
                        Directory.Delete(tempDir, true);
                    } catch (Exception ex) {
                        log?.LogError(ex, new Exception("Failure to delete temp directory.", ex).ToString());
                    }
                }
            }
        }
        /// <summary>
        /// 既存のプロジェクトを開きます。
        /// </summary>
        /// <param name="path">プロジェクトルートディレクトリの絶対パス</param>
        /// <returns>作成されたプロジェクトを表すオブジェクト</returns>
        public static GeneratedProject Open(string? path, ILogger? log = null) {
            string normalizedPath;

            if (string.IsNullOrWhiteSpace(path))
                normalizedPath = Directory.GetCurrentDirectory();
            else if (Path.IsPathRooted(path))
                normalizedPath = path;
            else
                normalizedPath = Path.Combine(Directory.GetCurrentDirectory(), path);

            if (!Directory.Exists(normalizedPath))
                throw new InvalidOperationException($"Directory is not exist: {normalizedPath}");
            return new GeneratedProject(normalizedPath, log);
        }

        private GeneratedProject(string projetctRoot, ILogger? log) {
            if (string.IsNullOrWhiteSpace(projetctRoot))
                throw new ArgumentException($"'{nameof(projetctRoot)}' is required.");

            ProjectRoot = Path.GetFullPath(projetctRoot);
            _log = log ?? ILoggerExtension.CreateConsoleLogger();

            CodeGenerator = new NijoCodeGenerator(this, log);
            Debugger = new GeneratedProjectDebugger(this, log);
            Migrator = new GeneratedProjectMigrator(this, log);
            SchemaXml = new AppSchemaXml(ProjectRoot);
        }

        private readonly ILogger _log;

        public string ProjectRoot { get; }
        public string WebClientProjectRoot => Path.Combine(ProjectRoot, "react");
        public string WebApiProjectRoot => Path.Combine(ProjectRoot, "webapi");

        public NijoCodeGenerator CodeGenerator { get; }
        public GeneratedProjectDebugger Debugger { get; }
        public GeneratedProjectMigrator Migrator { get; }
        public AppSchemaXml SchemaXml { get; }

        public Config ReadConfig() {
            var xDocument = SchemaXml.Load();
            return Config.FromXml(xDocument);
        }
        /// <summary>
        /// アプリケーションスキーマを生成します。
        /// </summary>
        /// <exception cref="InvalidOperationException">アプリケーションスキーマが不正な場合</exception>
        internal AppSchema BuildSchema() {
            var builder = new AppSchemaBuilder();
            if (!SchemaXml.ConfigureBuilder(builder, out var errors)) {
                throw new InvalidOperationException(errors.Join(Environment.NewLine));
            }

            // Nijo標準機能
            foreach (var feature in CodeGenerator.GetFeatures()) {
                feature.BuildSchema(builder);
            }

            if (!builder.TryBuild(out var appSchema, out var errors1)) {
                throw new InvalidOperationException(errors1.Join(Environment.NewLine));
            }

            return appSchema;
        }
        internal bool ValidateSchema(out IEnumerable<string> errors) {
            var errorList = new List<string>();
            errors = errorList;

            var builder = new AppSchemaBuilder();
            var builderOk = SchemaXml.ConfigureBuilder(builder, out var errors1);
            errorList.AddRange(errors1);

            if (builderOk) {
                var schemaOk = builder.TryBuild(out var _, out var errors2);
                errorList.AddRange(errors2);
                return schemaOk;
            } else {
                return false;
            }
        }

        private Terminal? _projectRootTerminal;
        private Terminal? _webapiDirTerminal;
        private Terminal? _clientDirTerminal;
        internal Terminal Terminal => _projectRootTerminal ??= new Terminal(ProjectRoot, _log);
        internal Terminal WebapiDirTerminal => _webapiDirTerminal ??= new Terminal(WebApiProjectRoot, _log);
        internal Terminal ClientDirTerminal => _clientDirTerminal ??= new Terminal(WebClientProjectRoot, _log);
    }
}
