using System;
using System.Collections.Generic;
using System.CommandLine;
using System.CommandLine.Builder;
using System.CommandLine.Parsing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Nijo.Core;
using Nijo.Util.DotnetEx;
using Microsoft.Extensions.Logging;

[assembly: InternalsVisibleTo("Nijo.IntegrationTest")]

namespace Nijo {
    public class Program {

        static async Task<int> Main(string[] args) {

            var logger = ILoggerExtension.CreateConsoleLogger();

            var cancellationTokenSource = new CancellationTokenSource();
            Console.CancelKeyPress += (sender, e) => {

                cancellationTokenSource.Cancel();

                // キャンセル時のリソース解放を適切に行うために既定の動作（アプリケーション終了）を殺す
                e.Cancel = true;
            };

            var path = new Argument<string?>(() => null);
            var applicationName = new Argument<string?>();
            var keepTempIferror = new Option<bool>("--keep-temp-if-error", description: "エラー発生時、原因調査ができるようにするため一時フォルダを削除せず残します。");

            var create = new Command(name: "create", description: "新しいプロジェクトを作成します。") { applicationName, keepTempIferror };
            var debug = new Command(name: "debug", description: "プロジェクトのデバッグを開始します。") { path };
            var fix = new Command(name: "fix", description: "コード自動生成処理をかけなおします。") { path };
            var dump = new Command(name: "dump", description: "スキーマ定義から構築したスキーマ詳細をTSV形式で出力します。") { path };

            create.SetHandler((applicationName, keepTempIferror) => {
                if (!CheckIfToolIsAvailable(cancellationTokenSource.Token, "dotnet", "npm", "git")) return;
                if (string.IsNullOrEmpty(applicationName)) throw new ArgumentException($"Application name is required.");
                var projectRootDir = Path.Combine(Directory.GetCurrentDirectory(), applicationName);
                GeneratedProject.Create(projectRootDir, applicationName, keepTempIferror, cancellationTokenSource.Token, logger);
            }, applicationName, keepTempIferror);

            debug.SetHandler(async (path) => {
                if (!CheckIfToolIsAvailable(cancellationTokenSource.Token, "dotnet", "npm")) return;
                var project = GeneratedProject.Open(path, logger);
                await project.Debugger.StartDebugging(cancellationTokenSource.Token);
            }, path);

            fix.SetHandler((path) => {
                GeneratedProject
                    .Open(path, logger)
                    .CodeGenerator
                    .UpdateAutoGeneratedCode();
            }, path);

            dump.SetHandler((path) => {
                var tsv = GeneratedProject
                    .Open(path, logger)
                    .BuildSchema()
                    .DumpTsv();
                Console.WriteLine(tsv);
            }, path);

            var rootCommand = new RootCommand("nijo");
            rootCommand.AddCommand(create);
            rootCommand.AddCommand(debug);
            rootCommand.AddCommand(fix);
            rootCommand.AddCommand(dump);

            var parser = new CommandLineBuilder(rootCommand)
                .UseDefaults()
                .UseExceptionHandler((ex, _) => {
                    if (ex is OperationCanceledException) {
                        Console.Error.WriteLine("キャンセルされました。");
                    } else {
                        cancellationTokenSource.Cancel();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Error.WriteLine(ex.ToString());
                        Console.ResetColor();
                    }
                })
                .Build();
            return await parser.InvokeAsync(args);
        }


        /// <summary>
        /// 外部ツールが使用可能かどうかを検査する（'--version' コマンドを実行することで確認）
        /// </summary>
        private static bool CheckIfToolIsAvailable(CancellationToken cancellationToken, params string[] names) {
            var ok = true;
            foreach (var name in names) {
                try {
                    var terminal = new Terminal(".", ILoggerExtension.CreateConsoleLogger());
                    terminal.Run(new[] { name, "--version" }, cancellationToken).Wait();
                } catch (OperationCanceledException) {
                    throw;
                } catch {
                    Console.Error.WriteLine($"Command line tool '{name}' is not available. Please install it from the official website of '{name}'.");
                    ok = false;
                }
            }
            return ok;
        }
    }
}
