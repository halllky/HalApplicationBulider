using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nijo.Parts;
using Nijo.Parts.WebServer;
using Nijo.Util.CodeGenerating;

namespace Nijo.Features.Debugging {
    internal class DebuggerController {
        internal const string RECREATE_DB_URL = "/WebDebugger/recreate-database";

        internal static SourceFile Render(CodeRenderingContext ctx) => new SourceFile {
            FileName = $"WebDebugger.cs",
            RenderContent = context => $$$""""
                using Microsoft.AspNetCore.Mvc;
                using System.Text.Json;
                using Microsoft.EntityFrameworkCore;

                namespace {{{ctx.Config.RootNamespace}}};

                #if DEBUG
                [ApiController]
                [Route("[controller]")]
                public class WebDebuggerController : ControllerBase {
                    public WebDebuggerController(ILogger<WebDebuggerController> logger, IServiceProvider provider, AutoGeneratedApplicationService appsrv) {
                        _logger = logger;
                        _provider = provider;
                        _appSrv = appsrv;
                    }
                    private readonly ILogger<WebDebuggerController> _logger;
                    private readonly IServiceProvider _provider;
                    private readonly AutoGeneratedApplicationService _appSrv;

                    [HttpPost("recreate-database")]
                    public HttpResponseMessage RecreateDatabase() {

                        _appSrv.{{{ApplicationService.BEFORE_DB_RECREATE}}}();

                        var dbContext = _provider.GetRequiredService<{{{ctx.Config.DbContextNamespace}}}.{{{ctx.Config.DbContextName}}}>();
                        dbContext.Database.EnsureDeleted();
                        dbContext.Database.EnsureCreated();

                        _appSrv.{{{ApplicationService.AFTER_DB_RECREATE}}}();

                        return new HttpResponseMessage {
                            StatusCode = System.Net.HttpStatusCode.OK,
                            Content = new StringContent("DBを再作成しました。"),
                        };
                    }

                    [HttpGet("secret-settings")]
                    public IActionResult GetSecretSettings() {
                        var runtimeSetting = _provider.GetRequiredService<{{{RuntimeSettings.ServerSetiingTypeFullName}}}>();
                        return this.JsonContent(runtimeSetting);
                    }
                    [HttpPost("secret-settings")]
                    public IActionResult SetSecretSettings([FromBody] {{{RuntimeSettings.ServerSetiingTypeFullName}}} settings) {
                        var json = settings.{{{RuntimeSettings.TO_JSON}}}();
                        using var sw = new System.IO.StreamWriter("{{{RuntimeSettings.JSON_FILE_NAME}}}", false, new System.Text.UTF8Encoding(false));
                        sw.WriteLine(json);
                        return Ok();
                    }
                }
                #endif
                """",
        };
    }
}
