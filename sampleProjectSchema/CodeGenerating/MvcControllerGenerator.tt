<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var controllerName = Aggregate.Name + "Controller";

    var sc = Aggregate.ToSearchConditionModel().ClassName;
    var li = Aggregate.ToListItemModel().ClassName;
    var si = Aggregate.ToSingleItemModel().ClassName;
    var listViewTypeName = $"haldoc.Runtime.ListViewModel<{sc}, {li}>";
    var singleViewTypeName = $"haldoc.Runtime.SingleViewModel<{si}>";
#>

namespace <#=Context.GetOutputNamespace(haldoc.Core.E_Namespace.MvcModel)#> {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    
    public class <#=controllerName#> : Controller {
        public <#=controllerName#>(haldoc.Core.ProjectContext context) {
            _projectContext = context;
            _aggregate = _projectContext.FindAggregate(typeof(<#=Aggregate.UnderlyingType.FullName#>));
        }
        private readonly haldoc.Core.Aggregate _aggregate;
        private readonly haldoc.Core.ProjectContext _projectContext;
        
        public IActionResult List() {
            var actionResult = _projectContext.MapToListView(_aggregate);
            if (actionResult == null) return NotFound();
            return View(actionResult.View, actionResult.Model);
        }
        public IActionResult ClearSearchCondition(<#=listViewTypeName#> model) {
            throw new NotImplementedException();
        }
        public IActionResult ExecuteSearch(<#=listViewTypeName#> model) {
            throw new NotImplementedException();
        }
        
        public IActionResult Create() {
            var actionResult = _projectContext.MapToCreateView(_aggregate);
            if (actionResult == null) return NotFound();
            return View(actionResult.View, actionResult.Model);
        }
        [HttpPost]
        public IActionResult SaveNewInstance(<#=singleViewTypeName#> model) {
            var actionResult = _projectContext.SaveNewInstance(_aggregate, model);
            if (actionResult.Errors.Any()) {
                foreach (var error in actionResult.Errors.SelectMany(e => e.MemberNames, (e, Member) => new { Member, e.ErrorMessage })) {
                    ModelState.AddModelError(error.Member, error.ErrorMessage);
                }
            }
            return View(actionResult.View, actionResult.Model);
        }
        
        public IActionResult Single() {
            throw new NotImplementedException();
        }
    }
}