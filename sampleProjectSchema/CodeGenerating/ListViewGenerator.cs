//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace haldoc.CodeGenerating {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class ListViewGenerator : ListViewGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\n@model ListViewModel;\n@{\n    ViewData[\"Title\"] = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Aggregate.Name));
            this.Write(";\n}\n\n<h1>\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Aggregate.Name));
            this.Write("\n</h1>\n\n<form>\n    <input type=\"hidden\" asp-for=\"AggregateID\" />\n    <input type=" +
                    "\"hidden\" asp-for=\"PageTitle\" />\n    \n");
 /* 検索条件欄 */ 
            this.Write(@"    <div>
        @for (int i = 0; i < Model.SearchConditionItems.Count; i++)
        {
            <label>
                <span>@Model.SearchConditionItems[i].Name</span>
                <input type=""hidden"" asp-for=""SearchConditionItems[i].Name"" />
                <input asp-for=""SearchConditionItems[i].Value"" />
            </label>
        }
        <button asp-action=""ClearSearchCondition"">クリア</button>
        <button asp-action=""ExecuteSearch"">検索</button>
    </div>
    
");
 /* 検索結果欄 */ 
            this.Write(@"    <div>
        <div style=""display: flex; justify-content: flex-end"">
            <a asp-controller=""Haldoc"" asp-action=""Create"" asp-route-aggregateId=""@Model.AggregateID"">新規作成</a>
        </div>
        <table class=""table table-sm"">
            <thead>
                <tr>
                    <th></th>
                    @for (int i = 0; i < Model.TableHeader.Count; i++)
                    {
                        <th>
                            @Model.TableHeader[i]
                            <input type=""hidden"" asp-for=""TableHeader[i]"" />
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.SearchResults.Count; i++)
                {
                    <tr>
                        <td>
                            <a asp-controller=""Haldoc"" asp-action=""Single"" asp-route-aggregateId=""@Model.AggregateID"">詳細</a>
                        </td>
                        @for (int j = 0; j < Model.TableHeader.Count; j++)
                        {
                            <td>
                                @Model.SearchResults[i][j]
                                <input type=""hidden"" asp-for=""SearchResults[i][j]"" />
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</form>
");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ListViewGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
