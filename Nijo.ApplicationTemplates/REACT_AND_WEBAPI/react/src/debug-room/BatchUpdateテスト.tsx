import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import { useFieldArray } from 'react-hook-form'
import { PanelGroup, Panel, PanelResizeHandle } from 'react-resizable-panels'
import * as Collection from '../__autoGenerated/collection'
import * as Input from '../__autoGenerated/input'
import * as Util from '../__autoGenerated/util'

import "../__autoGenerated/nijo-default-style.css"


export default function () {
  return (
    <Util.LocalRepositoryContextProvider>
      <Util.MsgContextProvider>
        <Page />
      </Util.MsgContextProvider>
    </Util.LocalRepositoryContextProvider>
  )
}

const Page = () => {

  // ローカルリポジトリ（サイドメニュー）
  const { changes } = Util.useLocalRepositoryChangeList()

  // リモートリポジトリ ※デバッグ用インメモリ
  const { arrRemoteRepos, save } = useInMemoryRemoteRepository()

  // ローカルリポジトリ
  const { control, reset: resetForm } = Util.useFormEx<{ items: Util.LocalRepositoryStateAndKeyAndItem<TestData>[] }>({})
  const { fields, append, update, remove } = useFieldArray({ name: 'items', control })
  const reposSetting: Util.LocalRepositoryArgs<TestData> = useMemo(() => ({
    dataTypeKey: 'TEST-DATA-20240204',
    getItemKey: data => data.key ?? '',
    getItemName: data => data.name ?? '',
    remoteItems: arrRemoteRepos,
  }), [arrRemoteRepos])

  const {
    ready,
    loadLocalItems,
    addToLocalRepository,
    updateLocalRepositoryItem,
    deleteLocalRepositoryItem,
    commit,
    reset: resetLocalRepos,
  } = Util.useLocalRepository(reposSetting)

  const handleAdd: React.MouseEventHandler<HTMLButtonElement> = useCallback(async () => {
    const newItem: TestData = { name: '新規データ' }
    const added = await addToLocalRepository(newItem)
    append(added)
  }, [append, addToLocalRepository])

  const handleUpdateRow = useCallback(async (index: number, row: Util.LocalRepositoryStateAndKeyAndItem<TestData>) => {
    const updated = await updateLocalRepositoryItem(row.itemKey, row.item)
    update(index, updated)
  }, [update, updateLocalRepositoryItem])

  const dtRef = useRef<Collection.DataTableRef<Util.LocalRepositoryStateAndKeyAndItem<TestData>>>(null)
  const handleRemove: React.MouseEventHandler<HTMLButtonElement> = useCallback(async () => {
    if (!dtRef.current) return
    const selected = dtRef.current.getSelectedRows()
    const deletedRowIndex: number[] = []
    for (const { row, rowIndex } of selected) {
      const deleted = await deleteLocalRepositoryItem(row.itemKey, row.item)
      if (deleted) update(rowIndex, deleted)
      else deletedRowIndex.push(rowIndex)
    }
    remove(deletedRowIndex)
  }, [remove, deleteLocalRepositoryItem])

  useEffect(() => {
    if (ready) loadLocalItems().then(items => resetForm({ items }))
  }, [ready, loadLocalItems, resetForm])

  const handleCreateDummy = useCallback(async () => {
    const initialDummyData = createDefaultData()
    for (const item of initialDummyData.items) {
      const created = await addToLocalRepository(item)
      append(created)
    }
  }, [append, addToLocalRepository])

  const handleCommit = useCallback(async () => {
    const localItems = await loadLocalItems()
    await save(localItems, commit)
  }, [save, loadLocalItems, commit])

  const handleReset = useCallback(async () => {
    await resetLocalRepos()
    resetForm({ items: await loadLocalItems() })
  }, [resetLocalRepos, loadLocalItems, resetForm])

  return (
    <PanelGroup
      direction="horizontal"
      className="w-full h-full p-2"
      style={{ fontFamily: '"Arial", "BIZ UDゴシック"', fontSize: 14 }}
    >
      <Panel defaultSize={21} className="flex flex-col">
        <div className="flex gap-2 justify-start">
          <Input.Button onClick={handleCommit}>コミット</Input.Button>
          <Input.Button onClick={handleReset}>リセット</Input.Button>
          <div className="flex-1"></div>
        </div>
        <Collection.DataTable
          data={changes}
          columns={LIST_COLS}
          className="flex-1"
        />
      </Panel>

      <PanelResizeHandle className="w-4" />

      <Panel>
        <PanelGroup direction="vertical">
          <Panel className="flex flex-col">
            <div className="flex gap-2 justify-start">
              <span className="font-bold">LOCAL</span>
              <Input.Button onClick={handleAdd}>追加</Input.Button>
              <Input.Button onClick={handleRemove}>削除</Input.Button>
              <Input.Button onClick={handleCreateDummy}>ダミー</Input.Button>
              <div className="flex-1"></div>
            </div>
            <Collection.DataTable
              ref={dtRef}
              data={fields}
              columns={LOCAL_REPOS_COLS}
              onChangeRow={handleUpdateRow}
              className="flex-1"
            />
          </Panel>

          <PanelResizeHandle className="h-2" />

          <Panel className="flex flex-col">
            <span className="font-bold">REMOTE</span>
            <Collection.DataTable
              data={arrRemoteRepos}
              columns={REMOTE_REPOS_COLS}
              className="flex-1"
            />
          </Panel>
        </PanelGroup>
        <Util.InlineMessageList />
        <Util.Toast />
      </Panel>
    </PanelGroup>
  )
}

type TestDataCollection = {
  items: TestData[]
}
type TestData = {
  key?: string
  name?: string
  numValue?: number
}

const LIST_COLS: Collection.ColumnDefEx<Util.TreeNode<Util.LocalRepositoryItemListItem>>[] = [
  { id: 'col0', header: '　', accessorFn: x => x.item.state, size: 12 },
  { id: 'col1', header: '　', accessorFn: x => x.item.itemName },
]
const LOCAL_REPOS_COLS: Collection.ColumnDefEx<Util.TreeNode<Util.LocalRepositoryStateAndKeyAndItem<TestData>>>[] = [
  { id: 'state', header: '', accessorFn: x => x.item.state, size: 12 },
  { id: 'key', header: 'key', accessorFn: x => x.item.item.key, setValue: (x, v) => x.item.item.key = v, cellEditor: Input.Word },
  { id: 'name', header: '名前', accessorFn: x => x.item.item.name, setValue: (x, v) => x.item.item.name = v, cellEditor: Input.Word },
  { id: 'numValue', header: '数値', accessorFn: x => x.item.item.numValue, setValue: (x, v) => x.item.item.numValue = v, cellEditor: Input.Num },
]
const REMOTE_REPOS_COLS: Collection.ColumnDefEx<Util.TreeNode<TestData>>[] = [
  { id: 'key', header: 'key', accessorFn: x => x.item.key },
  { id: 'name', header: '名前', accessorFn: x => x.item.name },
  { id: 'numValue', header: '数値', accessorFn: x => x.item.numValue },
]


function createDefaultData(): TestDataCollection {
  const items: TestData[] = [
    { key: '001', name: 'データ01', numValue: 1.00 },
    { key: '002', name: 'データ02', numValue: 2.00 },
    { key: '003', name: 'データ03', numValue: 3.00 },
    { key: '004', name: 'データ04', numValue: 4.00 },
  ]
  return { items }
}


const useInMemoryRemoteRepository = () => {
  const [, dispatchMsg] = Util.useMsgContext()
  const [inmemoryRemoteRepos, setInmemoryRemoteRepos] = useState<Map<string, TestData>>(() => new Map())

  const arrRemoteRepos = useMemo(() => {
    return Array.from(inmemoryRemoteRepos.values())
  }, [inmemoryRemoteRepos])

  const save = useCallback(async (
    localReposItems: Util.LocalRepositoryStateAndKeyAndItem<TestData>[],
    commit: (...itemKeys: string[]) => Promise<void>
  ) => {
    const remote = new Map(inmemoryRemoteRepos)
    const commited: string[] = []

    for (const item of localReposItems) {
      if (!item.item.key) continue
      if (item.state === '+') {
        if (remote.has(item.item.key)) {
          dispatchMsg(msg => msg.error(`キー重複: ${item.item.key}`))
          continue
        }
        remote.set(item.item.key, item.item)
        commited.push(item.itemKey)

      } else if (item.state === '*') {
        if (!remote.has(item.item.key)) {
          dispatchMsg(msg => msg.error(`更新対象なし: ${item.item.key}`))
          continue
        }
        remote.set(item.item.key, item.item)
        commited.push(item.itemKey)

      } else if (item.state === '-') {
        if (!remote.has(item.item.key)) {
          dispatchMsg(msg => msg.error(`削除対象なし: ${item.item.key}`))
          continue
        }
        remote.delete(item.item.key)
        commited.push(item.itemKey)
      }
    }
    setInmemoryRemoteRepos(remote)
    await commit(...commited)
    dispatchMsg(msg => msg.info('保存しました。'))
  }, [dispatchMsg, inmemoryRemoteRepos])

  return {
    arrRemoteRepos,
    save,
  }
}
