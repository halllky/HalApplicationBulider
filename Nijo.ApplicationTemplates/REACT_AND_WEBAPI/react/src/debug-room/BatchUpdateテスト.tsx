import React, { useCallback, useEffect, useMemo, useRef } from 'react'
import { useFieldArray } from 'react-hook-form'
import { PanelGroup, Panel, PanelResizeHandle } from 'react-resizable-panels'
import * as Collection from '../__autoGenerated/collection'
import * as Input from '../__autoGenerated/input'
import * as Util from '../__autoGenerated/util'

import "../__autoGenerated/nijo-default-style.css"


export default function () {
  return (
    <Util.LocalRepositoryContextProvider>
      <Util.MsgContextProvider>
        <Page />
      </Util.MsgContextProvider>
    </Util.LocalRepositoryContextProvider>
  )
}

const Page = () => {

  const { } = Util.useLocalRepositoryList()
  const { items, rhf: { registerEx }, createNewItem, modifyItem, markToDelete } = Util.useLocalRepository(REPOS_SETTING)
  const dtRef = useRef<Collection.DataTableRef<Util.ItemWithLocalRepositoryState<TestData>>>(null)

  // デバッグ用
  const handleReset = useCallback(async () => {
    // const initialDummyData = createDefaultData()
    // reset(initialDummyData)
    // for (const item of initialDummyData.items) {
    //   await createNewItem(DATA_TYPE_KEY, item)
    // }
  }, [])

  // 一時保存
  const handleSave = useCallback(async () => {
    // // TODO: 1件ずつ保存してしまっている
    // // TODO: RHF側でadd/modify/deleteの区別を持っていない
    // for (const item of fields) {

    //   await saveLocal({ changeType, contentsJson, dataTypeKey, itemKey, itemName })
    // }
  }, [])

  // データ操作
  const handleAdd: React.MouseEventHandler<HTMLButtonElement> = useCallback(async e => {
    const newItemId = await createNewItem()
    // TODO: ↑ここで生成したIDがどこにも保持されない
  }, [createNewItem])

  const handleRemove: React.MouseEventHandler<HTMLButtonElement> = useCallback(e => {
    if (!dtRef.current) return
    markToDelete(...dtRef.current.getSelectedItems())
  }, [markToDelete])

  return (
    <PanelGroup
      direction="horizontal"
      className="w-full h-full"
      style={{ fontFamily: '"Arial", "BIZ UDゴシック"', fontSize: 14 }}
    >
      <Panel defaultSize={20}>
        <Collection.DataTable
          data={undefined} // TODO
          columns={LIST_COLS}
          className="h-full"
        />
      </Panel>

      <PanelResizeHandle className="w-4" />

      <Panel className="flex flex-col">
        <div className="flex gap-2 justify-start">
          <Input.Button onClick={handleAdd}>一時保存</Input.Button>
          <div className="basis-4"></div>
          <Input.Button onClick={handleAdd}>追加</Input.Button>
          <Input.Button onClick={handleRemove}>削除</Input.Button>
          <div className="flex-1"></div>
          <Input.Button onClick={handleReset}>初期化</Input.Button>
        </div>
        <Collection.DataTable
          ref={dtRef}
          data={items}
          columns={CONTENTS_COLS}
          onChangeRow={(ix, data) => modifyItem(data)}
          className="flex-1"
        />
        <Util.InlineMessageList />
        <Util.Toast />
      </Panel>
    </PanelGroup>
  )
}

type TestDataCollection = {
  items: TestData[]
}
type TestData = {
  key?: string
  name?: string
  numValue?: number
}

const LIST_COLS: Collection.ColumnDefEx<Util.TreeNode<Util.ContextItem>>[] = [
  { id: 'col0', header: '', accessorFn: x => x.item.changeType },
  { id: 'col1', header: '　', accessorFn: x => x.item.itemName },
]
const CONTENTS_COLS: Collection.ColumnDefEx<Util.TreeNode<Util.ItemWithLocalRepositoryState<TestData>>>[] = [
  { id: 'key', header: 'key', accessorFn: x => x.item.item.key, cellEditor: Input.Word },
  { id: 'name', header: '名前', accessorFn: x => x.item.item.name, cellEditor: Input.Word },
  { id: 'numValue', header: '数値', accessorFn: x => x.item.item.numValue, cellEditor: Input.Num },
]

const REPOS_SETTING: Util.LocalRepositoryArgs<TestData> = {
  dataTypeKey: 'TEST-DATA-20240204',
  serialize: data => JSON.stringify(data),
  deserialize: str => JSON.parse(str),
  getItemKey: data => data.key ?? '',
  getItemName: data => data.name ?? '',
  getNewItem: () => ({ name: '新しいデータ' }),
}

const DATA_TYPE_KEY = 'TEST-DATA-20240204'
function createDefaultData(): TestDataCollection {
  const items: TestData[] = [
    { key: '001', name: 'データ01', numValue: 1.00 },
    { key: '002', name: 'データ02', numValue: 2.00 },
    { key: '003', name: 'データ03', numValue: 3.00 },
    { key: '004', name: 'データ04', numValue: 4.00 },
  ]
  return { items }
}
