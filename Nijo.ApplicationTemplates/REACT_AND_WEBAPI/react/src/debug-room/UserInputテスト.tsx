import { useCallback, useMemo, useState } from 'react'
import { QueryClient, QueryClientProvider } from 'react-query'
import { useFieldArray } from 'react-hook-form'
import { ValidationHandler, tryParseAsNumberOrEmpty } from '../__autoGenerated/input'
import { DropDownBody, TextInputBase } from '../__autoGenerated/input/TextInputBase'
import * as Util from '../__autoGenerated/util'
import * as Layout from '../__autoGenerated/collection'
import { ComboBoxBase } from '../__autoGenerated/input/ComboBoxBase'

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      refetchOnWindowFocus: false,
    },
  },
})

export default function () {

  const { control, getValues } = Util.useFormEx<{ gridItems: DisplayData[] }>({
    defaultValues: () => Promise.resolve({ gridItems: getDefaultData() }),
  })
  const { fields, update } = useFieldArray({ control, name: 'gridItems' })
  const columnDef = useMemo(() => {
    return getColumnDef()
  }, [])

  return (
    <QueryClientProvider client={queryClient}>
      <div className="h-full flex flex-col gap-2 justify-start items-start p-2">
        <Layout.DataTable
          data={fields}
          columns={columnDef}
          onChangeRow={update}
          className="flex-1 self-stretch"
        />
        <textarea
          readOnly
          value={JSON.stringify(getValues('gridItems'), undefined, '  ')}
          className="flex-1 self-stretch border border-1 border-color-2"
        />
      </div>
    </QueryClientProvider>
  )
}


type DirtyValue = string
type FormattedNumberString = string
type RefInfo = { k: string, t: string }

type DisplayData = {
  strValue?: string
  numValue?: FormattedNumberString // | DirtyValue // TODO
  refValue?: RefInfo // | DirtyValue // TODO
}
type SaveCommand = {
  strValue?: string
  numValue?: number
  refValue?: { key: string }
}
const DROPDOWN_OPTIONS: RefInfo[] = [
  { k: 'a', t: 'あ' },
  { k: 'i', t: 'い' },
  { k: 'u', t: 'う' },
]
const getDefaultData = (): DisplayData[] => [
  { strValue: 'THIS IS STRING VALUE.', numValue: '123456789', refValue: { ...DROPDOWN_OPTIONS[1] } },
  {},
]
const getColumnDef = (): Layout.ColumnDefEx<DisplayData>[] => [
  {
    id: 'col0',
    header: 'strValue',
    accessorFn: row => row.strValue,
    editSetting: {
      type: 'text',
      getTextValue: row => row.strValue,
      setTextValue: (row, value) => { row.strValue = value },
    },
  },
  {
    id: 'col1',
    header: 'numValue',
    accessorFn: row => row.numValue,
    editSetting: {
      type: 'text',
      getTextValue: row => row.numValue,
      setTextValue: (row, value) => {
        // TODO: dirty value
        row.numValue = value
      },
    },
  },
  {
    id: 'col2',
    header: 'refValue',
    accessorFn: row => row.refValue?.t,
    editSetting: getRefValueEditSetting(),
  },
]
const getRefValueEditSetting = () => {
  const editSetting: Layout.ColumnEditSetting<DisplayData, RefInfo> = {
    type: 'async-combo',
    queryKey: 'REFINFO',
    query: async keyword => keyword
      ? DROPDOWN_OPTIONS.filter(opt => opt.t.includes(keyword))
      : [...DROPDOWN_OPTIONS],
    emitValueSelector: opt => opt,
    matchingKeySelectorFromEmitValue: opt => opt.k,
    matchingKeySelectorFromOption: opt => opt.k,
    getValueFromRow: row => row.refValue,
    setValueToRow: (row, value) => {
      row.refValue = value
    },
    textSelector: opt => opt?.t,
  }
  return editSetting as Layout.ColumnEditSetting<DisplayData, unknown>
}


// export default function () {

//   const [type, setType] = useState<'str' | 'num' | 'opt'>('str')
//   const [value, setValue] = useState<string>()
//   const [numValue, setNumValue] = useState<FormattedNumberString | DirtyValue>()
//   const [refValue, setRefValue] = useState<RefInfo | DirtyValue>()

//   const handleChange = useCallback((value: string | undefined) => {
//     if (type === 'str') {
//       setValue(value)
//       setNumValue(value)
//       setRefValue(value)
//     } else if (type === 'num') {
//       const { formatted } = tryParseAsNumberOrEmpty(value)
//       setValue(formatted)
//       setNumValue(formatted)
//       setRefValue(formatted)
//     } else {
//       const selected = DROPDOWN_OPTIONS.find(opt => opt.k === value)
//       setValue(value)
//       setNumValue(value)
//       setRefValue(selected ? { key: selected.k, item: selected } : value)
//     }
//   }, [type, setValue, setNumValue, setRefValue])

//   const onValidate: ValidationHandler | undefined = useMemo(() => {
//     return type === 'num' ? tryParseAsNumberOrEmpty : undefined
//   }, [type])

//   const dropdownBody: DropDownBody | undefined = useMemo(() => {
//     if (type !== 'opt') return undefined
//     return ({ focusRef }) => (
//       <ul ref={focusRef}>
//         {DROPDOWN_OPTIONS.map(({ k, t }) => (
//           <li key={k}>
//             {t}
//           </li>
//         ))}
//       </ul>)
//   }, [type])

//   return (
//     <div className="flex flex-col gap-2 justify-start items-start p-2">
//       <div className="flex gap-2">
//         <label><input type="radio" name="type" value="str" checked={type === 'str'} onChange={() => setType('str')} />文字列</label>
//         <label><input type="radio" name="type" value="num" checked={type === 'num'} onChange={() => setType('num')} />数値</label>
//         <label><input type="radio" name="type" value="opt" checked={type === 'opt'} onChange={() => setType('opt')} />選択</label>
//       </div>

//       {type !== 'opt' && (
//         <TextInputBase
//           value={value}
//           onChange={handleChange}
//           dropdownBody={dropdownBody}
//           onValidate={onValidate}
//         />
//       )}
//       {type === 'opt' && (
//         <ComboBoxBase
//           value={value}
//           onChange={handleChange}
//           options={DROPDOWN_OPTIONS}
//           emitValueSelector={x => x.k}
//           matchingKeySelectorFromEmitValue={x => x}
//           matchingKeySelectorFromOption={x => x.k}
//           textSelector={x => x.t}
//         />
//       )}

//       <table className="text-left">
//         <tbody>
//           <tr>
//             <th>type</th>
//             <td>{type}</td>
//           </tr>
//           <tr>
//             <th>value</th>
//             <td>{value}</td>
//           </tr>
//           <tr>
//             <th>numValue</th>
//             <td>{numValue}</td>
//           </tr>
//           <tr>
//             <th>refValue</th>
//             <td>{JSON.stringify(refValue)}</td>
//           </tr>
//         </tbody>
//       </table>
//     </div>
//   )
// }
