import React from "react"
import useEvent from "react-use-event-hook"
import * as Input from "./__autoGenerated/input"
import * as Layout from "./__autoGenerated/collection"
import * as Util from "./__autoGenerated/util"
import { PageState } from "./types"

export const useAppSetting = (
  rhfMethods: ReturnType<typeof Util.useFormEx<PageState>>,
  backendDomain: string | undefined,
  onChangBackendDomain: (v: string | undefined) => void,
  editingXmlFilePath: string | undefined,
) => {
  const [, dispatchDialog] = Layout.useDialogContext()

  const openAppSettingDialog = useEvent(() => {
    dispatchDialog(state => state.pushDialog('設定', context => {
      const config = Object.entries(rhfMethods.getValues('config'))

      return (
        <div className="grid grid-cols-[18rem,1fr] gap-x-2 gap-y-px">
          <Label>バックエンドURL</Label>
          <Input.Word value={backendDomain} onChange={onChangBackendDomain} className="flex-1" />

          <Label>ファイル名</Label>
          <span className="flex-1 select-all">{editingXmlFilePath}</span>

          <hr className="col-span-full py-1" />

          {/* コンフィグ */}
          {config.map(([key, value]) => (
            <React.Fragment key={key}>
              <Label>{key}</Label>
              <div>{value == null ? '' : String(value)}</div>
            </React.Fragment>
          ))}
        </div>
      )
    }))
  })

  return {
    openAppSettingDialog,
  }
}

const Label = ({ children }: { children?: React.ReactNode }) => {
  return (
    <span className="text-color-6 text-right break-all">
      {children}
    </span>
  )
}
