import React from 'react'
import useEvent from 'react-use-event-hook'
import * as Util from './__autoGenerated/util'
import { AggregateOrMember, ClientRequest, ConfigType, getEmptyPageState, GridRow, PageState, ValidationError } from './types'

/** nijo.exe 側との通信を行います。 */
export const useBackend = () => {
  const [, msg] = Util.useMsgContext()
  const [, toast] = Util.useToastContext()

  // 画面表示直後の一瞬のみfalse。通信準備完了したらtrue
  const [ready, setReady] = React.useState(false)

  // サーバー側ドメイン。
  // - nijo.exeから起動したときは '' (空文字)
  // - Nijoプロジェクトのデバッグプロファイル "nijo ui" が立ち上がっているときは https://localhost:8081 を画面から入力する
  const [backendDomain, setBackendDomain] = React.useState<string | undefined>('')
  const onChangBackendDomain = useEvent((value: string | undefined) => {
    if (value) {
      setBackendDomain(value)
      localStorage.setItem(STORAGE_KEY, value)
    } else {
      setBackendDomain(value)
      localStorage.removeItem(STORAGE_KEY)
    }
  })
  React.useLayoutEffect(() => {
    const savedValue = localStorage.getItem(STORAGE_KEY)
    if (savedValue) setBackendDomain(savedValue)
    setReady(true)
  }, [])

  // 読み込み
  const load = useEvent(async (): Promise<PageState> => {
    try {
      const response = await fetch(`${backendDomain ?? ''}/load`, {
        method: 'GET',
      })
      if (!response.ok) {
        const text = await response.text()
        msg(m => m.error(text))
        return getEmptyPageState()
      }
      const responseBody = await response.json() as PageState
      return responseBody
    } catch (error) {
      msg(m => m.error(error))
      return getEmptyPageState()
    }
  })

  // バリデーション
  const validate = useEvent(async (config: ConfigType, aggregates: GridRow[]): Promise<ValidationError> => {
    const body: ClientRequest = { config, aggregates }
    const response = await fetch(`${backendDomain ?? ''}/validate`, {
      method: 'POST',
      body: JSON.stringify(body)
    })
    const validationErrors = await response.json() as ValidationError
    return validationErrors
  })

  // mermaid.jsのグラフ描画
  const mermaid = useEvent(async (config: ConfigType, aggregates: GridRow[]): Promise<string> => {
    const body: ClientRequest = { config, aggregates }
    const response = await fetch(`${backendDomain ?? ''}/mermaid`, {
      method: 'POST',
      body: JSON.stringify(body)
    })
    const mermaidJsText = await response.text()
    return mermaidJsText
  })

  // 保存
  const save = useEvent(async (config: ConfigType, aggregates: GridRow[]): Promise<boolean> => {
    const body: ClientRequest = { config, aggregates }
    const response = await fetch(`${backendDomain ?? ''}/save`, {
      method: 'POST',
      body: JSON.stringify(body)
    })
    if (!response.ok) {
      toast(m => m.warn('保存できませんでした。'))
      return false
    }
    toast(m => m.info('保存しました。'))
    return true
  })

  return {
    /** 画面初期表示時のみfalse。通信準備完了したらtrue */
    ready,
    /** バックエンド側ドメイン。末尾スラッシュなし。 */
    backendDomain,
    /** バックエンド側ドメインを設定します。 */
    onChangBackendDomain,
    /** 画面初期表示時データを読み込んで返します。 */
    load,
    /** 入力検証 */
    validate,
    /** Mermaid.js のグラフテキスト取得 */
    mermaid,
    /** 保存 */
    save,
  }
}

const STORAGE_KEY = 'NIJO-UI::BACKEND-API'
