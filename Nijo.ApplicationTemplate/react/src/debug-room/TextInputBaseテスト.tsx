import React from 'react'
import { useWatch } from 'react-hook-form'
import { QueryClient, QueryClientProvider } from 'react-query'
import * as Input from '../__autoGenerated/input'
import * as Layout from '../__autoGenerated/collection'
import * as Util from '../__autoGenerated/util'
const VForm2 = Layout.VForm2

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      refetchOnWindowFocus: false,
    },
  },
})

export default function () {

  const { registerEx, control } = Util.useFormEx<TestData>({ defaultValues: getDefaultTestData() })
  const rootValue = useWatch({ control })

  return (
    <QueryClientProvider client={queryClient}>
      <div className="grid grid-cols-[8rem,1fr] px-8 py-4 gap-2">
        <label>普通のテキスト</label>
        <Input.Word {...registerEx('普通のテキスト')} />
        <label>フォーマッタつき</label>
        <Input.Date {...registerEx('フォーマッタつき')} />
        <label>同期DDL</label>
        <Input.ComboBox {...registerEx('同期DDL')} {...propsAlias1} />
        <label>非同期DDL</label>
        <Input.AsyncComboBox {...registerEx('非同期DDL')} {...propsAlias2} />

        <Layout.UnknownObjectViewer value={rootValue} className="col-span-2 pt-8" />
      </div>
    </QueryClientProvider>
  )
}

type TestData = {
  普通のテキスト?: string
  フォーマッタつき?: string
  同期DDL?: DDLItem
  非同期DDL?: DDLItem
}
const getDefaultTestData = (): TestData => ({
  普通のテキスト: undefined,
  フォーマッタつき: undefined,
  同期DDL: undefined,
  非同期DDL: undefined,
})

const ddlSource = [
  { key: 'aaa' as const, text: 'あ' },
  { key: 'iii' as const, text: 'い' },
  { key: 'uuu' as const, text: 'う' },
]
type DDLItem = typeof ddlSource[0]

// ↓ これの定義しなければならない量を減らしたい……
const propsAlias1 = {
  emitValueSelector: (x: DDLItem) => x,
  matchingKeySelectorFromEmitValue: (x: DDLItem) => x.key,
  matchingKeySelectorFromOption: (x: DDLItem) => x.key,
  textSelector: (x: DDLItem) => x.text,
  options: ddlSource,
}
const propsAlias2 = {
  query: async (q: string | undefined) => (q ? ddlSource.filter(y => y.key.includes(q)) : []),
  emitValueSelector: (x: DDLItem) => x,
  matchingKeySelectorFromEmitValue: (x: DDLItem) => x.key,
  matchingKeySelectorFromOption: (x: DDLItem) => x.key,
  textSelector: (x: DDLItem) => x.text,
}
