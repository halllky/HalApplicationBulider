import { useCallback, useState } from 'react'
import { VerticalForm as VForm, TabLayout } from '../__autoGenerated/collection'
import * as Input from '../__autoGenerated/input'
import { TvIcon } from '@heroicons/react/24/outline'
import { CogIcon } from '@heroicons/react/24/outline'
import { TagIcon } from '@heroicons/react/20/solid'

export default function () {

  const [dark, setDark] = useState<boolean | undefined>(false)
  const [border, setBorder] = useState<boolean | undefined>(true)
  const [spacing, setSpacing] = useState<boolean | undefined>(true)
  const [closable, setClosable] = useState<boolean | undefined>(true)

  const [tabCount, setTabCount] = useState(3)
  const handleTabCountChange = useCallback((value: number | undefined) => {
    setTabCount(value ?? 0)
  }, [setTabCount])

  const handleTabClose = useCallback(() => {
    setTabCount(Math.max(0, tabCount - 1))
  }, [tabCount, setTabCount])

  const tabs = Array.from({ length: tabCount })

  return (
    <VForm.Container className={`p-4 ${dark ? 'dark' : ''}`}>
      <VForm.Item>
        <label className="flex items-center gap-2">
          <Input.CheckBox value={dark} onChange={setDark} />
          <span className="text-color-8">ダークモード</span>
        </label>
        <label className="flex items-center gap-2">
          <Input.CheckBox value={border} onChange={setBorder} />
          <span className="text-color-8">枠線</span>
        </label>
        <label className="flex items-center gap-2">
          <Input.CheckBox value={spacing} onChange={setSpacing} />
          <span className="text-color-8">スペース</span>
        </label>
        <label className="flex items-center gap-2">
          <Input.CheckBox value={closable} onChange={setClosable} />
          <span className="text-color-8">閉じるボタン</span>
        </label>
      </VForm.Item>
      <VForm.Item label="タブの数">
        <Input.Num value={tabCount} onChange={handleTabCountChange} />
      </VForm.Item>
      <VForm.Item wide>

        {/* 実装例 ここから */}
        <TabLayout.Container className={`${spacing ? 'm-2' : ''} ${border ? 'border border-color-4' : ''}`}>

          <TabLayout.Bar
            atStart={(
              <h1 className="font-bold self-center m-1">タブ前挿入文字</h1>
            )}
            atEnd={(
              <div className="flex gap-1 m-1">
                <Input.IconButton icon={TvIcon} fill>TV</Input.IconButton>
                <Input.IconButton icon={CogIcon} fill>Setting</Input.IconButton>
                <Input.IconButton icon={TagIcon} fill>タグ</Input.IconButton>
              </div>
            )}
          >
            {tabs.map((_, i) => (
              <TabLayout.Tab key={i} tabKey={i}
                label={i % 4 === 0 ? `これは${i}番目のタブのラベルです。` : `${i}番目のタブ`}
                onClose={closable ? handleTabClose : undefined}
              />
            ))}
          </TabLayout.Bar>

          {tabs.map((_, i) => (
            <TabLayout.Panel key={i} tabKey={i} className="p-4">
              <span className="text-color-8">{i}番目のタブのコンテンツです。</span>
            </TabLayout.Panel>
          ))}

        </TabLayout.Container>
        {/* 実装例 ここまで */}

      </VForm.Item>
    </VForm.Container>
  )
}
