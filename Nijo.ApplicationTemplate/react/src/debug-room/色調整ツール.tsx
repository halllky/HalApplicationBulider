import React from 'react'
import * as ReactDOM from 'react-dom'
import * as ReactHookForm from 'react-hook-form'
import * as Icon from '@heroicons/react/24/solid'
import useEvent from 'react-use-event-hook'
import { IconButton, useToastContext, useUserSetting } from '../__autoGenerated'

/**
 * 画面全体の色を確認しながら決めていくデバッグ用の色調整ツール。
 */
export default ({ className }: { className?: string }) => {

  // ダークモード切替
  const { data: userSettingData, save } = useUserSetting()
  const handleToggleDark = useEvent(() => {
    save({ ...userSettingData, darkMode: !userSettingData.darkMode })
  })

  // 色データ
  const { register, control } = ReactHookForm.useForm<ColorToolData>({ defaultValues: createNewColorToolData() })
  const data = ReactHookForm.useWatch({ control })
  const style = React.useMemo(() => {
    return data ? renderCssClassObject(getCssStyleObjects(data as ColorToolData, false)) : ''
  }, [data])

  // クリップボードにコピー
  const [, dispatchToast] = useToastContext()
  const handleCopy = useEvent(() => {
    navigator.clipboard.writeText(JSON.stringify(data, undefined, '  '))
    dispatchToast(x => x.info('コピーしました。'))
  })

  return (
    <div className={`flex flex-col gap-1 items-start ${className ?? ''}`}>
      <div className="flex items-center">
        <div className="font-bold">ベース</div>
        <div className="basis-2"></div>
        {Object.entries(data.neutral ?? {}).map(([key]) => (
          <label key={key} className="flex flex-col">
            {key}
            <input type="color" {...register(`neutral.${key}` as ReactHookForm.FieldPath<ColorToolData>)} />
          </label>
        ))}
      </div>
      <div className="flex items-center">
        <div className="font-bold">ボタン</div>
        <div className="basis-2"></div>
        {Object.entries(data.cyan ?? {}).map(([key]) => (
          <label key={key} className="flex flex-col">
            {key}
            <input type="color" {...register(`cyan.${key}` as ReactHookForm.FieldPath<ColorToolData>)} />
          </label>
        ))}
      </div>
      <IconButton outline onClick={handleToggleDark}>ダークモード切替</IconButton>
      <IconButton fill icon={Icon.ClipboardDocumentIcon} onClick={handleCopy}>
        tailwind.config.jsの形式でクリップボードに保存する
      </IconButton>

      {/* 色の変化を視覚的に確認するためにCSSクラス定義を直接書き換えるDOM要素（root直下にレンダリングさせる） */}
      {ReactDOM.createPortal(
        <style>
          {style}
        </style>,
        document.getElementById('root')!)}
    </div>
  )
}

type ColorToolData = {
  neutral: {
    50: string
    100: string
    200: string
    300: string
    400: string
    500: string
    600: string
    700: string
    800: string
    900: string
    950: string
  }
  cyan: {
    50: string
    200: string
    300: string
    600: string
    700: string
    950: string
  }
}
const createNewColorToolData = (): ColorToolData => ({
  neutral: {
    50: '#f9fafb',
    100: '#f3f4f6',
    200: '#e5e7eb',
    300: '#d1d5db',
    400: '#9ca3af',
    500: '#6b7280',
    600: '#4b5563',
    700: '#374151',
    800: '#1f2937',
    900: '#111827',
    950: '#030712',
  },
  cyan: {
    50: '#ecfeff',
    200: '#a5f3fc',
    300: '#67e8f9',
    600: '#0891b2',
    700: '#0e7490',
    950: '#083344',
  },
})

const getCssStyleObjects = (x: ColorToolData, dark: boolean): { [className: string]: { [styleKey: string]: string } } => ({
  '.border-color-1': { 'border-color': !dark ? x.neutral[50] : x.neutral[950] },
  '.border-color-2': { 'border-color': !dark ? x.neutral[100] : x.neutral[900] },
  '.border-color-3': { 'border-color': !dark ? x.neutral[200] : x.neutral[800] },
  '.border-color-4': { 'border-color': !dark ? x.neutral[300] : x.neutral[700] },
  '.border-color-5': { 'border-color': !dark ? x.neutral[400] : x.neutral[600] },
  '.border-color-6': { 'border-color': !dark ? x.neutral[500] : x.neutral[500] },
  '.border-color-7': { 'border-color': !dark ? x.neutral[600] : x.neutral[400] },
  '.border-color-8': { 'border-color': !dark ? x.neutral[700] : x.neutral[300] },
  '.border-color-9': { 'border-color': !dark ? x.neutral[800] : x.neutral[200] },
  '.border-color-10': { 'border-color': !dark ? x.neutral[900] : x.neutral[100] },
  '.border-color-11': { 'border-color': !dark ? x.neutral[950] : x.neutral[50] },

  '.text-color-1': { 'color': !dark ? x.neutral[50] : x.neutral[950] },
  '.text-color-2': { 'color': !dark ? x.neutral[100] : x.neutral[900] },
  '.text-color-3': { 'color': !dark ? x.neutral[200] : x.neutral[800] },
  '.text-color-4': { 'color': !dark ? x.neutral[300] : x.neutral[700] },
  '.text-color-5': { 'color': !dark ? x.neutral[400] : x.neutral[600] },
  '.text-color-6': { 'color': !dark ? x.neutral[500] : x.neutral[500] },
  '.text-color-7': { 'color': !dark ? x.neutral[600] : x.neutral[400] },
  '.text-color-8': { 'color': !dark ? x.neutral[700] : x.neutral[300] },
  '.text-color-9': { 'color': !dark ? x.neutral[800] : x.neutral[200] },
  '.text-color-10': { 'color': !dark ? x.neutral[900] : x.neutral[100] },
  '.text-color-11': { 'color': !dark ? x.neutral[950] : x.neutral[50] },

  '.bg-color-1': { 'background-color': !dark ? x.neutral[50] : x.neutral[950] },
  '.bg-color-2': { 'background-color': !dark ? x.neutral[100] : x.neutral[900] },
  '.bg-color-3': { 'background-color': !dark ? x.neutral[200] : x.neutral[800] },
  '.bg-color-4': { 'background-color': !dark ? x.neutral[300] : x.neutral[700] },
  '.bg-color-5': { 'background-color': !dark ? x.neutral[400] : x.neutral[600] },
  '.bg-color-6': { 'background-color': !dark ? x.neutral[500] : x.neutral[500] },
  '.bg-color-7': { 'background-color': !dark ? x.neutral[600] : x.neutral[400] },
  '.bg-color-8': { 'background-color': !dark ? x.neutral[700] : x.neutral[300] },
  '.bg-color-9': { 'background-color': !dark ? x.neutral[800] : x.neutral[200] },
  '.bg-color-10': { 'background-color': !dark ? x.neutral[900] : x.neutral[100] },
  '.bg-color-11': { 'background-color': !dark ? x.neutral[950] : x.neutral[50] },

  '.button-style-fill': {
    'background-color': !dark ? x.cyan[700] : x.cyan[300],
    'color': !dark ? x.cyan[50] : x.cyan[950],
  },
  '.button-style-fill-loading': {
    'background-color': !dark ? x.cyan[200] : x.cyan[700],
    'color': !dark ? x.cyan[50] : x.cyan[950],
  },
  '.button-style-outline': {
    'color': !dark ? x.cyan[600] : x.cyan[300],
    'border-color': !dark ? x.cyan[600] : x.cyan[300],
  },
  '.button-style-outline-loading': {
    'color': !dark ? x.cyan[200] : x.cyan[300],
    'border-color': !dark ? x.cyan[200] : x.cyan[300],
  },
})
const renderCssClassObject = (obj: ReturnType<typeof getCssStyleObjects>): string => {
  const arr: string[] = Object.entries(obj).map(([className, styles]) => {
    const stylesString = Object.entries(styles).map(([styleName, value]) => `${styleName}: ${value}!important;`)
    return `${className} {
      ${stylesString.join('\n  ')}
    }`
  })
  return arr.join('\n')
}
