import { useState } from "react"
import { VerticalForm as VForm } from "../__autoGenerated/collection"
import * as Input from "../__autoGenerated/input"
import "../__autoGenerated/nijo-default-style.css"

/**
 * 【パターン】
 * Container
 * - depth: 0, 1以上
 * - label: あり、なし
 * - leftColumnWidth: 指定あり、なし
 * - indentSizePx: 指定あり、なし
 * - 内容する要素: 0, 1, 2以上
 *
 * Item
 * - label: あり、なし
 * - wide: true, false
 * - 位置: Containerの下、裸
 */


export default function () {

  const [testWord, setTestWord] = useState<string | undefined>('テストテストテストテスト')
  const [_2_1_itemCount, set_2_1_itemCount] = useState<number | undefined>(8)
  const [dark, setDark] = useState<boolean | undefined>(false)
  const rootClassName = 'p-12 bg-color-0'

  // gridが縦並びになるかどうかを確認するための最小限の構成
  return (
    <VForm.Container label="コンテナ2-1個目" leftColumnMinWidth="7rem">

      <VForm.Item label="2-1 要素数">
        <Input.Num value={_2_1_itemCount} onChange={set_2_1_itemCount} />
      </VForm.Item>
      {Array.from({ length: Math.max(0, (_2_1_itemCount ?? 0) - 1) }).map((_, i) => (
        <VForm.Item key={i} label={`入力フォーム${i}`}>
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
      ))}

    </VForm.Container>
  )

  return (
    <div className={`flex flex-col ${dark && 'dark'}`} style={{ fontFamily: 'BIZ UDGothic' }}>

      <VForm.Container label="メイン" leftColumnMinWidth="6.5rem" className={rootClassName}>

        <VForm.Item>
          <label className="flex gap-1 items-center">
            <Input.CheckBox value={dark} onChange={setDark} />
            <span className="text-color-8">ダークモード</span>
          </label>
        </VForm.Item>
        <VForm.Item label="入フ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォーム">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォーム">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォーム">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォーム">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォーム">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="入力フォーム＋＋＋＋＋＋＋＋＋＋＋＋＋＋">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>

        <VForm.Container label="コンテナ2-1個目">

          <VForm.Item label="2-1 要素数">
            <Input.Num value={_2_1_itemCount} onChange={set_2_1_itemCount} />
          </VForm.Item>
          {Array.from({ length: Math.max(0, (_2_1_itemCount ?? 0) - 1) }).map((_, i) => (
            <VForm.Item key={i} label={`入力フォーム${i}`}>
              <Input.Word value={testWord} onChange={setTestWord} />
            </VForm.Item>
          ))}

          <VForm.Container label="コンテナ2-1-1個目">
            <VForm.Item label="入力フォーム">
              <Input.Word value={testWord} onChange={setTestWord} />
            </VForm.Item>
            <VForm.Item label="内包する要素ゼロ個(Item)">
              {/* <Input.Word value={testWord} onChange={setTestWord} /> */}
            </VForm.Item>
            <VForm.Container label="内包する要素ゼロ個(Container)">
            </VForm.Container>
          </VForm.Container>
          <VForm.Item>
            <Input.Word value={testWord} onChange={setTestWord} placeholder="ラベルなし" />
          </VForm.Item>
          <VForm.Item label="入力フォーム">
            <Input.Word value={testWord} onChange={setTestWord} />
          </VForm.Item>
          <VForm.Container label="コンテナ2-1-2個目" labelSide={<AlertButton count={12} />} leftColumnMinWidth="24rem">
            <VForm.Item
              label="入力フォーム"
              labelSide={<>
                <span className="text-sm">※この項目の説明文。<br />この項目の理由、目的、背景など</span>
                <AlertButton count={2} />
              </>}
            >
              <Input.Word value={testWord} onChange={setTestWord} />
            </VForm.Item>
            <VForm.Item label="入力フォームWIDE" labelSide={<AlertButton count={12} />} wide>
              <Input.Word value={testWord} onChange={setTestWord} />
            </VForm.Item>
            <VForm.Item label="入力フォームWIDE" wide>
              <Input.Word className="border border-color-4 w-full" />
            </VForm.Item>
          </VForm.Container>
        </VForm.Container>

        <VForm.Container label="コンテナ2-2個目">
          <VForm.Item label="入力フォーム">
            <Input.Word value={testWord} onChange={setTestWord} />
          </VForm.Item>
          <VForm.Item label="入力フォーム">
            <Input.Word value={testWord} onChange={setTestWord} />
          </VForm.Item>
        </VForm.Container>

        <VForm.Container labelSide={<AlertButton />}>
          <VForm.Item label="入力フォーム">
            <Input.Word value={testWord} onChange={setTestWord} />
          </VForm.Item>
          <VForm.Item label="入力フォーム">
            <Input.Word value={testWord} onChange={setTestWord} />
          </VForm.Item>
        </VForm.Container>
      </VForm.Container>

      <hr className="border-color-5" />

      <VForm.Container className={rootClassName}>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
        <VForm.Item label="Itemのみ＋＋＋＋＋＋＋＋＋＋＋＋">
          <Input.Word value={testWord} onChange={setTestWord} />
        </VForm.Item>
      </VForm.Container>

      <hr className="border-color-5" />

      <VForm.Container label="Containerのみ" leftColumnMinWidth="14rem" className={rootClassName}>
        <VForm.Container label="inner1">
          <VForm.Container label="inner2">
            <VForm.Container label="inner3">
              <VForm.Item label="入力フォーム">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
              <VForm.Item label="入力フォーム">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
              <VForm.Item label="入力フォーム">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
              <VForm.Item label="入力フォーム">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
              <VForm.Item label="入力フォーム">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
              <VForm.Item label="入力フォーム">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
              <VForm.Item label="入力フォーム＋＋＋＋＋＋＋＋＋＋＋＋＋＋">
                <Input.Word value={testWord} onChange={setTestWord} />
              </VForm.Item>
            </VForm.Container>
          </VForm.Container>
        </VForm.Container>
      </VForm.Container>
    </div>
  )
}

const AlertButton = ({ count }: { count?: number }) => {
  return <>
    {Array.from({ length: count ?? 1 }).map((_, i) => (
      <input key={i} type="button" value="ボタン" onClick={() => alert('aaa')} className="border border-color-9 cursor-pointer" />
    ))}
  </>
}
